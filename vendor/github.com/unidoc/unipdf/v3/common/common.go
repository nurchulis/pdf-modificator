//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_ce "io";_ac "os";_aa "path/filepath";_g "runtime";_b "time";);

// Notice logs notice message.
func (_ddf WriterLogger )Notice (format string ,args ...interface{}){if _ddf .LogLevel >=LogLevelNotice {_fa :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ddf .logToWriter (_ddf .Output ,_fa ,format ,args ...);};};const _gcg =29;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Warning logs warning message.
func (_bcd WriterLogger )Warning (format string ,args ...interface{}){if _bcd .LogLevel >=LogLevelWarning {_aaa :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bcd .logToWriter (_bcd .Output ,_aaa ,format ,args ...);};};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_cg string ,_bf ...interface{});Warning (_bc string ,_aac ...interface{});Notice (_e string ,_d ...interface{});Info (_ba string ,_db ...interface{});Debug (_cc string ,_gc ...interface{});Trace (_dbd string ,_acd ...interface{});
IsLogLevel (_f LogLevel )bool ;};

// Debug logs debug message.
func (_de ConsoleLogger )Debug (format string ,args ...interface{}){if _de .LogLevel >=LogLevelDebug {_aba :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_de .output (_ac .Stdout ,_aba ,format ,args ...);};};

// Error logs error message.
func (_ab ConsoleLogger )Error (format string ,args ...interface{}){if _ab .LogLevel >=LogLevelError {_da :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ab .output (_ac .Stdout ,_da ,format ,args ...);};};func (_fgd ConsoleLogger )output (_gd _ce .Writer ,_ec string ,_bd string ,_fe ...interface{}){_cgce (_gd ,_ec ,_bd ,_fe ...);
};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Notice logs notice message.
func (_dg ConsoleLogger )Notice (format string ,args ...interface{}){if _dg .LogLevel >=LogLevelNotice {_aab :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_dg .output (_ac .Stdout ,_aab ,format ,args ...);};};

// Info logs info message.
func (_bgf WriterLogger )Info (format string ,args ...interface{}){if _bgf .LogLevel >=LogLevelInfo {_abg :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bgf .logToWriter (_bgf .Output ,_abg ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _ce .Writer )*WriterLogger {_be :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_be ;};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_cb ConsoleLogger )IsLogLevel (level LogLevel )bool {return _cb .LogLevel >=level };const _bab =15;

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Trace logs trace message.
func (_bb ConsoleLogger )Trace (format string ,args ...interface{}){if _bb .LogLevel >=LogLevelTrace {_aca :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_bb .output (_ac .Stdout ,_aca ,format ,args ...);};};func (_bad WriterLogger )logToWriter (_gf _ce .Writer ,_bae string ,_fab string ,_cgc ...interface{}){_cgce (_gf ,_bae ,_fab ,_cgc );
};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Error logs error message.
func (_gg WriterLogger )Error (format string ,args ...interface{}){if _gg .LogLevel >=LogLevelError {_ge :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_gg .logToWriter (_gg .Output ,_ge ,format ,args ...);};};const _gb ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";


// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _b .Time )string {return t .Format (_gb )+"\u0020\u0055\u0054\u0043"};

// Trace logs trace message.
func (_geb WriterLogger )Trace (format string ,args ...interface{}){if _geb .LogLevel >=LogLevelTrace {_ca :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_geb .logToWriter (_geb .Output ,_ca ,format ,args ...);};};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _ce .Writer ;};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};const _ad =30;

// Info logs info message.
func (_eb ConsoleLogger )Info (format string ,args ...interface{}){if _eb .LogLevel >=LogLevelInfo {_fg :="\u005bI\u004e\u0046\u004f\u005d\u0020";_eb .output (_ac .Stdout ,_fg ,format ,args ...);};};const Version ="\u0033\u002e\u0034\u0036\u002e\u0030";
const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Debug logs debug message.
func (_cea WriterLogger )Debug (format string ,args ...interface{}){if _cea .LogLevel >=LogLevelDebug {_aacf :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_cea .logToWriter (_cea .Output ,_aacf ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };func _cgce (_af _ce .Writer ,_ag string ,_ced string ,_caa ...interface{}){_ ,_df ,_gda ,_def :=_g .Caller (3);if !_def {_df ="\u003f\u003f\u003f";_gda =0;}else {_df =_aa .Base (_df );};_aad :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_ag ,_df ,_gda )+_ced +"\u000a";
_c .Fprintf (_af ,_aad ,_caa ...);};var ReleasedAt =_b .Date (_cag ,_dde ,_gcg ,_bab ,_ad ,0,0,_b .UTC );

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};var Log Logger =DummyLogger {};

// DummyLogger does nothing.
type DummyLogger struct{};

// Warning logs warning message.
func (_cee ConsoleLogger )Warning (format string ,args ...interface{}){if _cee .LogLevel >=LogLevelWarning {_bg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cee .output (_ac .Stdout ,_bg ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_dd WriterLogger )IsLogLevel (level LogLevel )bool {return _dd .LogLevel >=level };

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};const _cag =2023;const _dde =5;

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};