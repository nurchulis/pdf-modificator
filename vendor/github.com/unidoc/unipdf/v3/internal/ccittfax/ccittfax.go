//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_fg "github.com/unidoc/unipdf/v3/internal/bitwise";_f "io";_d "math";);func (_dbcf *tree )fillWithNode (_acfd ,_faa int ,_ddc *treeNode )error {_bea :=_dbcf ._agbda ;for _bgg :=0;_bgg < _acfd ;_bgg ++{_ee :=uint (_acfd -1-_bgg );
_bfe :=((_faa >>_ee )&1)!=0;_edg :=_bea .walk (_bfe );if _edg !=nil {if _edg ._fae {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_bea =_edg ;continue ;};if _bgg ==_acfd -1{_edg =_ddc ;}else {_edg =&treeNode {};};if _faa ==0{_edg ._gge =true ;};_bea .set (_bfe ,_edg );_bea =_edg ;};return nil ;};func init (){_c =&treeNode {_fae :true ,_aab :_db };_be =&treeNode {_aab :_ba ,_cfb :_c };
_be ._ceb =_be ;_bg =&tree {_agbda :&treeNode {}};if _bgf :=_bg .fillWithNode (12,0,_be );_bgf !=nil {panic (_bgf .Error ());};if _ac :=_bg .fillWithNode (12,1,_c );_ac !=nil {panic (_ac .Error ());};_ga =&tree {_agbda :&treeNode {}};for _cag :=0;_cag < len (_cc );
_cag ++{for _dc :=0;_dc < len (_cc [_cag ]);_dc ++{if _dg :=_ga .fill (_cag +2,int (_cc [_cag ][_dc ]),int (_cb [_cag ][_dc ]));_dg !=nil {panic (_dg .Error ());};};};if _ad :=_ga .fillWithNode (12,0,_be );_ad !=nil {panic (_ad .Error ());};if _da :=_ga .fillWithNode (12,1,_c );
_da !=nil {panic (_da .Error ());};_e =&tree {_agbda :&treeNode {}};for _bf :=0;_bf < len (_gadb );_bf ++{for _cad :=0;_cad < len (_gadb [_bf ]);_cad ++{if _eb :=_e .fill (_bf +4,int (_gadb [_bf ][_cad ]),int (_cd [_bf ][_cad ]));_eb !=nil {panic (_eb .Error ());
};};};if _dce :=_e .fillWithNode (12,0,_be );_dce !=nil {panic (_dce .Error ());};if _bec :=_e .fillWithNode (12,1,_c );_bec !=nil {panic (_bec .Error ());};_gad =&tree {_agbda :&treeNode {}};if _fc :=_gad .fill (4,1,_ca );_fc !=nil {panic (_fc .Error ());
};if _dcb :=_gad .fill (3,1,_a );_dcb !=nil {panic (_dcb .Error ());};if _ae :=_gad .fill (1,1,0);_ae !=nil {panic (_ae .Error ());};if _gac :=_gad .fill (3,3,1);_gac !=nil {panic (_gac .Error ());};if _eg :=_gad .fill (6,3,2);_eg !=nil {panic (_eg .Error ());
};if _ace :=_gad .fill (7,3,3);_ace !=nil {panic (_ace .Error ());};if _aeg :=_gad .fill (3,2,-1);_aeg !=nil {panic (_aeg .Error ());};if _bac :=_gad .fill (6,2,-2);_bac !=nil {panic (_bac .Error ());};if _df :=_gad .fill (7,2,-3);_df !=nil {panic (_df .Error ());
};};func (_egae *Decoder )fetch ()error {if _egae ._dfe ==-1{return nil ;};if _egae ._cg < _egae ._dfe {return nil ;};_egae ._dfe =0;_cbe :=_egae .decodeRow ();if _cbe !=nil {if !_b .Is (_cbe ,_f .EOF ){return _cbe ;};if _egae ._dfe !=0{return _cbe ;};
_egae ._dfe =-1;};_egae ._cg =0;return nil ;};func _fcd (_geb int )([]byte ,int ){var _abc []byte ;for _feb :=0;_feb < 6;_feb ++{_abc ,_geb =_cada (_abc ,_geb ,_ce );};return _abc ,_geb %8;};func (_ebd *Decoder )decodeRowType6 ()error {if _ebd ._ega {_ebd ._af .Align ();
};if _ebd ._gde {_ebd ._af .Mark ();_dcad ,_acd :=_ebd .tryFetchEOL ();if _acd !=nil {return _acd ;};if _dcad {_dcad ,_acd =_ebd .tryFetchEOL ();if _acd !=nil {return _acd ;};if _dcad {return _f .EOF ;};};_ebd ._af .Reset ();};return _ebd .decode2D ();
};func (_gaca *Decoder )tryFetchEOL1 ()(bool ,error ){_cbeb ,_ebf :=_gaca ._af .ReadBits (13);if _ebf !=nil {return false ,_ebf ;};return _cbeb ==0x3,nil ;};func (_fa *Decoder )decode1D ()error {var (_beg int ;_bedf error ;);_ggd :=true ;_fa ._ead =0;for {var _abb int ;
if _ggd {_abb ,_bedf =_fa .decodeRun (_e );}else {_abb ,_bedf =_fa .decodeRun (_ga );};if _bedf !=nil {return _bedf ;};_beg +=_abb ;_fa ._aega [_fa ._ead ]=_beg ;_fa ._ead ++;_ggd =!_ggd ;if _beg >=_fa ._fed {break ;};};return nil ;};func (_gdc *Decoder )decodeRow ()(_dad error ){if !_gdc ._gde &&_gdc ._cec > 0&&_gdc ._cec ==_gdc ._add {return _f .EOF ;
};switch _gdc ._fgf {case _dd :_dad =_gdc .decodeRowType2 ();case _ef :_dad =_gdc .decodeRowType4 ();case _agf :_dad =_gdc .decodeRowType6 ();};if _dad !=nil {return _dad ;};_dgb :=0;_egag :=true ;_gdc ._cgc =0;for _eca :=0;_eca < _gdc ._ead ;_eca ++{_fbd :=_gdc ._fed ;
if _eca !=_gdc ._ead {_fbd =_gdc ._aega [_eca ];};if _fbd > _gdc ._fed {_fbd =_gdc ._fed ;};_bag :=_dgb /8;for _dgb %8!=0&&_fbd -_dgb > 0{var _ff byte ;if !_egag {_ff =1<<uint (7-(_dgb %8));};_gdc ._acf [_bag ]|=_ff ;_dgb ++;};if _dgb %8==0{_bag =_dgb /8;
var _bad byte ;if !_egag {_bad =0xff;};for _fbd -_dgb > 7{_gdc ._acf [_bag ]=_bad ;_dgb +=8;_bag ++;};};for _fbd -_dgb > 0{if _dgb %8==0{_gdc ._acf [_bag ]=0;};var _dab byte ;if !_egag {_dab =1<<uint (7-(_dgb %8));};_gdc ._acf [_bag ]|=_dab ;_dgb ++;};
_egag =!_egag ;};if _dgb !=_gdc ._fed {return _b .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_gdc ._dfe =(_dgb +7)/8;_gdc ._add ++;return nil ;};func init (){_fe =make (map[int ]code );_fe [0]=code {Code :13<<8|3<<6,BitsWritten :10};_fe [1]=code {Code :2<<(5+8),BitsWritten :3};_fe [2]=code {Code :3<<(6+8),BitsWritten :2};_fe [3]=code {Code :2<<(6+8),BitsWritten :2};
_fe [4]=code {Code :3<<(5+8),BitsWritten :3};_fe [5]=code {Code :3<<(4+8),BitsWritten :4};_fe [6]=code {Code :2<<(4+8),BitsWritten :4};_fe [7]=code {Code :3<<(3+8),BitsWritten :5};_fe [8]=code {Code :5<<(2+8),BitsWritten :6};_fe [9]=code {Code :4<<(2+8),BitsWritten :6};
_fe [10]=code {Code :4<<(1+8),BitsWritten :7};_fe [11]=code {Code :5<<(1+8),BitsWritten :7};_fe [12]=code {Code :7<<(1+8),BitsWritten :7};_fe [13]=code {Code :4<<8,BitsWritten :8};_fe [14]=code {Code :7<<8,BitsWritten :8};_fe [15]=code {Code :12<<8,BitsWritten :9};
_fe [16]=code {Code :5<<8|3<<6,BitsWritten :10};_fe [17]=code {Code :6<<8,BitsWritten :10};_fe [18]=code {Code :2<<8,BitsWritten :10};_fe [19]=code {Code :12<<8|7<<5,BitsWritten :11};_fe [20]=code {Code :13<<8,BitsWritten :11};_fe [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_fe [22]=code {Code :6<<8|7<<5,BitsWritten :11};_fe [23]=code {Code :5<<8,BitsWritten :11};_fe [24]=code {Code :2<<8|7<<5,BitsWritten :11};_fe [25]=code {Code :3<<8,BitsWritten :11};_fe [26]=code {Code :12<<8|10<<4,BitsWritten :12};_fe [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_fe [28]=code {Code :12<<8|12<<4,BitsWritten :12};_fe [29]=code {Code :12<<8|13<<4,BitsWritten :12};_fe [30]=code {Code :6<<8|8<<4,BitsWritten :12};_fe [31]=code {Code :6<<8|9<<4,BitsWritten :12};_fe [32]=code {Code :6<<8|10<<4,BitsWritten :12};_fe [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_fe [34]=code {Code :13<<8|2<<4,BitsWritten :12};_fe [35]=code {Code :13<<8|3<<4,BitsWritten :12};_fe [36]=code {Code :13<<8|4<<4,BitsWritten :12};_fe [37]=code {Code :13<<8|5<<4,BitsWritten :12};_fe [38]=code {Code :13<<8|6<<4,BitsWritten :12};_fe [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_fe [40]=code {Code :6<<8|12<<4,BitsWritten :12};_fe [41]=code {Code :6<<8|13<<4,BitsWritten :12};_fe [42]=code {Code :13<<8|10<<4,BitsWritten :12};_fe [43]=code {Code :13<<8|11<<4,BitsWritten :12};_fe [44]=code {Code :5<<8|4<<4,BitsWritten :12};_fe [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_fe [46]=code {Code :5<<8|6<<4,BitsWritten :12};_fe [47]=code {Code :5<<8|7<<4,BitsWritten :12};_fe [48]=code {Code :6<<8|4<<4,BitsWritten :12};_fe [49]=code {Code :6<<8|5<<4,BitsWritten :12};_fe [50]=code {Code :5<<8|2<<4,BitsWritten :12};_fe [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_fe [52]=code {Code :2<<8|4<<4,BitsWritten :12};_fe [53]=code {Code :3<<8|7<<4,BitsWritten :12};_fe [54]=code {Code :3<<8|8<<4,BitsWritten :12};_fe [55]=code {Code :2<<8|7<<4,BitsWritten :12};_fe [56]=code {Code :2<<8|8<<4,BitsWritten :12};_fe [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_fe [58]=code {Code :5<<8|9<<4,BitsWritten :12};_fe [59]=code {Code :2<<8|11<<4,BitsWritten :12};_fe [60]=code {Code :2<<8|12<<4,BitsWritten :12};_fe [61]=code {Code :5<<8|10<<4,BitsWritten :12};_fe [62]=code {Code :6<<8|6<<4,BitsWritten :12};_fe [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_fgg =make (map[int ]code );_fgg [0]=code {Code :53<<8,BitsWritten :8};_fgg [1]=code {Code :7<<(2+8),BitsWritten :6};_fgg [2]=code {Code :7<<(4+8),BitsWritten :4};_fgg [3]=code {Code :8<<(4+8),BitsWritten :4};_fgg [4]=code {Code :11<<(4+8),BitsWritten :4};
_fgg [5]=code {Code :12<<(4+8),BitsWritten :4};_fgg [6]=code {Code :14<<(4+8),BitsWritten :4};_fgg [7]=code {Code :15<<(4+8),BitsWritten :4};_fgg [8]=code {Code :19<<(3+8),BitsWritten :5};_fgg [9]=code {Code :20<<(3+8),BitsWritten :5};_fgg [10]=code {Code :7<<(3+8),BitsWritten :5};
_fgg [11]=code {Code :8<<(3+8),BitsWritten :5};_fgg [12]=code {Code :8<<(2+8),BitsWritten :6};_fgg [13]=code {Code :3<<(2+8),BitsWritten :6};_fgg [14]=code {Code :52<<(2+8),BitsWritten :6};_fgg [15]=code {Code :53<<(2+8),BitsWritten :6};_fgg [16]=code {Code :42<<(2+8),BitsWritten :6};
_fgg [17]=code {Code :43<<(2+8),BitsWritten :6};_fgg [18]=code {Code :39<<(1+8),BitsWritten :7};_fgg [19]=code {Code :12<<(1+8),BitsWritten :7};_fgg [20]=code {Code :8<<(1+8),BitsWritten :7};_fgg [21]=code {Code :23<<(1+8),BitsWritten :7};_fgg [22]=code {Code :3<<(1+8),BitsWritten :7};
_fgg [23]=code {Code :4<<(1+8),BitsWritten :7};_fgg [24]=code {Code :40<<(1+8),BitsWritten :7};_fgg [25]=code {Code :43<<(1+8),BitsWritten :7};_fgg [26]=code {Code :19<<(1+8),BitsWritten :7};_fgg [27]=code {Code :36<<(1+8),BitsWritten :7};_fgg [28]=code {Code :24<<(1+8),BitsWritten :7};
_fgg [29]=code {Code :2<<8,BitsWritten :8};_fgg [30]=code {Code :3<<8,BitsWritten :8};_fgg [31]=code {Code :26<<8,BitsWritten :8};_fgg [32]=code {Code :27<<8,BitsWritten :8};_fgg [33]=code {Code :18<<8,BitsWritten :8};_fgg [34]=code {Code :19<<8,BitsWritten :8};
_fgg [35]=code {Code :20<<8,BitsWritten :8};_fgg [36]=code {Code :21<<8,BitsWritten :8};_fgg [37]=code {Code :22<<8,BitsWritten :8};_fgg [38]=code {Code :23<<8,BitsWritten :8};_fgg [39]=code {Code :40<<8,BitsWritten :8};_fgg [40]=code {Code :41<<8,BitsWritten :8};
_fgg [41]=code {Code :42<<8,BitsWritten :8};_fgg [42]=code {Code :43<<8,BitsWritten :8};_fgg [43]=code {Code :44<<8,BitsWritten :8};_fgg [44]=code {Code :45<<8,BitsWritten :8};_fgg [45]=code {Code :4<<8,BitsWritten :8};_fgg [46]=code {Code :5<<8,BitsWritten :8};
_fgg [47]=code {Code :10<<8,BitsWritten :8};_fgg [48]=code {Code :11<<8,BitsWritten :8};_fgg [49]=code {Code :82<<8,BitsWritten :8};_fgg [50]=code {Code :83<<8,BitsWritten :8};_fgg [51]=code {Code :84<<8,BitsWritten :8};_fgg [52]=code {Code :85<<8,BitsWritten :8};
_fgg [53]=code {Code :36<<8,BitsWritten :8};_fgg [54]=code {Code :37<<8,BitsWritten :8};_fgg [55]=code {Code :88<<8,BitsWritten :8};_fgg [56]=code {Code :89<<8,BitsWritten :8};_fgg [57]=code {Code :90<<8,BitsWritten :8};_fgg [58]=code {Code :91<<8,BitsWritten :8};
_fgg [59]=code {Code :74<<8,BitsWritten :8};_fgg [60]=code {Code :75<<8,BitsWritten :8};_fgg [61]=code {Code :50<<8,BitsWritten :8};_fgg [62]=code {Code :51<<8,BitsWritten :8};_fgg [63]=code {Code :52<<8,BitsWritten :8};_gfb =make (map[int ]code );_gfb [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_gfb [128]=code {Code :12<<8|8<<4,BitsWritten :12};_gfb [192]=code {Code :12<<8|9<<4,BitsWritten :12};_gfb [256]=code {Code :5<<8|11<<4,BitsWritten :12};_gfb [320]=code {Code :3<<8|3<<4,BitsWritten :12};_gfb [384]=code {Code :3<<8|4<<4,BitsWritten :12};
_gfb [448]=code {Code :3<<8|5<<4,BitsWritten :12};_gfb [512]=code {Code :3<<8|12<<3,BitsWritten :13};_gfb [576]=code {Code :3<<8|13<<3,BitsWritten :13};_gfb [640]=code {Code :2<<8|10<<3,BitsWritten :13};_gfb [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_gfb [768]=code {Code :2<<8|12<<3,BitsWritten :13};_gfb [832]=code {Code :2<<8|13<<3,BitsWritten :13};_gfb [896]=code {Code :3<<8|18<<3,BitsWritten :13};_gfb [960]=code {Code :3<<8|19<<3,BitsWritten :13};_gfb [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_gfb [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_gfb [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_gfb [1216]=code {Code :119<<3,BitsWritten :13};_gfb [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_gfb [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_gfb [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_gfb [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_gfb [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_gfb [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_gfb [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_gfb [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ec =make (map[int ]code );_ec [64]=code {Code :27<<(3+8),BitsWritten :5};_ec [128]=code {Code :18<<(3+8),BitsWritten :5};_ec [192]=code {Code :23<<(2+8),BitsWritten :6};_ec [256]=code {Code :55<<(1+8),BitsWritten :7};
_ec [320]=code {Code :54<<8,BitsWritten :8};_ec [384]=code {Code :55<<8,BitsWritten :8};_ec [448]=code {Code :100<<8,BitsWritten :8};_ec [512]=code {Code :101<<8,BitsWritten :8};_ec [576]=code {Code :104<<8,BitsWritten :8};_ec [640]=code {Code :103<<8,BitsWritten :8};
_ec [704]=code {Code :102<<8,BitsWritten :9};_ec [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ec [832]=code {Code :105<<8,BitsWritten :9};_ec [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ec [960]=code {Code :106<<8,BitsWritten :9};_ec [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_ec [1088]=code {Code :107<<8,BitsWritten :9};_ec [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ec [1216]=code {Code :108<<8,BitsWritten :9};_ec [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ec [1344]=code {Code :109<<8,BitsWritten :9};_ec [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_ec [1472]=code {Code :76<<8,BitsWritten :9};_ec [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ec [1600]=code {Code :77<<8,BitsWritten :9};_ec [1664]=code {Code :24<<(2+8),BitsWritten :6};_ec [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_gb =make (map[int ]code );
_gb [1792]=code {Code :1<<8,BitsWritten :11};_gb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_gb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_gb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_gb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_gb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_gb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_gb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_gb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_gb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_gb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_gb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_gb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cbd =make (map[int ]byte );_cbd [0]=0xFF;_cbd [1]=0xFE;_cbd [2]=0xFC;_cbd [3]=0xF8;_cbd [4]=0xF0;_cbd [5]=0xE0;_cbd [6]=0xC0;_cbd [7]=0x80;_cbd [8]=0x00;
};var (_ffdd byte =1;_ecb byte =0;);func (_fggd *Decoder )getNextChangingElement (_bcb int ,_ebe bool )int {_ed :=0;if !_ebe {_ed =1;};_fcag :=int (uint32 (_fggd ._cgc )&0xFFFFFFFE)+_ed ;if _fcag > 2{_fcag -=2;};if _bcb ==0{return _fcag ;};for _eab :=_fcag ;
_eab < _fggd ._dbe ;_eab +=2{if _bcb < _fggd ._abfg [_eab ]{_fggd ._cgc =_eab ;return _eab ;};};return -1;};func (_bef *Encoder )encodeG4 (_bage [][]byte )[]byte {_dcdc :=make ([][]byte ,len (_bage ));copy (_dcdc ,_bage );_dcdc =_ffa (_dcdc );var _fbacc []byte ;
var _adg int ;for _gaa :=1;_gaa < len (_dcdc );_gaa ++{if _bef .Rows > 0&&!_bef .EndOfBlock &&_gaa ==(_bef .Rows +1){break ;};var _ced []byte ;var _cfg ,_cggf ,_bfgd int ;_dee :=_adg ;_bccb :=-1;for _bccb < len (_dcdc [_gaa ]){_cfg =_cdaa (_dcdc [_gaa ],_bccb );
_cggf =_gfga (_dcdc [_gaa ],_dcdc [_gaa -1],_bccb );_bfgd =_cdaa (_dcdc [_gaa -1],_cggf );if _bfgd < _cfg {_ced ,_dee =_cada (_ced ,_dee ,_dfd );_bccb =_bfgd ;}else {if _d .Abs (float64 (_cggf -_cfg ))> 3{_ced ,_dee ,_bccb =_dbc (_dcdc [_gaa ],_ced ,_dee ,_bccb ,_cfg );
}else {_ced ,_dee =_cgcb (_ced ,_dee ,_cfg ,_cggf );_bccb =_cfg ;};};};_fbacc =_bef .appendEncodedRow (_fbacc ,_ced ,_adg );if _bef .EncodedByteAlign {_dee =0;};_adg =_dee %8;};if _bef .EndOfBlock {_deb ,_ :=_dbga (_adg );_fbacc =_bef .appendEncodedRow (_fbacc ,_deb ,_adg );
};return _fbacc ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_agb :=&Decoder {_af :_fg .NewReader (data ),_fed :options .Columns ,_cec :options .Rows ,_gdg :options .DamagedRowsBeforeError ,_acf :make ([]byte ,(options .Columns +7)/8),_abfg :make ([]int ,options .Columns +2),_aega :make ([]int ,options .Columns +2),_ega :options .EncodedByteAligned ,_bb :options .BlackIsOne ,_ddf :options .EndOfLine ,_gde :options .EndOfBlock };
switch {case options .K ==0:_agb ._fgf =_ef ;if len (data )< 20{return nil ,_b .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_dde :=data [:20];if _dde [0]!=0||(_dde [1]>>4!=1&&_dde [1]!=1){_agb ._fgf =_dd ;
_acg :=(uint16 (_dde [0])<<8+uint16 (_dde [1]&0xff))>>4;for _fec :=12;_fec < 160;_fec ++{_acg =(_acg <<1)+uint16 ((_dde [_fec /8]>>uint16 (7-(_fec %8)))&0x01);if _acg &0xfff==1{_agb ._fgf =_ef ;break ;};};};case options .K < 0:_agb ._fgf =_agf ;case options .K > 0:_agb ._fgf =_ef ;
_agb ._dca =true ;};switch _agb ._fgf {case _dd ,_ef ,_agf :default:return nil ,_b .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _agb ,nil ;};func (_ffe *Decoder )tryFetchRTC2D ()(_gfg error ){_ffe ._af .Mark ();var _dcd bool ;for _egd :=0;_egd < 5;_egd ++{_dcd ,_gfg =_ffe .tryFetchEOL1 ();if _gfg !=nil {if _b .Is (_gfg ,_f .EOF ){if _egd ==0{break ;};return _dgg ;};};if _dcd {continue ;
};if _egd > 0{return _dgg ;};break ;};if _dcd {return _f .EOF ;};_ffe ._af .Reset ();return _gfg ;};func _dbc (_daga ,_accf []byte ,_fcb ,_abag ,_ffed int )([]byte ,int ,int ){_gee :=_cdaa (_daga ,_ffed );_abgf :=_abag >=0&&_daga [_abag ]==_ffdd ||_abag ==-1;
_accf ,_fcb =_cada (_accf ,_fcb ,_bacd );var _dea int ;if _abag > -1{_dea =_ffed -_abag ;}else {_dea =_ffed -_abag -1;};_accf ,_fcb =_gda (_accf ,_fcb ,_dea ,_abgf );_abgf =!_abgf ;_cfc :=_gee -_ffed ;_accf ,_fcb =_gda (_accf ,_fcb ,_cfc ,_abgf );_abag =_gee ;
return _accf ,_fcb ,_abag ;};var (_dgg =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_dgd =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_cfa *Decoder )decodeRowType4 ()error {if !_cfa ._dca {return _cfa .decoderRowType41D ();};if _cfa ._ega {_cfa ._af .Align ();};_cfa ._af .Mark ();_fba ,_ccd :=_cfa .tryFetchEOL ();if _ccd !=nil {return _ccd ;};if !_fba &&_cfa ._ddf {_cfa ._fee ++;
if _cfa ._fee > _cfa ._gdg {return _dgd ;};_cfa ._af .Reset ();};if !_fba {_cfa ._af .Reset ();};_bba ,_ccd :=_cfa ._af .ReadBool ();if _ccd !=nil {return _ccd ;};if _bba {if _fba &&_cfa ._gde {if _ccd =_cfa .tryFetchRTC2D ();_ccd !=nil {return _ccd ;};
};_ccd =_cfa .decode1D ();}else {_ccd =_cfa .decode2D ();};if _ccd !=nil {return _ccd ;};return nil ;};func _dbga (_dag int )([]byte ,int ){var _acc []byte ;for _feg :=0;_feg < 2;_feg ++{_acc ,_dag =_cada (_acc ,_dag ,_cf );};return _acc ,_dag %8;};func (_bc *Decoder )Read (in []byte )(int ,error ){if _bc ._aeae !=nil {return 0,_bc ._aeae ;
};_fd :=len (in );var (_efb int ;_bed int ;);for _fd !=0{if _bc ._cg >=_bc ._dfe {if _eaa :=_bc .fetch ();_eaa !=nil {_bc ._aeae =_eaa ;return 0,_eaa ;};};if _bc ._dfe ==-1{return _efb ,_f .EOF ;};switch {case _fd <=_bc ._dfe -_bc ._cg :_bacf :=_bc ._acf [_bc ._cg :_bc ._cg +_fd ];
for _ ,_efbc :=range _bacf {if !_bc ._bb {_efbc =^_efbc ;};in [_bed ]=_efbc ;_bed ++;};_efb +=len (_bacf );_bc ._cg +=len (_bacf );return _efb ,nil ;default:_bee :=_bc ._acf [_bc ._cg :];for _ ,_daa :=range _bee {if !_bc ._bb {_daa =^_daa ;};in [_bed ]=_daa ;
_bed ++;};_efb +=len (_bee );_bc ._cg +=len (_bee );_fd -=len (_bee );};};return _efb ,nil ;};const (_ tiffType =iota ;_dd ;_ef ;_agf ;);type code struct{Code uint16 ;BitsWritten int ;};func _ebde (_bdc ,_gec []byte ,_agg int ,_ebdg bool )int {_gccb :=_cdaa (_gec ,_agg );
if _gccb < len (_gec )&&(_agg ==-1&&_gec [_gccb ]==_ffdd ||_agg >=0&&_agg < len (_bdc )&&_bdc [_agg ]==_gec [_gccb ]||_agg >=len (_bdc )&&_ebdg &&_gec [_gccb ]==_ffdd ||_agg >=len (_bdc )&&!_ebdg &&_gec [_gccb ]==_ecb ){_gccb =_cdaa (_gec ,_gccb );};return _gccb ;
};var _cd =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
type Decoder struct{_fed int ;_cec int ;_add int ;_acf []byte ;_gdg int ;_dca bool ;_cbdg bool ;_efc bool ;_bb bool ;_ddf bool ;_gde bool ;_ega bool ;_dfe int ;_cg int ;_abfg []int ;_aega []int ;_dbe int ;_ead int ;_fee int ;_cgc int ;_af *_fg .Reader ;
_fgf tiffType ;_aeae error ;};func (_cbf *Decoder )decodeG32D ()error {_cbf ._dbe =_cbf ._ead ;_cbf ._aega ,_cbf ._abfg =_cbf ._abfg ,_cbf ._aega ;_dec :=true ;var (_adc bool ;_agbd int ;_cgd error ;);_cbf ._ead =0;_cgf :for _agbd < _cbf ._fed {_fgb :=_gad ._agbda ;
for {_adc ,_cgd =_cbf ._af .ReadBool ();if _cgd !=nil {return _cgd ;};_fgb =_fgb .walk (_adc );if _fgb ==nil {continue _cgf ;};if !_fgb ._fae {continue ;};switch _fgb ._aab {case _a :var _egaga int ;if _dec {_egaga ,_cgd =_cbf .decodeRun (_e );}else {_egaga ,_cgd =_cbf .decodeRun (_ga );
};if _cgd !=nil {return _cgd ;};_agbd +=_egaga ;_cbf ._aega [_cbf ._ead ]=_agbd ;_cbf ._ead ++;if _dec {_egaga ,_cgd =_cbf .decodeRun (_ga );}else {_egaga ,_cgd =_cbf .decodeRun (_e );};if _cgd !=nil {return _cgd ;};_agbd +=_egaga ;_cbf ._aega [_cbf ._ead ]=_agbd ;
_cbf ._ead ++;case _ca :_cdf :=_cbf .getNextChangingElement (_agbd ,_dec )+1;if _cdf >=_cbf ._dbe {_agbd =_cbf ._fed ;}else {_agbd =_cbf ._abfg [_cdf ];};default:_ecd :=_cbf .getNextChangingElement (_agbd ,_dec );if _ecd >=_cbf ._dbe ||_ecd ==-1{_agbd =_cbf ._fed +_fgb ._aab ;
}else {_agbd =_cbf ._abfg [_ecd ]+_fgb ._aab ;};_cbf ._aega [_cbf ._ead ]=_agbd ;_cbf ._ead ++;_dec =!_dec ;};continue _cgf ;};};return nil ;};type treeNode struct{_ceb *treeNode ;_cfb *treeNode ;_aab int ;_gge bool ;_fae bool ;};func _gda (_gcg []byte ,_fgec int ,_fgd int ,_gfd bool )([]byte ,int ){var (_fbg code ;
_ageb bool ;);for !_ageb {_fbg ,_fgd ,_ageb =_aaf (_fgd ,_gfd );_gcg ,_fgec =_cada (_gcg ,_fgec ,_fbg );};return _gcg ,_fgec ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;
};func _cgcb (_aed []byte ,_dfa ,_dda ,_fgc int )([]byte ,int ){_faf :=_fef (_dda ,_fgc );_aed ,_dfa =_cada (_aed ,_dfa ,_faf );return _aed ,_dfa ;};func (_dfda *tree )fill (_cfdd ,_bffa ,_agee int )error {_fgaa :=_dfda ._agbda ;for _becd :=0;_becd < _cfdd ;
_becd ++{_gab :=_cfdd -1-_becd ;_ecbb :=((_bffa >>uint (_gab ))&1)!=0;_adf :=_fgaa .walk (_ecbb );if _adf !=nil {if _adf ._fae {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fgaa =_adf ;continue ;};_adf =&treeNode {};if _becd ==_cfdd -1{_adf ._aab =_agee ;_adf ._fae =true ;};if _bffa ==0{_adf ._gge =true ;};_fgaa .set (_ecbb ,_adf );_fgaa =_adf ;};return nil ;};func (_gc *Decoder )decode2D ()error {_gc ._dbe =_gc ._ead ;
_gc ._aega ,_gc ._abfg =_gc ._abfg ,_gc ._aega ;_ge :=true ;var (_cbfd bool ;_fge int ;_bga error ;);_gc ._ead =0;_ebc :for _fge < _gc ._fed {_bae :=_gad ._agbda ;for {_cbfd ,_bga =_gc ._af .ReadBool ();if _bga !=nil {return _bga ;};_bae =_bae .walk (_cbfd );
if _bae ==nil {continue _ebc ;};if !_bae ._fae {continue ;};switch _bae ._aab {case _a :var _dbec int ;if _ge {_dbec ,_bga =_gc .decodeRun (_e );}else {_dbec ,_bga =_gc .decodeRun (_ga );};if _bga !=nil {return _bga ;};_fge +=_dbec ;_gc ._aega [_gc ._ead ]=_fge ;
_gc ._ead ++;if _ge {_dbec ,_bga =_gc .decodeRun (_ga );}else {_dbec ,_bga =_gc .decodeRun (_e );};if _bga !=nil {return _bga ;};_fge +=_dbec ;_gc ._aega [_gc ._ead ]=_fge ;_gc ._ead ++;case _ca :_dfg :=_gc .getNextChangingElement (_fge ,_ge )+1;if _dfg >=_gc ._dbe {_fge =_gc ._fed ;
}else {_fge =_gc ._abfg [_dfg ];};default:_bbd :=_gc .getNextChangingElement (_fge ,_ge );if _bbd >=_gc ._dbe ||_bbd ==-1{_fge =_gc ._fed +_bae ._aab ;}else {_fge =_gc ._abfg [_bbd ]+_bae ._aab ;};_gc ._aega [_gc ._ead ]=_fge ;_gc ._ead ++;_ge =!_ge ;};
continue _ebc ;};};return nil ;};func (_efd *Decoder )looseFetchEOL ()(bool ,error ){_dbg ,_fea :=_efd ._af .ReadBits (12);if _fea !=nil {return false ,_fea ;};switch _dbg {case 0x1:return true ,nil ;case 0x0:for {_ada ,_bfg :=_efd ._af .ReadBool ();if _bfg !=nil {return false ,_bfg ;
};if _ada {return true ,nil ;};};default:return false ,nil ;};};type tree struct{_agbda *treeNode };func (_gbd tiffType )String ()string {switch _gbd {case _dd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _ef :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _agf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _cda (_bd int )([]byte ,int ){var _ede []byte ;
for _age :=0;_age < 6;_age ++{_ede ,_bd =_cada (_ede ,_bd ,_cf );};return _ede ,_bd %8;};func (_afg *Encoder )Encode (pixels [][]byte )[]byte {if _afg .BlackIs1 {_ffdd =0;_ecb =1;}else {_ffdd =1;_ecb =0;};if _afg .K ==0{return _afg .encodeG31D (pixels );
};if _afg .K > 0{return _afg .encodeG32D (pixels );};if _afg .K < 0{return _afg .encodeG4 (pixels );};return nil ;};func (_fbc *Decoder )decodeRowType2 ()error {if _fbc ._ega {_fbc ._af .Align ();};if _fca :=_fbc .decode1D ();_fca !=nil {return _fca ;};
return nil ;};func _fbdd (_abff []byte ,_cbfe int )([]byte ,int ){return _cada (_abff ,_cbfe ,_dfd )};func (_egb *Encoder )encodeG32D (_cbc [][]byte )[]byte {var _dba []byte ;var _aga int ;for _fcc :=0;_fcc < len (_cbc );_fcc +=_egb .K {if _egb .Rows > 0&&!_egb .EndOfBlock &&_fcc ==_egb .Rows {break ;
};_bgfe ,_efdbc :=_eff (_cbc [_fcc ],_aga ,_ce );_dba =_egb .appendEncodedRow (_dba ,_bgfe ,_aga );if _egb .EncodedByteAlign {_efdbc =0;};_aga =_efdbc ;for _aff :=_fcc +1;_aff < (_fcc +_egb .K )&&_aff < len (_cbc );_aff ++{if _egb .Rows > 0&&!_egb .EndOfBlock &&_aff ==_egb .Rows {break ;
};_fcce ,_aba :=_cada (nil ,_aga ,_gd );var _dfgc ,_fbac ,_ecab int ;_bfd :=-1;for _bfd < len (_cbc [_aff ]){_dfgc =_cdaa (_cbc [_aff ],_bfd );_fbac =_gfga (_cbc [_aff ],_cbc [_aff -1],_bfd );_ecab =_cdaa (_cbc [_aff -1],_fbac );if _ecab < _dfgc {_fcce ,_aba =_fbdd (_fcce ,_aba );
_bfd =_ecab ;}else {if _d .Abs (float64 (_fbac -_dfgc ))> 3{_fcce ,_aba ,_bfd =_dbc (_cbc [_aff ],_fcce ,_aba ,_bfd ,_dfgc );}else {_fcce ,_aba =_cgcb (_fcce ,_aba ,_dfgc ,_fbac );_bfd =_dfgc ;};};};_dba =_egb .appendEncodedRow (_dba ,_fcce ,_aga );if _egb .EncodedByteAlign {_aba =0;
};_aga =_aba %8;};};if _egb .EndOfBlock {_cgg ,_ :=_fcd (_aga );_dba =_egb .appendEncodedRow (_dba ,_cgg ,_aga );};return _dba ;};func _aaf (_gacd int ,_caf bool )(code ,int ,bool ){if _gacd < 64{if _caf {return _fgg [_gacd ],0,true ;};return _fe [_gacd ],0,true ;
};_agbg :=_gacd /64;if _agbg > 40{return _gb [2560],_gacd -2560,false ;};if _agbg > 27{return _gb [_agbg *64],_gacd -_agbg *64,false ;};if _caf {return _ec [_agbg *64],_gacd -_agbg *64,false ;};return _gfb [_agbg *64],_gacd -_agbg *64,false ;};func (_de *Decoder )decoderRowType41D ()error {if _de ._ega {_de ._af .Align ();
};_de ._af .Mark ();var (_gdb bool ;_ddd error ;);if _de ._ddf {_gdb ,_ddd =_de .tryFetchEOL ();if _ddd !=nil {return _ddd ;};if !_gdb {return _dgd ;};}else {_gdb ,_ddd =_de .looseFetchEOL ();if _ddd !=nil {return _ddd ;};};if !_gdb {_de ._af .Reset ();
};if _gdb &&_de ._gde {_de ._af .Mark ();for _dfeg :=0;_dfeg < 5;_dfeg ++{_gdb ,_ddd =_de .tryFetchEOL ();if _ddd !=nil {if _b .Is (_ddd ,_f .EOF ){if _dfeg ==0{break ;};return _dgg ;};};if _gdb {continue ;};if _dfeg > 0{return _dgg ;};break ;};if _gdb {return _f .EOF ;
};_de ._af .Reset ();};if _ddd =_de .decode1D ();_ddd !=nil {return _ddd ;};return nil ;};func (_aae *Decoder )tryFetchEOL ()(bool ,error ){_ffc ,_bcbd :=_aae ._af .ReadBits (12);if _bcbd !=nil {return false ,_bcbd ;};return _ffc ==0x1,nil ;};var _cc =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _cdaa (_fdc []byte ,_gdgf int )int {if _gdgf >=len (_fdc ){return _gdgf ;};if _gdgf < -1{_gdgf =-1;};var _aeba byte ;if _gdgf > -1{_aeba =_fdc [_gdgf ];}else {_aeba =_ffdd ;};_cbec :=_gdgf +1;for _cbec < len (_fdc ){if _fdc [_cbec ]!=_aeba {break ;
};_cbec ++;};return _cbec ;};func _gfga (_ecfa ,_caff []byte ,_dac int )int {_gccd :=_cdaa (_caff ,_dac );if _gccd < len (_caff )&&(_dac ==-1&&_caff [_gccd ]==_ffdd ||_dac >=0&&_dac < len (_ecfa )&&_ecfa [_dac ]==_caff [_gccd ]||_dac >=len (_ecfa )&&_ecfa [_dac -1]!=_caff [_gccd ]){_gccd =_cdaa (_caff ,_gccd );
};return _gccd ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _acb (_aee []byte ,_ecdf bool ,_ggc int )(int ,int ){_fbb :=0;for _ggc < len (_aee ){if _ecdf {if _aee [_ggc ]!=_ffdd {break ;
};}else {if _aee [_ggc ]!=_ecb {break ;};};_fbb ++;_ggc ++;};return _fbb ,_ggc ;};func (_abfd *treeNode )walk (_bce bool )*treeNode {if _bce {return _abfd ._cfb ;};return _abfd ._ceb ;};func (_fdcd *treeNode )set (_dfgb bool ,_cfbc *treeNode ){if !_dfgb {_fdcd ._ceb =_cfbc ;
}else {_fdcd ._cfb =_cfbc ;};};var (_c *treeNode ;_be *treeNode ;_ga *tree ;_e *tree ;_bg *tree ;_gad *tree ;_db =-2000;_ba =-1000;_ca =-3000;_a =-4000;);func _cada (_bgfc []byte ,_feeb int ,_becg code )([]byte ,int ){_bfb :=0;for _bfb < _becg .BitsWritten {_eae :=_feeb /8;
_fac :=_feeb %8;if _eae >=len (_bgfc ){_bgfc =append (_bgfc ,0);};_bgad :=8-_fac ;_gcc :=_becg .BitsWritten -_bfb ;if _bgad > _gcc {_bgad =_gcc ;};if _bfb < 8{_bgfc [_eae ]=_bgfc [_eae ]|byte (_becg .Code >>uint (8+_fac -_bfb ))&_cbd [8-_bgad -_fac ];}else {_bgfc [_eae ]=_bgfc [_eae ]|(byte (_becg .Code <<uint (_bfb -8))&_cbd [8-_bgad ])>>uint (_fac );
};_feeb +=_bgad ;_bfb +=_bgad ;};return _bgfc ,_feeb ;};func (_bcc *Decoder )decodeRun (_egaf *tree )(int ,error ){var _fggb int ;_geg :=_egaf ._agbda ;for {_ffd ,_decf :=_bcc ._af .ReadBool ();if _decf !=nil {return 0,_decf ;};_geg =_geg .walk (_ffd );
if _geg ==nil {return 0,_b .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};if _geg ._fae {_fggb +=_geg ._aab ;switch {case _geg ._aab >=64:_geg =_egaf ._agbda ;
case _geg ._aab >=0:return _fggb ,nil ;default:return _bcc ._fed ,nil ;};};};};func _eff (_cge []byte ,_cfd int ,_deg code )([]byte ,int ){_ggf :=true ;var _bff []byte ;_bff ,_cfd =_cada (nil ,_cfd ,_deg );_baed :=0;var _dfed int ;for _baed < len (_cge ){_dfed ,_baed =_acb (_cge ,_ggf ,_baed );
_bff ,_cfd =_gda (_bff ,_cfd ,_dfed ,_ggf );_ggf =!_ggf ;};return _bff ,_cfd %8;};var _cb =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_def *Encoder )appendEncodedRow (_abg ,_ege []byte ,_fbde int )[]byte {if len (_abg )> 0&&_fbde !=0&&!_def .EncodedByteAlign {_abg [len (_abg )-1]=_abg [len (_abg )-1]|_ege [0];_abg =append (_abg ,_ege [1:]...);}else {_abg =append (_abg ,_ege ...);
};return _abg ;};func (_fbf *Encoder )encodeG31D (_ecf [][]byte )[]byte {var _fga []byte ;_ffeb :=0;for _cac :=range _ecf {if _fbf .Rows > 0&&!_fbf .EndOfBlock &&_cac ==_fbf .Rows {break ;};_ccg ,_aaec :=_eff (_ecf [_cac ],_ffeb ,_cf );_fga =_fbf .appendEncodedRow (_fga ,_ccg ,_ffeb );
if _fbf .EncodedByteAlign {_aaec =0;};_ffeb =_aaec ;};if _fbf .EndOfBlock {_fbce ,_ :=_cda (_ffeb );_fga =_fbf .appendEncodedRow (_fga ,_fbce ,_ffeb );};return _fga ;};func _fef (_ffdc ,_ggcg int )code {var _fcg code ;switch _ggcg -_ffdc {case -1:_fcg =_fb ;
case -2:_fcg =_aea ;case -3:_fcg =_ab ;case 0:_fcg =_aeb ;case 1:_fcg =_ea ;case 2:_fcg =_aa ;case 3:_fcg =_daf ;};return _fcg ;};var _gadb =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var (_fe map[int ]code ;_fgg map[int ]code ;_gfb map[int ]code ;_ec map[int ]code ;_gb map[int ]code ;_cbd map[int ]byte ;_cf =code {Code :1<<4,BitsWritten :12};_ce =code {Code :3<<3,BitsWritten :13};_gd =code {Code :2<<3,BitsWritten :13};_dfd =code {Code :1<<12,BitsWritten :4};
_bacd =code {Code :1<<13,BitsWritten :3};_aeb =code {Code :1<<15,BitsWritten :1};_fb =code {Code :3<<13,BitsWritten :3};_aea =code {Code :3<<10,BitsWritten :6};_ab =code {Code :3<<9,BitsWritten :7};_ea =code {Code :2<<13,BitsWritten :3};_aa =code {Code :2<<10,BitsWritten :6};
_daf =code {Code :2<<9,BitsWritten :7};);type tiffType int ;func _ffa (_efg [][]byte )[][]byte {_bacfc :=make ([]byte ,len (_efg [0]));for _cged :=range _bacfc {_bacfc [_cged ]=_ffdd ;};_efg =append (_efg ,[]byte {});for _daaf :=len (_efg )-1;_daaf > 0;
_daaf --{_efg [_daaf ]=_efg [_daaf -1];};_efg [0]=_bacfc ;return _efg ;};