//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_aa "bufio";_e "bytes";_d "encoding/hex";_be "errors";_f "fmt";_cb "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_b "io";_fd "sort";_a "strconv";
_db "strings";_g "unicode/utf16";);func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_degf :=_beb (name );if _degf !=nil {return nil ,_degf ;};if cmap ._af ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cbaa ,_degf :=_beb (cmap ._af );
if _degf !=nil {return nil ,_degf ;};for _afe ,_agg :=range _cbaa ._bb {if _ ,_fef :=cmap ._bb [_afe ];!_fef {cmap ._bb [_afe ]=_agg ;};};cmap ._cbc =append (cmap ._cbc ,_cbaa ._cbc ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )Stream ()(*_bd .PdfObjectStream ,error ){if cmap ._fb !=nil {return cmap ._fb ,nil ;
};_dfa ,_ef :=_bd .MakeStream (cmap .Bytes (),_bd .NewFlateEncoder ());if _ef !=nil {return nil ,_ef ;};cmap ._fb =_dfa ;return cmap ._fb ,nil ;};func (_aebc *cMapParser )parseObject ()(cmapObject ,error ){_aebc .skipSpaces ();for {_fcf ,_bbg :=_aebc ._dcg .Peek (2);
if _bbg !=nil {return nil ,_bbg ;};if _fcf [0]=='%'{_aebc .parseComment ();_aebc .skipSpaces ();continue ;}else if _fcf [0]=='/'{_baa ,_aebg :=_aebc .parseName ();return _baa ,_aebg ;}else if _fcf [0]=='('{_cbd ,_ccba :=_aebc .parseString ();return _cbd ,_ccba ;
}else if _fcf [0]=='['{_gge ,_dcgf :=_aebc .parseArray ();return _gge ,_dcgf ;}else if (_fcf [0]=='<')&&(_fcf [1]=='<'){_fgcg ,_acf :=_aebc .parseDict ();return _fgcg ,_acf ;}else if _fcf [0]=='<'{_fde ,_cbad :=_aebc .parseHexString ();return _fde ,_cbad ;
}else if _bd .IsDecimalDigit (_fcf [0])||(_fcf [0]=='-'&&_bd .IsDecimalDigit (_fcf [1])){_bbf ,_gab :=_aebc .parseNumber ();if _gab !=nil {return nil ,_gab ;};return _bbf ,nil ;}else {_dbeg ,_acfa :=_aebc .parseOperand ();if _acfa !=nil {return nil ,_acfa ;
};return _dbeg ,nil ;};};};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func _cfcd (_fdf []byte )*cMapParser {_ecfb :=cMapParser {};_bff :=_e .NewBuffer (_fdf );_ecfb ._dcg =_aa .NewReader (_bff );return &_ecfb ;
};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_aeb ,_gd :=cmap .BytesToCharcodes (data );if !_gd {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_ec :=make ([]string ,len (_aeb ));var _agca []CharCode ;for _cae ,_aad :=range _aeb {_dgb ,_aggc :=cmap ._agc [_aad ];if !_aggc {_agca =append (_agca ,_aad );_dgb =MissingCodeString ;};_ec [_cae ]=_dgb ;};_aef :=_db .Join (_ec ,"");if len (_agca )> 0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_aeb ,len (_agca ),_agca ,_aef ,cmap );
};return _aef ,len (_agca );};func NewCIDSystemInfo (obj _bd .PdfObject )(_deg CIDSystemInfo ,_dfg error ){_dfgf ,_dg :=_bd .GetDict (obj );if !_dg {return CIDSystemInfo {},_bd .ErrTypeError ;};_fe ,_dg :=_bd .GetStringVal (_dfgf .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_dg {return CIDSystemInfo {},_bd .ErrTypeError ;};_dbd ,_dg :=_bd .GetStringVal (_dfgf .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_dg {return CIDSystemInfo {},_bd .ErrTypeError ;};_fa ,_dg :=_bd .GetIntVal (_dfgf .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_dg {return CIDSystemInfo {},_bd .ErrTypeError ;};return CIDSystemInfo {Registry :_fe ,Ordering :_dbd ,Supplement :_fa },nil ;};func (cmap *CMap )parseCIDRange ()error {for {_gfaa ,_edc :=cmap .parseObject ();if _edc !=nil {if _edc ==_b .EOF {break ;
};return _edc ;};_gcbg ,_bbaa :=_gfaa .(cmapHexString );if !_bbaa {if _edg ,_gdcb :=_gfaa .(cmapOperand );_gdcb {if _edg .Operand ==_bcc {return nil ;};return _be .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_abf :=_gbadcc (_gcbg );_gfaa ,_edc =cmap .parseObject ();if _edc !=nil {if _edc ==_b .EOF {break ;};return _edc ;};_fbf ,_bbaa :=_gfaa .(cmapHexString );if !_bbaa {return _be .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_gcbg ._cbcf )!=len (_fbf ._cbcf ){return _be .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_deda :=_gbadcc (_fbf );
if _abf > _deda {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_abf ,_deda );
return ErrBadCMap ;};_gfaa ,_edc =cmap .parseObject ();if _edc !=nil {if _edc ==_b .EOF {break ;};return _edc ;};_bcfg ,_bbaa :=_gfaa .(cmapInt );if !_bbaa {return _be .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bcfg ._dabb < 0{return _be .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_feb :=_bcfg ._dabb ;for _ccfe :=_abf ;_ccfe <=_deda ;_ccfe ++{cmap ._bb [_ccfe ]=CharCode (_feb );
_feb ++;};_cb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_abf ,_deda ,_bcfg ._dabb );};return nil ;};func (_bgd *cMapParser )parseString ()(cmapString ,error ){_bgd ._dcg .ReadByte ();
_aca :=_e .Buffer {};_cee :=1;for {_daee ,_bda :=_bgd ._dcg .Peek (1);if _bda !=nil {return cmapString {_aca .String ()},_bda ;};if _daee [0]=='\\'{_bgd ._dcg .ReadByte ();_bfgb ,_bee :=_bgd ._dcg .ReadByte ();if _bee !=nil {return cmapString {_aca .String ()},_bee ;
};if _bd .IsOctalDigit (_bfgb ){_eefg ,_efcg :=_bgd ._dcg .Peek (2);if _efcg !=nil {return cmapString {_aca .String ()},_efcg ;};var _bdbc []byte ;_bdbc =append (_bdbc ,_bfgb );for _ ,_eceg :=range _eefg {if _bd .IsOctalDigit (_eceg ){_bdbc =append (_bdbc ,_eceg );
}else {break ;};};_bgd ._dcg .Discard (len (_bdbc )-1);_cb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bdbc );_ecdc ,_efcg :=_a .ParseUint (string (_bdbc ),8,32);if _efcg !=nil {return cmapString {_aca .String ()},_efcg ;
};_aca .WriteByte (byte (_ecdc ));continue ;};switch _bfgb {case 'n':_aca .WriteByte ('\n');case 'r':_aca .WriteByte ('\r');case 't':_aca .WriteByte ('\t');case 'b':_aca .WriteByte ('\b');case 'f':_aca .WriteByte ('\f');case '(':_aca .WriteByte ('(');case ')':_aca .WriteByte (')');
case '\\':_aca .WriteByte ('\\');};continue ;}else if _daee [0]=='('{_cee ++;}else if _daee [0]==')'{_cee --;if _cee ==0{_bgd ._dcg .ReadByte ();break ;};};_gbadc ,_ :=_bgd ._dcg .ReadByte ();_aca .WriteByte (_gbadc );};return cmapString {_aca .String ()},nil ;
};func (_cgcd *cMapParser )parseOperand ()(cmapOperand ,error ){_cag :=cmapOperand {};_caag :=_e .Buffer {};for {_aadd ,_bdcc :=_cgcd ._dcg .Peek (1);if _bdcc !=nil {if _bdcc ==_b .EOF {break ;};return _cag ,_bdcc ;};if _bd .IsDelimiter (_aadd [0]){break ;
};if _bd .IsWhiteSpace (_aadd [0]){break ;};_ffb ,_ :=_cgcd ._dcg .ReadByte ();_caag .WriteByte (_ffb );};if _caag .Len ()==0{return _cag ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_cag .Operand =_caag .String ();return _cag ,nil ;};type cmapInt struct{_dabb int64 };func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bed ,_ceb :=cmap ._cf [cid ];return _bed ,_ceb ;};type CharCode uint32 ;func (_ceaf *cMapParser )parseArray ()(cmapArray ,error ){_fbee :=cmapArray {};
_fbee .Array =[]cmapObject {};_ceaf ._dcg .ReadByte ();for {_ceaf .skipSpaces ();_dabf ,_ecag :=_ceaf ._dcg .Peek (1);if _ecag !=nil {return _fbee ,_ecag ;};if _dabf [0]==']'{_ceaf ._dcg .ReadByte ();break ;};_bbc ,_ecag :=_ceaf .parseObject ();if _ecag !=nil {return _fbee ,_ecag ;
};_fbee .Array =append (_fbee .Array ,_bbc );};return _fbee ,nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._bfb ._ddf ,cmap ._bfb ._eagc };func _beb (_bfg string )(*CMap ,error ){_dbf ,_gcf :=_de .Asset (_bfg );if _gcf !=nil {return nil ,_gcf ;
};return LoadCmapFromDataCID (_dbf );};func (cmap *CMap )matchCode (_dba []byte )(_ab CharCode ,_cef int ,_daa bool ){for _efc :=0;_efc < _gc ;_efc ++{if _efc < len (_dba ){_ab =_ab <<8|CharCode (_dba [_efc ]);_cef ++;};_daa =cmap .inCodespace (_ab ,_efc +1);
if _daa {return _ab ,_cef ,true ;};};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dba ,string (_dba ),cmap );
return 0,0,false ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_eeb ,_cg :=cmap ._bb [code ];return _eeb ,_cg ;};func (cmap *CMap )parseType ()error {_bgc :=0;_ecef :=false ;for _abeg :=0;_abeg < 3&&!_ecef ;_abeg ++{_add ,_ffg :=cmap .parseObject ();
if _ffg !=nil {return _ffg ;};switch _ggf :=_add .(type ){case cmapOperand :switch _ggf .Operand {case "\u0064\u0065\u0066":_ecef =true ;default:_cb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_add );
return ErrBadCMap ;};case cmapInt :_bgc =int (_ggf ._dabb );};};cmap ._fff =_bgc ;return nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ffe ,_gba :=cmap ._agc [code ];_gba {return _ffe ,true ;};return MissingCodeString ,false ;
};func (_gbad *cMapParser )parseComment ()(string ,error ){var _gdb _e .Buffer ;_ ,_gfec :=_gbad .skipSpaces ();if _gfec !=nil {return _gdb .String (),_gfec ;};_cea :=true ;for {_ddc ,_adf :=_gbad ._dcg .Peek (1);if _adf !=nil {_cb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_adf );
return _gdb .String (),_adf ;};if _cea &&_ddc [0]!='%'{return _gdb .String (),ErrBadCMapComment ;};_cea =false ;if (_ddc [0]!='\r')&&(_ddc [0]!='\n'){_fbe ,_ :=_gbad ._dcg .ReadByte ();_gdb .WriteByte (_fbe );}else {break ;};};return _gdb .String (),nil ;
};func (cmap *CMap )NBits ()int {return cmap ._ff };type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )inCodespace (_cd CharCode ,_fcc int )bool {for _ ,_cbg :=range cmap ._cbc {if _cbg .Low <=_cd &&_cd <=_cbg .High &&_fcc ==_cbg .NumBytes {return true ;
};};return false ;};func (cmap *CMap )toBfData ()string {if len (cmap ._agc )==0{return "";};_abe :=make ([]CharCode ,0,len (cmap ._agc ));for _fbg :=range cmap ._agc {_abe =append (_abe ,_fbg );};_fd .Slice (_abe ,func (_aea ,_gec int )bool {return _abe [_aea ]< _abe [_gec ]});
var _bg []charRange ;_abd :=charRange {_abe [0],_abe [0]};_gda :=cmap ._agc [_abe [0]];for _ ,_fab :=range _abe [1:]{_cdc :=cmap ._agc [_fab ];if _fab ==_abd ._df +1&&_gbcf (_cdc )==_gbcf (_gda )+1{_abd ._df =_fab ;}else {_bg =append (_bg ,_abd );_abd ._ca ,_abd ._df =_fab ,_fab ;
};_gda =_cdc ;};_bg =append (_bg ,_abd );var _cfaa []CharCode ;var _dedc []fbRange ;for _ ,_fdd :=range _bg {if _fdd ._ca ==_fdd ._df {_cfaa =append (_cfaa ,_fdd ._ca );}else {_dedc =append (_dedc ,fbRange {_ga :_fdd ._ca ,_bf :_fdd ._df ,_ag :cmap ._agc [_fdd ._ca ]});
};};_cb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_bg ),len (_cfaa ),len (_dedc ));var _cec []string ;if len (_cfaa )> 0{_fce :=(len (_cfaa )+_dec -1)/_dec ;
for _adb :=0;_adb < _fce ;_adb ++{_gcd :=_gcbgf (len (_cfaa )-_adb *_dec ,_dec );_cec =append (_cec ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_gcd ));for _gdc :=0;_gdc < _gcd ;_gdc ++{_dfb :=_cfaa [_adb *_dec +_gdc ];
_aead :=cmap ._agc [_dfb ];_cec =append (_cec ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_dfb ,_afg (_aead )));};_cec =append (_cec ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_dedc )> 0{_afad :=(len (_dedc )+_dec -1)/_dec ;
for _dbe :=0;_dbe < _afad ;_dbe ++{_fcd :=_gcbgf (len (_dedc )-_dbe *_dec ,_dec );_cec =append (_cec ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fcd ));for _ece :=0;_ece < _fcd ;_ece ++{_afec :=_dedc [_dbe *_dec +_ece ];
_cec =append (_cec ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_afec ._ga ,_afec ._bf ,_afg (_afec ._ag )));};_cec =append (_cec ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _db .Join (_cec ,"\u000a");
};func _bc (_gf bool )*CMap {_da :=16;if _gf {_da =8;};return &CMap {_ff :_da ,_bb :make (map[CharCode ]CharCode ),_cf :make (map[CharCode ]CharCode ),_agc :make (map[CharCode ]string ),_ded :make (map[string ]CharCode )};};type cmapString struct{String string ;
};func (cmap *CMap )Bytes ()[]byte {_cb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._ae )> 0{return cmap ._ae ;};cmap ._ae =[]byte (_db .Join ([]string {_gaa ,cmap .toBfData (),_abeb },"\u000a"));
return cmap ._ae ;};func (cmap *CMap )Name ()string {return cmap ._bdb };func _gbadcc (_cbca cmapHexString )CharCode {_beff :=CharCode (0);for _ ,_dga :=range _cbca ._cbcf {_beff <<=8;_beff |=CharCode (_dga );};return _beff ;};func (cmap *CMap )String ()string {_aga :=cmap ._gb ;
_ccb :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ff ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fff )};if cmap ._cba !=""{_ccb =append (_ccb ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._cba ));
};if cmap ._af !=""{_ccb =append (_ccb ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._af ));};_ccb =append (_ccb ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_aga .String ()));
if len (cmap ._cbc )> 0{_ccb =append (_ccb ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cbc )));};if len (cmap ._agc )> 0{_ccb =append (_ccb ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._agc )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bdb ,_db .Join (_ccb ,"\u0020"));};func (cmap *CMap )Type ()int {return cmap ._fff };func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gb };
func (_bdf *cMapParser )skipSpaces ()(int ,error ){_ffea :=0;for {_egf ,_bfa :=_bdf ._dcg .Peek (1);if _bfa !=nil {return 0,_bfa ;};if _bd .IsWhiteSpace (_egf [0]){_bdf ._dcg .ReadByte ();_ffea ++;}else {break ;};};return _ffea ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_bdd ,_ad :=cmap ._ded [s ];
return _bdd ,_ad };func _gbcf (_eab string )rune {_cbbf :=[]rune (_eab );return _cbbf [len (_cbbf )-1]};var (ErrBadCMap =_be .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_be .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_be .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););type cMapParser struct{_dcg *_aa .Reader };func _afg (_geg string )string {_cbcb :=[]rune (_geg );_fag :=make ([]string ,len (_cbcb ));for _ed ,_eec :=range _cbcb {_fag [_ed ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_eec );
};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_db .Join (_fag ,""));};func (_fda *cMapParser )parseDict ()(cmapDict ,error ){_cb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_agab :=_bcdg ();
_fca ,_ :=_fda ._dcg .ReadByte ();if _fca !='<'{return _agab ,ErrBadCMapDict ;};_fca ,_ =_fda ._dcg .ReadByte ();if _fca !='<'{return _agab ,ErrBadCMapDict ;};for {_fda .skipSpaces ();_eag ,_ddeb :=_fda ._dcg .Peek (2);if _ddeb !=nil {return _agab ,_ddeb ;
};if (_eag [0]=='>')&&(_eag [1]=='>'){_fda ._dcg .ReadByte ();_fda ._dcg .ReadByte ();break ;};_dcc ,_ddeb :=_fda .parseName ();_cb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dcc .Name );if _ddeb !=nil {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_ddeb );
return _agab ,_ddeb ;};_fda .skipSpaces ();_aafc ,_ddeb :=_fda .parseObject ();if _ddeb !=nil {return _agab ,_ddeb ;};_agab .Dict [_dcc .Name ]=_aafc ;_fda .skipSpaces ();_eag ,_ddeb =_fda ._dcg .Peek (3);if _ddeb !=nil {return _agab ,_ddeb ;};if string (_eag )=="\u0064\u0065\u0066"{_fda ._dcg .Discard (3);
};};return _agab ,nil ;};type integer struct{_eagc bool ;_ddf int ;};func (cmap *CMap )parseCodespaceRange ()error {for {_ccac ,_gaf :=cmap .parseObject ();if _gaf !=nil {if _gaf ==_b .EOF {break ;};return _gaf ;};_decd ,_agb :=_ccac .(cmapHexString );
if !_agb {if _bad ,_fefg :=_ccac .(cmapOperand );_fefg {if _bad .Operand ==_beg {return nil ;};return _be .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ccac ,_gaf =cmap .parseObject ();if _gaf !=nil {if _gaf ==_b .EOF {break ;
};return _gaf ;};_eg ,_agb :=_ccac .(cmapHexString );if !_agb {return _be .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_decd ._cbcf )!=len (_eg ._cbcf ){return _be .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_bcd :=_gbadcc (_decd );_cgda :=_gbadcc (_eg );if _cgda < _bcd {_cb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_bcd ,_cgda );
return ErrBadCMap ;};_gdef :=_eg ._gcfg ;_bcf :=Codespace {NumBytes :_gdef ,Low :_bcd ,High :_cgda };cmap ._cbc =append (cmap ._cbc ,_bcf );_cb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_bcd ,_cgda );
};if len (cmap ._cbc )==0{_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_aabg *cMapParser )parseNumber ()(cmapObject ,error ){_dbgc ,_adff :=_bd .ParseNumber (_aabg ._dcg );
if _adff !=nil {return nil ,_adff ;};switch _eff :=_dbgc .(type ){case *_bd .PdfObjectFloat :return cmapFloat {float64 (*_eff )},nil ;case *_bd .PdfObjectInteger :return cmapInt {int64 (*_eff )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dbgc );
};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _age []CharCode ;if cmap ._ff ==8{for _ ,_eae :=range data {_age =append (_age ,CharCode (_eae ));};return _age ,true ;};for _ddg :=0;_ddg < len (data );{_bba ,_dbc ,_gad :=cmap .matchCode (data [_ddg :]);
if !_gad {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ddg ,data ,string (data ));
return _age ,false ;};_age =append (_age ,_bba );_ddg +=_dbc ;};return _age ,true ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (_bcad *cMapParser )parseName ()(cmapName ,error ){_bec :="";_aeadd :=false ;for {_begb ,_adbe :=_bcad ._dcg .Peek (1);
if _adbe ==_b .EOF {break ;};if _adbe !=nil {return cmapName {_bec },_adbe ;};if !_aeadd {if _begb [0]=='/'{_aeadd =true ;_bcad ._dcg .ReadByte ();}else {_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_begb ,_begb );
return cmapName {_bec },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_begb [0]);};}else {if _bd .IsWhiteSpace (_begb [0]){break ;}else if (_begb [0]=='/')||(_begb [0]=='[')||(_begb [0]=='(')||(_begb [0]==']')||(_begb [0]=='<')||(_begb [0]=='>'){break ;
}else if _begb [0]=='#'{_gbb ,_cfca :=_bcad ._dcg .Peek (3);if _cfca !=nil {return cmapName {_bec },_cfca ;};_bcad ._dcg .Discard (3);_ebc ,_cfca :=_d .DecodeString (string (_gbb [1:3]));if _cfca !=nil {return cmapName {_bec },_cfca ;};_bec +=string (_ebc );
}else {_ecab ,_ :=_bcad ._dcg .ReadByte ();_bec +=string (_ecab );};};};return cmapName {_bec },nil ;};type cmapFloat struct{_gaag float64 };func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_afa :=make (map[CharCode ]string ,len (codeToRune ));
for _aab ,_afb :=range codeToRune {_afa [_aab ]=string (_afb );};cmap :=&CMap {_bdb :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fff :2,_ff :16,_gb :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cbc :[]Codespace {{Low :0,High :0xffff}},_agc :_afa ,_ded :make (map[string ]CharCode ,len (codeToRune )),_bb :make (map[CharCode ]CharCode ,len (codeToRune )),_cf :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )parse ()error {var _aed cmapObject ;for {_gde ,_cbf :=cmap .parseObject ();if _cbf !=nil {if _cbf ==_b .EOF {break ;};_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cbf );
return _cbf ;};switch _fbb :=_gde .(type ){case cmapOperand :_gcbf :=_fbb ;switch _gcbf .Operand {case _bca :_acd :=cmap .parseCodespaceRange ();if _acd !=nil {return _acd ;};case _fabf :_fdde :=cmap .parseCIDRange ();if _fdde !=nil {return _fdde ;};case _egb :_adce :=cmap .parseBfchar ();
if _adce !=nil {return _adce ;};case _baf :_bef :=cmap .parseBfrange ();if _bef !=nil {return _bef ;};case _bbaad :if _aed ==nil {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_deca ,_caa :=_aed .(cmapName );if !_caa {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_aed );
return ErrBadCMap ;};cmap ._af =_deca .Name ;case _ced :_gdeb :=cmap .parseSystemInfo ();if _gdeb !=nil {return _gdeb ;};};case cmapName :_gfa :=_fbb ;switch _gfa .Name {case _ced :_aaa :=cmap .parseSystemInfo ();if _aaa !=nil {return _aaa ;};case _gfe :_fcg :=cmap .parseName ();
if _fcg !=nil {return _fcg ;};case _fgb :_gcc :=cmap .parseType ();if _gcc !=nil {return _gcc ;};case _fgc :_dbbg :=cmap .parseVersion ();if _dbbg !=nil {return _dbbg ;};case _eeea :if _cbf =cmap .parseWMode ();_cbf !=nil {return _cbf ;};};};_aed =_gde ;
};return nil ;};func (cmap *CMap )parseBfchar ()error {for {_gac ,_bgg :=cmap .parseObject ();if _bgg !=nil {if _bgg ==_b .EOF {break ;};return _bgg ;};var _cfac CharCode ;switch _efe :=_gac .(type ){case cmapOperand :if _efe .Operand ==_cdg {return nil ;
};return _be .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_cfac =_gbadcc (_efe );default:return _be .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_gac ,_bgg =cmap .parseObject ();if _bgg !=nil {if _bgg ==_b .EOF {break ;};return _bgg ;};var _bdc []rune ;switch _cbfd :=_gac .(type ){case cmapOperand :if _cbfd .Operand ==_cdg {return nil ;};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_cbfd );
return ErrBadCMap ;case cmapHexString :_bdc =_gag (_cbfd );case cmapName :_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_cbfd );_bdc =[]rune {MissingCodeRune };
default:_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_gac );return ErrBadCMap ;};cmap ._agc [_cfac ]=string (_bdc );};return nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_cb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bc (isSimple );cmap .cMapParser =_cfcd (data );_cbb :=cmap .parse ();if _cbb !=nil {return nil ,_cbb ;};if len (cmap ._cbc )==0{if cmap ._af !=""{return cmap ,nil ;};_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};const (_ced ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_aff ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_aeadf ="\u0065n\u0064\u0063\u006d\u0061\u0070";
_bca ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_beg ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_egb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";
_cdg ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_baf ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bfgg ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fabf ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";
_bcc ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bbaad ="\u0075s\u0065\u0063\u006d\u0061\u0070";_eeea ="\u0057\u004d\u006fd\u0065";_gfe ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_fgb ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";
_fgc ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parseBfrange ()error {for {var _gff CharCode ;_dgg ,_gea :=cmap .parseObject ();if _gea !=nil {if _gea ==_b .EOF {break ;};return _gea ;};switch _dff :=_dgg .(type ){case cmapOperand :if _dff .Operand ==_bfgg {return nil ;
};return _be .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_gff =_gbadcc (_dff );default:return _be .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _ebg CharCode ;_dgg ,_gea =cmap .parseObject ();if _gea !=nil {if _gea ==_b .EOF {break ;};return _gea ;};switch _bgcf :=_dgg .(type ){case cmapOperand :_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_ebg =_gbadcc (_bgcf );if _ebg > 0xffff{_ebg =0xffff;};default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgg );return ErrBadCMap ;
};_dgg ,_gea =cmap .parseObject ();if _gea !=nil {if _gea ==_b .EOF {break ;};return _gea ;};switch _fae :=_dgg .(type ){case cmapArray :if len (_fae .Array )!=int (_ebg -_gff )+1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _cda :=_gff ;_cda <=_ebg ;_cda ++{_eef :=_fae .Array [_cda -_gff ];_eee ,_caad :=_eef .(cmapHexString );if !_caad {return _be .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_ecf :=_gag (_eee );cmap ._agc [_cda ]=string (_ecf );};case cmapHexString :_ccab :=_gag (_fae );_dc :=len (_ccab );for _abcf :=_gff ;_abcf <=_ebg ;_abcf ++{cmap ._agc [_abcf ]=string (_ccab );if _dc > 0{_ccab [_dc -1]++;}else {_cb .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_abcf );
};if _abcf ==1<<32-1{break ;};};default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgg );return ErrBadCMap ;};};return nil ;};type fbRange struct{_ga CharCode ;
_bf CharCode ;_ag string ;};func IsPredefinedCMap (name string )bool {return _de .AssetExists (name )};type CMap struct{*cMapParser ;_bdb string ;_ff int ;_fff int ;_cba string ;_af string ;_gb CIDSystemInfo ;_cbc []Codespace ;_bb map[CharCode ]CharCode ;
_cf map[CharCode ]CharCode ;_agc map[CharCode ]string ;_ded map[string ]CharCode ;_ae []byte ;_fb *_bd .PdfObjectStream ;_bfb integer ;};func (cmap *CMap )parseName ()error {_ccf :="";_fddb :=false ;for _cgd :=0;_cgd < 20&&!_fddb ;_cgd ++{_ged ,_bbb :=cmap .parseObject ();
if _bbb !=nil {return _bbb ;};switch _cgc :=_ged .(type ){case cmapOperand :switch _cgc .Operand {case "\u0064\u0065\u0066":_fddb =true ;default:_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_ged ,_ccf );
if _ccf !=""{_ccf =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_ccf ,_cgc .Operand );};_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_ccf );
};case cmapName :_ccf =_cgc .Name ;};};if !_fddb {_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bdb =_ccf ;return nil ;};func (_dbg *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_dbg .Registry ,_dbg .Ordering ,_dbg .Supplement );
};func (cmap *CMap )parseSystemInfo ()error {_caf :=false ;_ddd :=false ;_cca :="";_cfce :=false ;_gca :=CIDSystemInfo {};for _dae :=0;_dae < 50&&!_cfce ;_dae ++{_bbd ,_ecd :=cmap .parseObject ();if _ecd !=nil {return _ecd ;};switch _cfb :=_bbd .(type ){case cmapDict :_ccbb :=_cfb .Dict ;
_eeca ,_dbef :=_ccbb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ba ,_dbef :=_eeca .(cmapString );
if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gca .Registry =_ba .String ;_eeca ,_dbef =_ccbb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ba ,_dbef =_eeca .(cmapString );if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_gca .Ordering =_ba .String ;_abc ,_dbef :=_ccbb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_eac ,_dbef :=_abc .(cmapInt );if !_dbef {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gca .Supplement =int (_eac ._dabb );
_cfce =true ;case cmapOperand :switch _cfb .Operand {case "\u0062\u0065\u0067i\u006e":_caf =true ;case "\u0065\u006e\u0064":_cfce =true ;case "\u0064\u0065\u0066":_ddd =false ;};case cmapName :if _caf {_cca =_cfb .Name ;_ddd =true ;};case cmapString :if _ddd {switch _cca {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_gca .Registry =_cfb .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_gca .Ordering =_cfb .String ;};};case cmapInt :if _ddd {switch _cca {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_gca .Supplement =int (_cfb ._dabb );};};};};if !_cfce {_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gb =_gca ;return nil ;};type cmapHexString struct{_gcfg int ;_cbcf []byte ;};func _dad (_fga cmapHexString )rune {_dfad :=_gag (_fga );if _fcaa :=len (_dfad );_fcaa ==0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_fga );
return MissingCodeRune ;};if len (_dfad )> 1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_fga ,_dfad );
};return _dfad [0];};func (cmap *CMap )computeInverseMappings (){for _dab ,_fc :=range cmap ._bb {if _dd ,_faa :=cmap ._cf [_fc ];!_faa ||(_faa &&_dd > _dab ){cmap ._cf [_fc ]=_dab ;};};for _ea ,_cfe :=range cmap ._agc {if _ac ,_cfa :=cmap ._ded [_cfe ];
!_cfa ||(_cfa &&_ac > _ea ){cmap ._ded [_cfe ]=_ea ;};};_fd .Slice (cmap ._cbc ,func (_ee ,_ce int )bool {return cmap ._cbc [_ee ].Low < cmap ._cbc [_ce ].Low });};type cmapName struct{Name string ;};type CIDSystemInfo struct{Registry string ;Ordering string ;
Supplement int ;};func (cmap *CMap )parseVersion ()error {_bfc :="";_fgg :=false ;for _aaf :=0;_aaf < 3&&!_fgg ;_aaf ++{_gga ,_cfc :=cmap .parseObject ();if _cfc !=nil {return _cfc ;};switch _gdd :=_gga .(type ){case cmapOperand :switch _gdd .Operand {case "\u0064\u0065\u0066":_fgg =true ;
default:_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gga );
return ErrBadCMap ;};case cmapInt :_bfc =_f .Sprintf ("\u0025\u0064",_gdd ._dabb );case cmapFloat :_bfc =_f .Sprintf ("\u0025\u0066",_gdd ._gaag );case cmapString :_bfc =_gdd .String ;default:_cb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gga );
};};cmap ._cba =_bfc ;return nil ;};const (_gc =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););const (_dec =100;_gaa ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_abeb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type charRange struct{_ca CharCode ;_df CharCode ;};type cmapObject interface{};func _gcbgf (_faec ,_dbgb int )int {if _faec < _dbgb {return _faec ;};return _dbgb ;};func (cmap *CMap )parseWMode ()error {var _dabg int ;_bcb :=false ;for _dbed :=0;_dbed < 3&&!_bcb ;
_dbed ++{_fdgb ,_deee :=cmap .parseObject ();if _deee !=nil {return _deee ;};switch _eda :=_fdgb .(type ){case cmapOperand :switch _eda .Operand {case "\u0064\u0065\u0066":_bcb =true ;default:_cb .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_fdgb );
return ErrBadCMap ;};case cmapInt :_dabg =int (_eda ._dabb );};};cmap ._bfb =integer {_eagc :true ,_ddf :_dabg };return nil ;};func _bcdg ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_ddca *cMapParser )parseHexString ()(cmapHexString ,error ){_ddca ._dcg .ReadByte ();
_dgbd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_ffeg :=_e .Buffer {};for {_ddca .skipSpaces ();_edb ,_aaab :=_ddca ._dcg .Peek (1);if _aaab !=nil {return cmapHexString {},_aaab ;
};if _edb [0]=='>'{_ddca ._dcg .ReadByte ();break ;};_acfc ,_ :=_ddca ._dcg .ReadByte ();if _e .IndexByte (_dgbd ,_acfc )>=0{_ffeg .WriteByte (_acfc );};};if _ffeg .Len ()%2==1{_cb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_ffeg .String ());
_ffeg .WriteByte ('0');};_ggc :=_ffeg .Len ()/2;_gfb ,_ :=_d .DecodeString (_ffeg .String ());return cmapHexString {_gcfg :_ggc ,_cbcf :_gfb },nil ;};func _gag (_fgcf cmapHexString )[]rune {if len (_fgcf ._cbcf )==1{return []rune {rune (_fgcf ._cbcf [0])};
};_agbf :=_fgcf ._cbcf ;if len (_agbf )%2!=0{_agbf =append (_agbf ,0);_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_fgcf ,_agbf );
};_febb :=len (_agbf )>>1;_fefd :=make ([]uint16 ,_febb );for _bge :=0;_bge < _febb ;_bge ++{_fefd [_bge ]=uint16 (_agbf [_bge <<1])<<8+uint16 (_agbf [_bge <<1+1]);};_bdad :=_g .Decode (_fefd );return _bdad ;};