//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_eb "encoding/binary";_f "github.com/stretchr/testify/require";_fa "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/imageutil";_fd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_de "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_da "image";_a "math";_bbc "sort";_bb "strings";_b "testing";);func _ccg (_bbb ,_fdb *Bitmap ,_fgfe int ,_bfg []byte ,_gcg int )(_bec error ){const _ce ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_gggf ,_ga ,_gag ,_fdc ,_cgca ,_bfgc ,_cgb ,_cff int ;_dab ,_efb uint32 ;_age ,_cbc byte ;_dbb uint16 ;);_edd :=make ([]byte ,4);_edg :=make ([]byte ,4);for _gag =0;_gag < _bbb .Height -1;_gag ,_fdc =_gag +2,_fdc +1{_gggf =_gag *_bbb .RowStride ;_ga =_fdc *_fdb .RowStride ;
for _cgca ,_bfgc =0,0;_cgca < _gcg ;_cgca ,_bfgc =_cgca +4,_bfgc +1{for _cgb =0;_cgb < 4;_cgb ++{_cff =_gggf +_cgca +_cgb ;if _cff <=len (_bbb .Data )-1&&_cff < _gggf +_bbb .RowStride {_edd [_cgb ]=_bbb .Data [_cff ];}else {_edd [_cgb ]=0x00;};_cff =_gggf +_bbb .RowStride +_cgca +_cgb ;
if _cff <=len (_bbb .Data )-1&&_cff < _gggf +(2*_bbb .RowStride ){_edg [_cgb ]=_bbb .Data [_cff ];}else {_edg [_cgb ]=0x00;};};_dab =_eb .BigEndian .Uint32 (_edd );_efb =_eb .BigEndian .Uint32 (_edg );_efb |=_dab ;_efb |=_efb <<1;_efb &=0xaaaaaaaa;_dab =_efb |(_efb <<7);
_age =byte (_dab >>24);_cbc =byte ((_dab >>8)&0xff);_cff =_ga +_bfgc ;if _cff +1==len (_fdb .Data )-1||_cff +1>=_ga +_fdb .RowStride {_fdb .Data [_cff ]=_bfg [_age ];}else {_dbb =(uint16 (_bfg [_age ])<<8)|uint16 (_bfg [_cbc ]);if _bec =_fdb .setTwoBytes (_cff ,_dbb );
_bec !=nil {return _de .Wrapf (_bec ,_ce ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cff );};_bfgc ++;};};
};return nil ;};func (_gdffc *Bitmaps )HeightSorter ()func (_fdcb ,_fecgc int )bool {return func (_gbae ,_ceega int )bool {_dbcgf :=_gdffc .Values [_gbae ].Height < _gdffc .Values [_ceega ].Height ;_fa .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_gdffc .Values [_gbae ].Height ,_gdffc .Values [_ceega ].Height ,_dbcgf );
return _dbcgf ;};};func (_ffaf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ffaf .Width ,Height :_ffaf .Height ,RowStride :_ffaf .RowStride ,Color :_ffaf .Color ,Text :_ffaf .Text ,BitmapNumber :_ffaf .BitmapNumber ,Special :_ffaf .Special ,Data :make ([]byte ,len (_ffaf .Data ))};
};func (_ecgef *byWidth )Swap (i ,j int ){_ecgef .Values [i ],_ecgef .Values [j ]=_ecgef .Values [j ],_ecgef .Values [i ];if _ecgef .Boxes !=nil {_ecgef .Boxes [i ],_ecgef .Boxes [j ]=_ecgef .Boxes [j ],_ecgef .Boxes [i ];};};func (_dagf Points )XSorter ()func (_dabd ,_cfcd int )bool {return func (_cbcac ,_dfba int )bool {return _dagf [_cbcac ].X < _dagf [_dfba ].X };
};func (_agcg *Bitmap )setAll ()error {_fad :=_ccgc (_agcg ,0,0,_agcg .Width ,_agcg .Height ,PixSet ,nil ,0,0);if _fad !=nil {return _de .Wrap (_fad ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_cee *Bitmap )addBorderGeneral (_dad ,_dfdc ,_bbgg ,_ccc int ,_cdbe int )(*Bitmap ,error ){const _bcc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _dad < 0||_dfdc < 0||_bbgg < 0||_ccc < 0{return nil ,_de .Error (_bcc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_ffe ,_gbcg :=_cee .Width ,_cee .Height ;_gaef :=_ffe +_dad +_dfdc ;_fef :=_gbcg +_bbgg +_ccc ;
_ebd :=New (_gaef ,_fef );_ebd .Color =_cee .Color ;_fecb :=PixClr ;if _cdbe > 0{_fecb =PixSet ;};_adcg :=_ebd .RasterOperation (0,0,_dad ,_fef ,_fecb ,nil ,0,0);if _adcg !=nil {return nil ,_de .Wrap (_adcg ,_bcc ,"\u006c\u0065\u0066\u0074");};_adcg =_ebd .RasterOperation (_gaef -_dfdc ,0,_dfdc ,_fef ,_fecb ,nil ,0,0);
if _adcg !=nil {return nil ,_de .Wrap (_adcg ,_bcc ,"\u0072\u0069\u0067h\u0074");};_adcg =_ebd .RasterOperation (0,0,_gaef ,_bbgg ,_fecb ,nil ,0,0);if _adcg !=nil {return nil ,_de .Wrap (_adcg ,_bcc ,"\u0074\u006f\u0070");};_adcg =_ebd .RasterOperation (0,_fef -_ccc ,_gaef ,_ccc ,_fecb ,nil ,0,0);
if _adcg !=nil {return nil ,_de .Wrap (_adcg ,_bcc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_adcg =_ebd .RasterOperation (_dad ,_bbgg ,_ffe ,_gbcg ,PixSrc ,_cee ,0,0);if _adcg !=nil {return nil ,_de .Wrap (_adcg ,_bcc ,"\u0063\u006f\u0070\u0079");};return _ebd ,nil ;
};func _gdg ()(_eadc []byte ){_eadc =make ([]byte ,256);for _dee :=0;_dee < 256;_dee ++{_dde :=byte (_dee );_eadc [_dde ]=(_dde &0x01)|((_dde &0x04)>>1)|((_dde &0x10)>>2)|((_dde &0x40)>>3)|((_dde &0x02)<<3)|((_dde &0x08)<<2)|((_dde &0x20)<<1)|(_dde &0x80);
};return _eadc ;};type fillSegment struct{_ebcb int ;_fgffe int ;_befef int ;_fgbe int ;};func _eebb (_cdfff ,_febf int ,_deeb string )*Selection {_bgcd :=&Selection {Height :_cdfff ,Width :_febf ,Name :_deeb };_bgcd .Data =make ([][]SelectionValue ,_cdfff );
for _abfag :=0;_abfag < _cdfff ;_abfag ++{_bgcd .Data [_abfag ]=make ([]SelectionValue ,_febf );};return _bgcd ;};func _afa (_dcbg ,_debf byte ,_dbae CombinationOperator )byte {switch _dbae {case CmbOpOr :return _debf |_dcbg ;case CmbOpAnd :return _debf &_dcbg ;
case CmbOpXor :return _debf ^_dcbg ;case CmbOpXNor :return ^(_debf ^_dcbg );case CmbOpNot :return ^(_debf );default:return _debf ;};};func (_dcdf *Bitmap )setPadBits (_gdbf int ){_bda :=8-_dcdf .Width %8;if _bda ==8{return ;};_adgc :=_dcdf .Width /8;_aece :=_fcgf [_bda ];
if _gdbf ==0{_aece ^=_aece ;};var _fbb int ;for _afcad :=0;_afcad < _dcdf .Height ;_afcad ++{_fbb =_afcad *_dcdf .RowStride +_adgc ;if _gdbf ==0{_dcdf .Data [_fbb ]&=_aece ;}else {_dcdf .Data [_fbb ]|=_aece ;};};};func (_beeg *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _dbddb ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _beeg ==nil {return nil ,_de .Error (_dbddb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_beeg .Values )-1{return nil ,_de .Errorf (_dbddb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _beeg .Values [i ],nil ;};func (_fedd *Bitmaps )AddBitmap (bm *Bitmap ){_fedd .Values =append (_fedd .Values ,bm )};func _ccgc (_eggf *Bitmap ,_bebb ,_afgdd ,_cbcc ,_bfccg int ,_bcaeb RasterOperator ,_dcfg *Bitmap ,_afdbd ,_faae int )error {const _efca ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _eggf ==nil {return _de .Error (_efca ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _bcaeb ==PixDst {return nil ;};switch _bcaeb {case PixClr ,PixSet ,PixNotDst :_feadb (_eggf ,_bebb ,_afgdd ,_cbcc ,_bfccg ,_bcaeb );
return nil ;};if _dcfg ==nil {_fa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _de .Error (_efca ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dgfd :=_fgdg (_eggf ,_bebb ,_afgdd ,_cbcc ,_bfccg ,_bcaeb ,_dcfg ,_afdbd ,_faae );_dgfd !=nil {return _de .Wrap (_dgfd ,_efca ,"");
};return nil ;};func (_cbfb *ClassedPoints )Swap (i ,j int ){_cbfb .IntSlice [i ],_cbfb .IntSlice [j ]=_cbfb .IntSlice [j ],_cbfb .IntSlice [i ];};const (Vanilla Color =iota ;Chocolate ;);func init (){for _cae :=0;_cae < 256;_cae ++{_cfe [_cae ]=uint8 (_cae &0x1)+(uint8 (_cae >>1)&0x1)+(uint8 (_cae >>2)&0x1)+(uint8 (_cae >>3)&0x1)+(uint8 (_cae >>4)&0x1)+(uint8 (_cae >>5)&0x1)+(uint8 (_cae >>6)&0x1)+(uint8 (_cae >>7)&0x1);
};};func TstAddSymbol (t *_b .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_cgdf :=_da .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_cgdf );*x +=sym .Width +space ;};func (_bcd *Bitmap )GetUnpaddedData ()([]byte ,error ){_fcb :=uint (_bcd .Width &0x07);
if _fcb ==0{return _bcd .Data ,nil ;};_egf :=_bcd .Width *_bcd .Height ;if _egf %8!=0{_egf >>=3;_egf ++;}else {_egf >>=3;};_ebca :=make ([]byte ,_egf );_fgcg :=_e .NewWriterMSB (_ebca );const _ffd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _feb :=0;_feb < _bcd .Height ;_feb ++{for _egb :=0;_egb < _bcd .RowStride ;_egb ++{_becf :=_bcd .Data [_feb *_bcd .RowStride +_egb ];if _egb !=_bcd .RowStride -1{_cage :=_fgcg .WriteByte (_becf );if _cage !=nil {return nil ,_de .Wrap (_cage ,_ffd ,"");
};continue ;};for _dcd :=uint (0);_dcd < _fcb ;_dcd ++{_bdd :=_fgcg .WriteBit (int (_becf >>(7-_dcd )&0x01));if _bdd !=nil {return nil ,_de .Wrap (_bdd ,_ffd ,"");};};};};return _ebca ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bafg (d ,s )};
var _dae =[5]int {1,2,3,0,4};func _cgcd (_bce ,_bfcd ,_eecg *Bitmap )(*Bitmap ,error ){const _edga ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bfcd ==nil {return nil ,_de .Error (_edga ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _eecg ==nil {return nil ,_de .Error (_edga ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ddabb error ;switch {case _bce ==_bfcd :if _ddabb =_bce .RasterOperation (0,0,_bfcd .Width ,_bfcd .Height ,PixNotSrcAndDst ,_eecg ,0,0);
_ddabb !=nil {return nil ,_de .Wrap (_ddabb ,_edga ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bce ==_eecg :if _ddabb =_bce .RasterOperation (0,0,_bfcd .Width ,_bfcd .Height ,PixNotSrcAndDst ,_bfcd ,0,0);_ddabb !=nil {return nil ,_de .Wrap (_ddabb ,_edga ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_bce ,_ddabb =_bafg (_bce ,_bfcd );if _ddabb !=nil {return nil ,_de .Wrap (_ddabb ,_edga ,"");};if _ddabb =_bce .RasterOperation (0,0,_bfcd .Width ,_bfcd .Height ,PixNotSrcAndDst ,_eecg ,0,0);_ddabb !=nil {return nil ,_de .Wrap (_ddabb ,_edga ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _bce ,nil ;};func TstNSymbol (t *_b .T ,scale ...int )*Bitmap {_adfa ,_bbefa :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_f .NoError (t ,_bbefa );return TstGetScaledSymbol (t ,_adfa ,scale ...);};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cgec (d ,s ,sel )};
func TstRSymbol (t *_b .T ,scale ...int )*Bitmap {_fbe ,_feeb :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_feeb );return TstGetScaledSymbol (t ,_fbe ,scale ...);};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;
CmbOpReplace ;CmbOpNot ;);func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _faffe (src ,sequence ...);};func (_egfee *Bitmap )ToImage ()_da .Image {_efaf ,_caaf :=_g .NewImage (_egfee .Width ,_egfee .Height ,1,1,_egfee .Data ,nil ,nil );
if _caaf !=nil {_fa .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_caaf );
};return _efaf ;};func (_dcb *Bitmap )SetPadBits (value int ){_dcb .setPadBits (value )};func (_babad *Bitmap )centroid (_afcg ,_gabd []int )(Point ,error ){_fbgc :=Point {};_babad .setPadBits (0);if len (_afcg )==0{_afcg =_ceff ();};if len (_gabd )==0{_gabd =_gbfg ();
};var _caee ,_abbg ,_gfcf ,_cadb ,_daea ,_ffda int ;var _agbc byte ;for _daea =0;_daea < _babad .Height ;_daea ++{_bad :=_babad .RowStride *_daea ;_cadb =0;for _ffda =0;_ffda < _babad .RowStride ;_ffda ++{_agbc =_babad .Data [_bad +_ffda ];if _agbc !=0{_cadb +=_gabd [_agbc ];
_caee +=_afcg [_agbc ]+_ffda *8*_gabd [_agbc ];};};_gfcf +=_cadb ;_abbg +=_cadb *_daea ;};if _gfcf !=0{_fbgc .X =float32 (_caee )/float32 (_gfcf );_fbgc .Y =float32 (_abbg )/float32 (_gfcf );};return _fbgc ,nil ;};func TstWriteSymbols (t *_b .T ,bms *Bitmaps ,src *Bitmap ){for _adeg :=0;
_adeg < bms .Size ();_adeg ++{_eada :=bms .Values [_adeg ];_bcgg :=bms .Boxes [_adeg ];_dade :=src .RasterOperation (_bcgg .Min .X ,_bcgg .Min .Y ,_eada .Width ,_eada .Height ,PixSrc ,_eada ,0,0);_f .NoError (t ,_dade );};};func (_cgac *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _gfbaa ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _gcdb :=_cgac .validateIntSlice ();_gcdb !=nil {return nil ,_de .Wrap (_gcdb ,_gfbaa ,"");};if _cgac .IntSlice .Size ()==0{return nil ,_de .Error (_gfbaa ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_cgac .SortByY ();var (_efea []*ClassedPoints ;_cdcg int ;);_efce :=-1;var _cgaca *ClassedPoints ;for _cdfc :=0;_cdfc < len (_cgac .IntSlice );_cdfc ++{_cdcg =int (_cgac .YAtIndex (_cdfc ));if _cdcg !=_efce {_cgaca =&ClassedPoints {Points :_cgac .Points };
_efce =_cdcg ;_efea =append (_efea ,_cgaca );};_cgaca .IntSlice =append (_cgaca .IntSlice ,_cgac .IntSlice [_cdfc ]);};for _ ,_cbag :=range _efea {_cbag .SortByX ();};return _efea ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _edbeb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_de .Error (_edbeb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_de .Error (_edbeb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_de .Error (_edbeb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_de .Error (_edbeb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_de .Error (_edbeb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_ddad ,_dfcb :=bm1 .Width ,bm1 .Height ;_aebg ,_aaff :=bm2 .Width ,bm2 .Height ;if _fd .Abs (_ddad -_aebg )> maxDiffW {return false ,nil ;};if _fd .Abs (_dfcb -_aaff )> maxDiffH {return false ,nil ;};_bbfg :=int (delX +_fd .Sign (delX )*0.5);_ccdd :=int (delY +_fd .Sign (delY )*0.5);
_bbef :=int (_a .Ceil (_a .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fcfe :=bm2 .RowStride ;_bdfd :=_ceeg (_ccdd ,0);_gfecb :=_fcc (_aaff +_ccdd ,_dfcb );_dffbg :=bm1 .RowStride *_bdfd ;_aea :=bm2 .RowStride *(_bdfd -_ccdd );
var _gege int ;if _gfecb <=_dfcb {_gege =downcount [_gfecb -1];};_bfbc :=_ceeg (_bbfg ,0);_bbgc :=_fcc (_aebg +_bbfg ,_ddad );var _gfca ,_cbdd int ;if _bbfg >=8{_gfca =_bbfg >>3;_dffbg +=_gfca ;_bfbc -=_gfca <<3;_bbgc -=_gfca <<3;_bbfg &=7;}else if _bbfg <=-8{_cbdd =-((_bbfg +7)>>3);
_aea +=_cbdd ;_fcfe -=_cbdd ;_bbfg +=_cbdd <<3;};var (_fgca ,_fgfcd ,_fgeb int ;_fgcgc ,_fbbd ,_ebfbf byte ;);if _bfbc >=_bbgc ||_bdfd >=_gfecb {return false ,nil ;};_fafc :=(_bbgc +7)>>3;switch {case _bbfg ==0:for _fgfcd =_bdfd ;_fgfcd < _gfecb ;_fgfcd ,_dffbg ,_aea =_fgfcd +1,_dffbg +bm1 .RowStride ,_aea +bm2 .RowStride {for _fgeb =0;
_fgeb < _fafc ;_fgeb ++{_fgcgc =bm1 .Data [_dffbg +_fgeb ]&bm2 .Data [_aea +_fgeb ];_fgca +=tab [_fgcgc ];};if _fgca >=_bbef {return true ,nil ;};if _cce :=_fgca +downcount [_fgfcd ]-_gege ;_cce < _bbef {return false ,nil ;};};case _bbfg > 0&&_fcfe < _fafc :for _fgfcd =_bdfd ;
_fgfcd < _gfecb ;_fgfcd ,_dffbg ,_aea =_fgfcd +1,_dffbg +bm1 .RowStride ,_aea +bm2 .RowStride {_fbbd =bm1 .Data [_dffbg ];_ebfbf =bm2 .Data [_aea ]>>uint (_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];for _fgeb =1;_fgeb < _fcfe ;_fgeb ++{_fbbd =bm1 .Data [_dffbg +_fgeb ];
_ebfbf =bm2 .Data [_aea +_fgeb ]>>uint (_bbfg )|bm2 .Data [_aea +_fgeb -1]<<uint (8-_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];};_fbbd =bm1 .Data [_dffbg +_fgeb ];_ebfbf =bm2 .Data [_aea +_fgeb -1]<<uint (8-_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];
if _fgca >=_bbef {return true ,nil ;}else if _fgca +downcount [_fgfcd ]-_gege < _bbef {return false ,nil ;};};case _bbfg > 0&&_fcfe >=_fafc :for _fgfcd =_bdfd ;_fgfcd < _gfecb ;_fgfcd ,_dffbg ,_aea =_fgfcd +1,_dffbg +bm1 .RowStride ,_aea +bm2 .RowStride {_fbbd =bm1 .Data [_dffbg ];
_ebfbf =bm2 .Data [_aea ]>>uint (_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];for _fgeb =1;_fgeb < _fafc ;_fgeb ++{_fbbd =bm1 .Data [_dffbg +_fgeb ];_ebfbf =bm2 .Data [_aea +_fgeb ]>>uint (_bbfg );_ebfbf |=bm2 .Data [_aea +_fgeb -1]<<uint (8-_bbfg );
_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];};if _fgca >=_bbef {return true ,nil ;}else if _fgca +downcount [_fgfcd ]-_gege < _bbef {return false ,nil ;};};case _fafc < _fcfe :for _fgfcd =_bdfd ;_fgfcd < _gfecb ;_fgfcd ,_dffbg ,_aea =_fgfcd +1,_dffbg +bm1 .RowStride ,_aea +bm2 .RowStride {for _fgeb =0;
_fgeb < _fafc ;_fgeb ++{_fbbd =bm1 .Data [_dffbg +_fgeb ];_ebfbf =bm2 .Data [_aea +_fgeb ]<<uint (-_bbfg );_ebfbf |=bm2 .Data [_aea +_fgeb +1]>>uint (8+_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];};if _fgca >=_bbef {return true ,nil ;}else if _fffc :=_fgca +downcount [_fgfcd ]-_gege ;
_fffc < _bbef {return false ,nil ;};};case _fcfe >=_fafc :for _fgfcd =_bdfd ;_fgfcd < _gfecb ;_fgfcd ,_dffbg ,_aea =_fgfcd +1,_dffbg +bm1 .RowStride ,_aea +bm2 .RowStride {for _fgeb =0;_fgeb < _fafc ;_fgeb ++{_fbbd =bm1 .Data [_dffbg +_fgeb ];_ebfbf =bm2 .Data [_aea +_fgeb ]<<uint (-_bbfg );
_ebfbf |=bm2 .Data [_aea +_fgeb +1]>>uint (8+_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];};_fbbd =bm1 .Data [_dffbg +_fgeb ];_ebfbf =bm2 .Data [_aea +_fgeb ]<<uint (-_bbfg );_fgcgc =_fbbd &_ebfbf ;_fgca +=tab [_fgcgc ];if _fgca >=_bbef {return true ,nil ;
}else if _fgca +downcount [_fgfcd ]-_gege < _bbef {return false ,nil ;};};};_cddb :=float32 (_fgca )*float32 (_fgca )/(float32 (area1 )*float32 (area2 ));if _cddb >=scoreThreshold {_fa .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_fgca ,_bbef ,_cddb ,scoreThreshold );
};return false ,nil ;};func TstVSymbol (t *_b .T ,scale ...int )*Bitmap {_fgfd ,_cfbb :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_cfbb );return TstGetScaledSymbol (t ,_fgfd ,scale ...);};func (_dbccc *byHeight )Less (i ,j int )bool {return _dbccc .Values [i ].Height < _dbccc .Values [j ].Height };
func TstASymbol (t *_b .T )*Bitmap {t .Helper ();_cfgff :=New (6,6);_f .NoError (t ,_cfgff .SetPixel (1,0,1));_f .NoError (t ,_cfgff .SetPixel (2,0,1));_f .NoError (t ,_cfgff .SetPixel (3,0,1));_f .NoError (t ,_cfgff .SetPixel (4,0,1));_f .NoError (t ,_cfgff .SetPixel (5,1,1));
_f .NoError (t ,_cfgff .SetPixel (1,2,1));_f .NoError (t ,_cfgff .SetPixel (2,2,1));_f .NoError (t ,_cfgff .SetPixel (3,2,1));_f .NoError (t ,_cfgff .SetPixel (4,2,1));_f .NoError (t ,_cfgff .SetPixel (5,2,1));_f .NoError (t ,_cfgff .SetPixel (0,3,1));
_f .NoError (t ,_cfgff .SetPixel (5,3,1));_f .NoError (t ,_cfgff .SetPixel (0,4,1));_f .NoError (t ,_cfgff .SetPixel (5,4,1));_f .NoError (t ,_cfgff .SetPixel (1,5,1));_f .NoError (t ,_cfgff .SetPixel (2,5,1));_f .NoError (t ,_cfgff .SetPixel (3,5,1));
_f .NoError (t ,_cfgff .SetPixel (4,5,1));_f .NoError (t ,_cfgff .SetPixel (5,5,1));return _cfgff ;};func _gafa (_bfce ,_bacb *Bitmap ,_cefe *Selection )(*Bitmap ,error ){const _dffg ="\u0065\u0072\u006fd\u0065";var (_fddd error ;_cgfa *Bitmap ;);_bfce ,_fddd =_dbfa (_bfce ,_bacb ,_cefe ,&_cgfa );
if _fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"");};if _fddd =_bfce .setAll ();_fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"");};var _dfca SelectionValue ;for _dabad :=0;_dabad < _cefe .Height ;_dabad ++{for _aege :=0;_aege < _cefe .Width ;
_aege ++{_dfca =_cefe .Data [_dabad ][_aege ];if _dfca ==SelHit {_fddd =_ccgc (_bfce ,_cefe .Cx -_aege ,_cefe .Cy -_dabad ,_bacb .Width ,_bacb .Height ,PixSrcAndDst ,_cgfa ,0,0);if _fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bfce ,nil ;
};_fdg ,_gedc ,_gfge ,_acbf :=_cefe .findMaxTranslations ();if _fdg > 0{if _fddd =_bfce .RasterOperation (0,0,_fdg ,_bacb .Height ,PixClr ,nil ,0,0);_fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _gfge > 0{if _fddd =_bfce .RasterOperation (_bacb .Width -_gfge ,0,_gfge ,_bacb .Height ,PixClr ,nil ,0,0);
_fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _gedc > 0{if _fddd =_bfce .RasterOperation (0,0,_bacb .Width ,_gedc ,PixClr ,nil ,0,0);_fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"\u0079\u0070\u0020\u003e\u0020\u0030");
};};if _acbf > 0{if _fddd =_bfce .RasterOperation (0,_bacb .Height -_acbf ,_bacb .Width ,_acbf ,PixClr ,nil ,0,0);_fddd !=nil {return nil ,_de .Wrap (_fddd ,_dffg ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bfce ,nil ;};func TstGetScaledSymbol (t *_b .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_agcbf ,_acac :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_f .NoError (t ,_acac );return _agcbf ;};func _fadd (_effb int )int {if _effb < 0{return -_effb ;};return _effb ;
};func (_aedfe *BitmapsArray )AddBitmaps (bm *Bitmaps ){_aedfe .Values =append (_aedfe .Values ,bm )};func _gdgf (_cbab ,_bgbd *Bitmap ,_edba ,_dadf ,_gfgg uint ,_abdbg ,_bgbc int ,_cfac bool ,_deba ,_degb int )error {for _gdaf :=_abdbg ;_gdaf < _bgbc ;
_gdaf ++{if _deba +1< len (_cbab .Data ){_fefea :=_gdaf +1==_bgbc ;_ccge ,_acf :=_cbab .GetByte (_deba );if _acf !=nil {return _acf ;};_deba ++;_ccge <<=_edba ;_bdfg ,_acf :=_cbab .GetByte (_deba );if _acf !=nil {return _acf ;};_bdfg >>=_dadf ;_gfde :=_ccge |_bdfg ;
if _fefea &&!_cfac {_gfde =_cddc (_gfgg ,_gfde );};_acf =_bgbd .SetByte (_degb ,_gfde );if _acf !=nil {return _acf ;};_degb ++;if _fefea &&_cfac {_fgec ,_fgfc :=_cbab .GetByte (_deba );if _fgfc !=nil {return _fgfc ;};_fgec <<=_edba ;_gfde =_cddc (_gfgg ,_fgec );
if _fgfc =_bgbd .SetByte (_degb ,_gfde );_fgfc !=nil {return _fgfc ;};};continue ;};_cde ,_ggbb :=_cbab .GetByte (_deba );if _ggbb !=nil {_fa .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_deba ,_ggbb );
return _ggbb ;};_cde <<=_edba ;_deba ++;_ggbb =_bgbd .SetByte (_degb ,_cde );if _ggbb !=nil {return _ggbb ;};_degb ++;};return nil ;};type Component int ;func (_gdd *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_fgea bool ,_ccgg error ){const _dbba ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_gbfg ();};_accc :=_gdd .Width >>3;_deb :=_gdd .Width &7;_cfef :=byte (0xff<<uint (8-_deb ));var (_edbee ,_fdcg ,_efe ,_egfe int ;_gcb byte ;);for _edbee =0;_edbee < _gdd .Height ;_edbee ++{_efe =_gdd .RowStride *_edbee ;for _fdcg =0;
_fdcg < _accc ;_fdcg ++{_gcb ,_ccgg =_gdd .GetByte (_efe +_fdcg );if _ccgg !=nil {return false ,_de .Wrap (_ccgg ,_dbba ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_egfe +=tab8 [_gcb ];};if _deb !=0{_gcb ,_ccgg =_gdd .GetByte (_efe +_fdcg );
if _ccgg !=nil {return false ,_de .Wrap (_ccgg ,_dbba ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_gcb &=_cfef ;_egfe +=tab8 [_gcb ];};if _egfe > thresh {return true ,nil ;};};return _fgea ,nil ;};func _ef (_gg ,_bbd *Bitmap )(_gf error ){const _dd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_af :=_bbd .RowStride ;_c :=_gg .RowStride ;var (_dg byte ;_be uint16 ;_bc ,_ba ,_aff ,_bd ,_ge int ;);for _aff =0;_aff < _bbd .Height ;_aff ++{_bc =_aff *_af ;_ba =2*_aff *_c ;for _bd =0;_bd < _af ;_bd ++{_dg =_bbd .Data [_bc +_bd ];_be =_afgc [_dg ];
_ge =_ba +_bd *2;if _gg .RowStride !=_bbd .RowStride *2&&(_bd +1)*2> _gg .RowStride {_gf =_gg .SetByte (_ge ,byte (_be >>8));}else {_gf =_gg .setTwoBytes (_ge ,_be );};if _gf !=nil {return _de .Wrap (_gf ,_dd ,"");};};for _bd =0;_bd < _c ;_bd ++{_ge =_ba +_c +_bd ;
_dg =_gg .Data [_ba +_bd ];if _gf =_gg .SetByte (_ge ,_dg );_gf !=nil {return _de .Wrapf (_gf ,_dd ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ba +_bd ,_ba +_c +_bd );
};};};return nil ;};type Point struct{X ,Y float32 ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_febab :=_eebb (h ,w ,"");_febab .setOrigin (cy ,cx );var _faef ,_ddef int ;for _faef =0;_faef < h ;_faef ++{for _ddef =0;_ddef < w ;
_ddef ++{_febab .Data [_faef ][_ddef ]=tp ;};};return _febab ;};func (_bdaf *Bitmaps )Size ()int {return len (_bdaf .Values )};func (_fega *Bitmap )setFourBytes (_dbdfb int ,_dcec uint32 )error {if _dbdfb +3> len (_fega .Data )-1{return _de .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dbdfb );
};_fega .Data [_dbdfb ]=byte ((_dcec &0xff000000)>>24);_fega .Data [_dbdfb +1]=byte ((_dcec &0xff0000)>>16);_fega .Data [_dbdfb +2]=byte ((_dcec &0xff00)>>8);_fega .Data [_dbdfb +3]=byte (_dcec &0xff);return nil ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func _acgba (_dbcg *Bitmap ,_dcgf *_fd .Stack ,_fggaa ,_edbaf int )(_dcgg *_da .Rectangle ,_bdcb error ){const _bbga ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dbcg ==nil {return nil ,_de .Error (_bbga ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _dcgf ==nil {return nil ,_de .Error (_bbga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_cfec ,_gabg :=_dbcg .Width ,_dbcg .Height ;_effba :=_cfec -1;_bbce :=_gabg -1;if _fggaa < 0||_fggaa > _effba ||_edbaf < 0||_edbaf > _bbce ||!_dbcg .GetPixel (_fggaa ,_edbaf ){return nil ,nil ;
};_facae :=_da .Rect (100000,100000,0,0);if _bdcb =_afef (_dcgf ,_fggaa ,_fggaa ,_edbaf ,1,_bbce ,&_facae );_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bdcb =_afef (_dcgf ,_fggaa ,_fggaa ,_edbaf +1,-1,_bbce ,&_facae );
_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_facae .Min .X ,_facae .Max .X =_fggaa ,_fggaa ;_facae .Min .Y ,_facae .Max .Y =_edbaf ,_edbaf ;var (_afbe *fillSegment ;
_abaa int ;);for _dcgf .Len ()> 0{if _afbe ,_bdcb =_fccb (_dcgf );_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"");};_edbaf =_afbe ._befef ;for _fggaa =_afbe ._ebcb -1;_fggaa >=0&&_dbcg .GetPixel (_fggaa ,_edbaf );_fggaa --{if _bdcb =_dbcg .SetPixel (_fggaa ,_edbaf ,0);
_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _fggaa >=_afbe ._ebcb -1{for {for _fggaa ++;_fggaa <=_afbe ._fgffe +1&&_fggaa <=_effba &&!_dbcg .GetPixel (_fggaa ,_edbaf );_fggaa ++{};_abaa =_fggaa ;if !(_fggaa <=_afbe ._fgffe +1&&_fggaa <=_effba ){break ;
};for ;_fggaa <=_effba &&_dbcg .GetPixel (_fggaa ,_edbaf );_fggaa ++{if _bdcb =_dbcg .SetPixel (_fggaa ,_edbaf ,0);_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bdcb =_afef (_dcgf ,_abaa ,_fggaa -1,_afbe ._befef ,_afbe ._fgbe ,_bbce ,&_facae );
_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fggaa > _afbe ._fgffe {if _bdcb =_afef (_dcgf ,_afbe ._fgffe +1,_fggaa -1,_afbe ._befef ,-_afbe ._fgbe ,_bbce ,&_facae );_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_abaa =_fggaa +1;if _abaa < _afbe ._ebcb {if _bdcb =_afef (_dcgf ,_abaa ,_afbe ._ebcb -1,_afbe ._befef ,-_afbe ._fgbe ,_bbce ,&_facae );_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fggaa =_afbe ._ebcb ;for {for ;_fggaa <=_effba &&_dbcg .GetPixel (_fggaa ,_edbaf );_fggaa ++{if _bdcb =_dbcg .SetPixel (_fggaa ,_edbaf ,0);_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bdcb =_afef (_dcgf ,_abaa ,_fggaa -1,_afbe ._befef ,_afbe ._fgbe ,_bbce ,&_facae );
_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fggaa > _afbe ._fgffe {if _bdcb =_afef (_dcgf ,_afbe ._fgffe +1,_fggaa -1,_afbe ._befef ,-_afbe ._fgbe ,_bbce ,&_facae );_bdcb !=nil {return nil ,_de .Wrap (_bdcb ,_bbga ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fggaa ++;_fggaa <=_afbe ._fgffe +1&&_fggaa <=_effba &&!_dbcg .GetPixel (_fggaa ,_edbaf );_fggaa ++{};_abaa =_fggaa ;if !(_fggaa <=_afbe ._fgffe +1&&_fggaa <=_effba ){break ;};};};_facae .Max .X ++;_facae .Max .Y ++;return &_facae ,nil ;};func MakePixelCentroidTab8 ()[]int {return _ceff ()};
func _dag (_egc *Bitmap ,_bgb *Bitmap ,_gea int )(_agb error ){const _ebc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _gea {case 2:_agb =_ef (_egc ,_bgb );case 4:_agb =_ggc (_egc ,_bgb );
case 8:_agb =_ae (_egc ,_bgb );default:return _de .Error (_ebc ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _agb !=nil {_agb =_de .Wrap (_agb ,_ebc ,"");};return _agb ;};func (_fag *Bitmap )InverseData (){_fag .inverseData ()};func (_efbg *BitmapsArray )AddBox (box *_da .Rectangle ){_efbg .Boxes =append (_efbg .Boxes ,box )};func _adaf (_aedf ,_fdgd ,_dfgg byte )byte {return (_aedf &^(_dfgg ))|(_fdgd &_dfgg )};
func _fccb (_gbec *_fd .Stack )(_gacc *fillSegment ,_ccaef error ){const _cdbb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _gbec ==nil {return nil ,_de .Error (_cdbb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _gbec .Aux ==nil {return nil ,_de .Error (_cdbb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_bfbaf ,_dfbd :=_gbec .Pop ();if !_dfbd {return nil ,nil ;};_dffgc ,_dfbd :=_bfbaf .(*fillSegment );
if !_dfbd {return nil ,_de .Error (_cdbb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gacc =&fillSegment {_dffgc ._ebcb ,_dffgc ._fgffe ,_dffgc ._befef +_dffgc ._fgbe ,_dffgc ._fgbe };
_gbec .Aux .Push (_dffgc );return _gacc ,nil ;};func (_efa *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _efa .Copy (),nil ;};_deg ,_abdb :=_efa .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _abdb !=nil {return nil ,_de .Wrap (_abdb ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _deg ,nil ;};func _fgdg (_gafb *Bitmap ,_gcbg ,_affc int ,_geaab ,_ecgd int ,_bcgf RasterOperator ,_deff *Bitmap ,_bgdf ,_fbfd int )error {var _degef ,_degba ,_gcaaf ,_gece int ;
if _gcbg < 0{_bgdf -=_gcbg ;_geaab +=_gcbg ;_gcbg =0;};if _bgdf < 0{_gcbg -=_bgdf ;_geaab +=_bgdf ;_bgdf =0;};_degef =_gcbg +_geaab -_gafb .Width ;if _degef > 0{_geaab -=_degef ;};_degba =_bgdf +_geaab -_deff .Width ;if _degba > 0{_geaab -=_degba ;};if _affc < 0{_fbfd -=_affc ;
_ecgd +=_affc ;_affc =0;};if _fbfd < 0{_affc -=_fbfd ;_ecgd +=_fbfd ;_fbfd =0;};_gcaaf =_affc +_ecgd -_gafb .Height ;if _gcaaf > 0{_ecgd -=_gcaaf ;};_gece =_fbfd +_ecgd -_deff .Height ;if _gece > 0{_ecgd -=_gece ;};if _geaab <=0||_ecgd <=0{return nil ;
};var _gdga error ;switch {case _gcbg &7==0&&_bgdf &7==0:_gdga =_edde (_gafb ,_gcbg ,_affc ,_geaab ,_ecgd ,_bcgf ,_deff ,_bgdf ,_fbfd );case _gcbg &7==_bgdf &7:_gdga =_gbfgg (_gafb ,_gcbg ,_affc ,_geaab ,_ecgd ,_bcgf ,_deff ,_bgdf ,_fbfd );default:_gdga =_agda (_gafb ,_gcbg ,_affc ,_geaab ,_ecgd ,_bcgf ,_deff ,_bgdf ,_fbfd );
};if _gdga !=nil {return _de .Wrap (_gdga ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func _cgbf (_caba ,_ddba *Bitmap ,_bfa ,_fdfc int )(*Bitmap ,error ){const _ccfc ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _ddba ==nil {return nil ,_de .Error (_ccfc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bfa < 1||_fdfc < 1{return nil ,_de .Error (_ccfc ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _bfa ==1&&_fdfc ==1{return _ddba .Copy (),nil ;};if _bfa ==1||_fdfc ==1{_eede :=SelCreateBrick (_fdfc ,_bfa ,_fdfc /2,_bfa /2,SelHit );var _aafb error ;_caba ,_aafb =_fbdc (_caba ,_ddba ,_eede );if _aafb !=nil {return nil ,_de .Wrap (_aafb ,_ccfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _caba ,nil ;};_cfgd :=SelCreateBrick (1,_bfa ,0,_bfa /2,SelHit );_cbef :=SelCreateBrick (_fdfc ,1,_fdfc /2,0,SelHit );_ceb ,_edegb :=_cgec (nil ,_ddba ,_cfgd );if _edegb !=nil {return nil ,_de .Wrap (_edegb ,_ccfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _caba ,_edegb =_cgec (_caba ,_ceb ,_cbef );_edegb !=nil {return nil ,_de .Wrap (_edegb ,_ccfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_edegb =_gafa (_ceb ,_caba ,_cfgd );_edegb !=nil {return nil ,_de .Wrap (_edegb ,_ccfc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_edegb =_gafa (_caba ,_ceb ,_cbef );_edegb !=nil {return nil ,_de .Wrap (_edegb ,_ccfc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _caba ,nil ;};func (_befed *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fcec *Bitmaps ,_fccfc error ){const _gaca ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _befed ==nil {return nil ,_de .Error (_gaca ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_de .Errorf (_gaca ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_de .Errorf (_gaca ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_fabce ,_fccfc :=_befed .makeSizeIndicator (width ,height ,tp ,relation );if _fccfc !=nil {return nil ,_de .Wrap (_fccfc ,_gaca ,"");};_fcec ,_fccfc =_befed .selectByIndicator (_fabce );if _fccfc !=nil {return nil ,_de .Wrap (_fccfc ,_gaca ,"");};return _fcec ,nil ;
};func (_ebdd Points )GetGeometry (i int )(_cdfb ,_aggb float32 ,_cgcdd error ){if i > len (_ebdd )-1{return 0,0,_de .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cgcaa :=_ebdd [i ];return _cgcaa .X ,_cgcaa .Y ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_ebfab *Bitmap )nextOnPixelLow (_aac ,_bgbb ,_bbcb ,_ccdc ,_ffff int )(_abb _da .Point ,_ebb bool ,_cdbc error ){const _bgag ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_gbg int ;_add byte ;);_dffd :=_ffff *_bbcb ;_agag :=_dffd +(_ccdc /8);if _add ,_cdbc =_ebfab .GetByte (_agag );_cdbc !=nil {return _abb ,false ,_de .Wrap (_cdbc ,_bgag ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _add !=0{_fcg :=_ccdc -(_ccdc %8)+7;for _gbg =_ccdc ;_gbg <=_fcg &&_gbg < _aac ;_gbg ++{if _ebfab .GetPixel (_gbg ,_ffff ){_abb .X =_gbg ;_abb .Y =_ffff ;return _abb ,true ,nil ;};};};_gcf :=(_ccdc /8)+1;_gbg =8*_gcf ;var _faad int ;for _agag =_dffd +_gcf ;
_gbg < _aac ;_agag ,_gbg =_agag +1,_gbg +8{if _add ,_cdbc =_ebfab .GetByte (_agag );_cdbc !=nil {return _abb ,false ,_de .Wrap (_cdbc ,_bgag ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _add ==0{continue ;
};for _faad =0;_faad < 8&&_gbg < _aac ;_faad ,_gbg =_faad +1,_gbg +1{if _ebfab .GetPixel (_gbg ,_ffff ){_abb .X =_gbg ;_abb .Y =_ffff ;return _abb ,true ,nil ;};};};for _feab :=_ffff +1;_feab < _bgbb ;_feab ++{_dffd =_feab *_bbcb ;for _agag ,_gbg =_dffd ,0;
_gbg < _aac ;_agag ,_gbg =_agag +1,_gbg +8{if _add ,_cdbc =_ebfab .GetByte (_agag );_cdbc !=nil {return _abb ,false ,_de .Wrap (_cdbc ,_bgag ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _add ==0{continue ;};
for _faad =0;_faad < 8&&_gbg < _aac ;_faad ,_gbg =_faad +1,_gbg +1{if _ebfab .GetPixel (_gbg ,_feab ){_abb .X =_gbg ;_abb .Y =_feab ;return _abb ,true ,nil ;};};};};return _abb ,false ,nil ;};func (_dbbac MorphProcess )verify (_gcaa int ,_gecc ,_befe *int )error {const _fegg ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _dbbac .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_dbbac .Arguments )!=2{return _de .Error (_fegg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_cggf ,_cbdc :=_dbbac .getWidthHeight ();if _cggf <=0||_cbdc <=0{return _de .Error (_fegg ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_egdd :=len (_dbbac .Arguments );*_gecc +=_egdd ;if _egdd < 1||_egdd > 4{return _de .Error (_fegg ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _afcb :=0;_afcb < _egdd ;_afcb ++{if _dbbac .Arguments [_afcb ]< 1||_dbbac .Arguments [_afcb ]> 4{return _de .Error (_fegg ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_dbbac .Arguments )==0{return _de .Error (_fegg ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_agcb :=_dbbac .Arguments [0];if _agcb !=2&&_agcb !=4&&_agcb !=8{return _de .Error (_fegg ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_gecc -=_dae [_agcb /4];case MopAddBorder :if len (_dbbac .Arguments )==0{return _de .Error (_fegg ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbcc :=_dbbac .Arguments [0];if _gcaa > 0{return _de .Error (_fegg ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _dbcc < 1{return _de .Error (_fegg ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_befe =_dbcc ;};return nil ;};func TstCSymbol (t *_b .T )*Bitmap {t .Helper ();
_eeea :=New (6,6);_f .NoError (t ,_eeea .SetPixel (1,0,1));_f .NoError (t ,_eeea .SetPixel (2,0,1));_f .NoError (t ,_eeea .SetPixel (3,0,1));_f .NoError (t ,_eeea .SetPixel (4,0,1));_f .NoError (t ,_eeea .SetPixel (0,1,1));_f .NoError (t ,_eeea .SetPixel (5,1,1));
_f .NoError (t ,_eeea .SetPixel (0,2,1));_f .NoError (t ,_eeea .SetPixel (0,3,1));_f .NoError (t ,_eeea .SetPixel (0,4,1));_f .NoError (t ,_eeea .SetPixel (5,4,1));_f .NoError (t ,_eeea .SetPixel (1,5,1));_f .NoError (t ,_eeea .SetPixel (2,5,1));_f .NoError (t ,_eeea .SetPixel (3,5,1));
_f .NoError (t ,_eeea .SetPixel (4,5,1));return _eeea ;};func _ceff ()[]int {_cfb :=make ([]int ,256);_cfb [0]=0;_cfb [1]=7;var _ebcc int ;for _ebcc =2;_ebcc < 4;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -2]+6;};for _ebcc =4;_ebcc < 8;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -4]+5;
};for _ebcc =8;_ebcc < 16;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -8]+4;};for _ebcc =16;_ebcc < 32;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -16]+3;};for _ebcc =32;_ebcc < 64;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -32]+2;};for _ebcc =64;_ebcc < 128;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -64]+1;
};for _ebcc =128;_ebcc < 256;_ebcc ++{_cfb [_ebcc ]=_cfb [_ebcc -128];};return _cfb ;};func (_dgc *Bitmap )And (s *Bitmap )(_fff *Bitmap ,_daa error ){const _eca ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _dgc ==nil {return nil ,_de .Error (_eca ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_de .Error (_eca ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_dgc .SizesEqual (s ){_fa .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_eca );
};if _fff ,_daa =_bafg (_fff ,_dgc );_daa !=nil {return nil ,_de .Wrap (_daa ,_eca ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _daa =_fff .RasterOperation (0,0,_fff .Width ,_fff .Height ,PixSrcAndDst ,s ,0,0);
_daa !=nil {return nil ,_de .Wrap (_daa ,_eca ,"");};return _fff ,nil ;};func _geg ()(_bdga [256]uint32 ){for _abdg :=0;_abdg < 256;_abdg ++{if _abdg &0x01!=0{_bdga [_abdg ]|=0xf;};if _abdg &0x02!=0{_bdga [_abdg ]|=0xf0;};if _abdg &0x04!=0{_bdga [_abdg ]|=0xf00;
};if _abdg &0x08!=0{_bdga [_abdg ]|=0xf000;};if _abdg &0x10!=0{_bdga [_abdg ]|=0xf0000;};if _abdg &0x20!=0{_bdga [_abdg ]|=0xf00000;};if _abdg &0x40!=0{_bdga [_abdg ]|=0xf000000;};if _abdg &0x80!=0{_bdga [_abdg ]|=0xf0000000;};};return _bdga ;};func (_eecfa *Boxes )makeSizeIndicator (_bagc ,_eeeb int ,_caec LocationFilter ,_cgaeb SizeComparison )*_fd .NumSlice {_eddd :=&_fd .NumSlice {};
var _ggbd ,_gffc ,_babg int ;for _ ,_faba :=range *_eecfa {_ggbd =0;_gffc ,_babg =_faba .Dx (),_faba .Dy ();switch _caec {case LocSelectWidth :if (_cgaeb ==SizeSelectIfLT &&_gffc < _bagc )||(_cgaeb ==SizeSelectIfGT &&_gffc > _bagc )||(_cgaeb ==SizeSelectIfLTE &&_gffc <=_bagc )||(_cgaeb ==SizeSelectIfGTE &&_gffc >=_bagc ){_ggbd =1;
};case LocSelectHeight :if (_cgaeb ==SizeSelectIfLT &&_babg < _eeeb )||(_cgaeb ==SizeSelectIfGT &&_babg > _eeeb )||(_cgaeb ==SizeSelectIfLTE &&_babg <=_eeeb )||(_cgaeb ==SizeSelectIfGTE &&_babg >=_eeeb ){_ggbd =1;};case LocSelectIfEither :if (_cgaeb ==SizeSelectIfLT &&(_babg < _eeeb ||_gffc < _bagc ))||(_cgaeb ==SizeSelectIfGT &&(_babg > _eeeb ||_gffc > _bagc ))||(_cgaeb ==SizeSelectIfLTE &&(_babg <=_eeeb ||_gffc <=_bagc ))||(_cgaeb ==SizeSelectIfGTE &&(_babg >=_eeeb ||_gffc >=_bagc )){_ggbd =1;
};case LocSelectIfBoth :if (_cgaeb ==SizeSelectIfLT &&(_babg < _eeeb &&_gffc < _bagc ))||(_cgaeb ==SizeSelectIfGT &&(_babg > _eeeb &&_gffc > _bagc ))||(_cgaeb ==SizeSelectIfLTE &&(_babg <=_eeeb &&_gffc <=_bagc ))||(_cgaeb ==SizeSelectIfGTE &&(_babg >=_eeeb &&_gffc >=_bagc )){_ggbd =1;
};};_eddd .AddInt (_ggbd );};return _eddd ;};func _bafg (_edea ,_fcgb *Bitmap )(*Bitmap ,error ){if _fcgb ==nil {return nil ,_de .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fcgb ==_edea {return _edea ,nil ;};if _edea ==nil {_edea =_fcgb .createTemplate ();copy (_edea .Data ,_fcgb .Data );return _edea ,nil ;};_gacb :=_edea .resizeImageData (_fcgb );if _gacb !=nil {return nil ,_de .Wrap (_gacb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_edea .Text =_fcgb .Text ;copy (_edea .Data ,_fcgb .Data );return _edea ,nil ;};func (_dgca *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dgca .Data )-1||index < 0{return 0,_de .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dgca .Data [index ],nil ;};func (_bdfe Points )Size ()int {return len (_bdfe )};func (_fgecg *byHeight )Swap (i ,j int ){_fgecg .Values [i ],_fgecg .Values [j ]=_fgecg .Values [j ],_fgecg .Values [i ];if _fgecg .Boxes !=nil {_fgecg .Boxes [i ],_fgecg .Boxes [j ]=_fgecg .Boxes [j ],_fgecg .Boxes [i ];
};};func (_feaed *Bitmaps )SortByHeight (){_feaeg :=(*byHeight )(_feaed );_bbc .Sort (_feaeg )};func _aeced (_bbec ,_bef *Bitmap ,_ccdae ,_gddc ,_cfde ,_degde ,_eefe ,_fecg ,_ffdg ,_bdbce int ,_bab CombinationOperator ,_eecf int )error {var _bdbfa int ;
_dbe :=func (){_bdbfa ++;_cfde +=_bef .RowStride ;_degde +=_bbec .RowStride ;_eefe +=_bbec .RowStride };for _bdbfa =_ccdae ;_bdbfa < _gddc ;_dbe (){var _cgbb uint16 ;_afgb :=_cfde ;for _ecba :=_degde ;_ecba <=_eefe ;_ecba ++{_ggac ,_fdd :=_bef .GetByte (_afgb );
if _fdd !=nil {return _fdd ;};_bag ,_fdd :=_bbec .GetByte (_ecba );if _fdd !=nil {return _fdd ;};_cgbb =(_cgbb |(uint16 (_bag )&0xff))<<uint (_bdbce );_bag =byte (_cgbb >>8);if _fdd =_bef .SetByte (_afgb ,_afa (_ggac ,_bag ,_bab ));_fdd !=nil {return _fdd ;
};_afgb ++;_cgbb <<=uint (_ffdg );if _ecba ==_eefe {_bag =byte (_cgbb >>(8-uint8 (_bdbce )));if _eecf !=0{_bag =_cddc (uint (8+_fecg ),_bag );};_ggac ,_fdd =_bef .GetByte (_afgb );if _fdd !=nil {return _fdd ;};if _fdd =_bef .SetByte (_afgb ,_afa (_ggac ,_bag ,_bab ));
_fdd !=nil {return _fdd ;};};};};return nil ;};func (_fdaf *ClassedPoints )SortByX (){_fdaf ._dcgd =_fdaf .xSortFunction ();_bbc .Sort (_fdaf )};func (_edfd *Bitmap )removeBorderGeneral (_bdc ,_geec ,_bdbc ,_cbe int )(*Bitmap ,error ){const _gdf ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bdc < 0||_geec < 0||_bdbc < 0||_cbe < 0{return nil ,_de .Error (_gdf ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_deca ,_gedba :=_edfd .Width ,_edfd .Height ;
_eef :=_deca -_bdc -_geec ;_ece :=_gedba -_bdbc -_cbe ;if _eef <=0{return nil ,_de .Errorf (_gdf ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_eef );};if _ece <=0{return nil ,_de .Errorf (_gdf ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_ece );
};_cbb :=New (_eef ,_ece );_cbb .Color =_edfd .Color ;_bge :=_cbb .RasterOperation (0,0,_eef ,_ece ,PixSrc ,_edfd ,_bdc ,_bdbc );if _bge !=nil {return nil ,_de .Wrap (_bge ,_gdf ,"");};return _cbb ,nil ;};func _bdfc (_dacb ,_dadd *Bitmap ,_dcdg ,_cdef int )(*Bitmap ,error ){const _acbe ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _dadd ==nil {return nil ,_de .Error (_acbe ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dcdg < 1||_cdef < 1{return nil ,_de .Error (_acbe ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dcdg ==1&&_cdef ==1{_bgd ,_bcdc :=_bafg (_dacb ,_dadd );if _bcdc !=nil {return nil ,_de .Wrap (_bcdc ,_acbe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bgd ,nil ;};if _dcdg ==1||_cdef ==1{_efbd :=SelCreateBrick (_cdef ,_dcdg ,_cdef /2,_dcdg /2,SelHit );_aade ,_ggaa :=_gafa (_dacb ,_dadd ,_efbd );if _ggaa !=nil {return nil ,_de .Wrap (_ggaa ,_acbe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aade ,nil ;};_gecg :=SelCreateBrick (1,_dcdg ,0,_dcdg /2,SelHit );_bcae :=SelCreateBrick (_cdef ,1,_cdef /2,0,SelHit );_aaeg ,_caaa :=_gafa (nil ,_dadd ,_gecg );if _caaa !=nil {return nil ,_de .Wrap (_caaa ,_acbe ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dacb ,_caaa =_gafa (_dacb ,_aaeg ,_bcae );if _caaa !=nil {return nil ,_de .Wrap (_caaa ,_acbe ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dacb ,nil ;};type byHeight Bitmaps ;func (_bafc *Bitmap )connComponentsBitmapsBB (_acbcb *Bitmaps ,_ggbe int )(_cfaa *Boxes ,_bfcc error ){const _ebde ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _ggbe !=4&&_ggbe !=8{return nil ,_de .Error (_ebde ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _acbcb ==nil {return nil ,_de .Error (_ebde ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_acbcb .Values )> 0{return nil ,_de .Error (_ebde ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bafc .Zero (){return &Boxes {},nil ;
};var (_dddf ,_ccb ,_ecaff ,_fda *Bitmap ;);_bafc .setPadBits (0);if _dddf ,_bfcc =_bafg (nil ,_bafc );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062\u006d\u0031");};if _ccb ,_bfcc =_bafg (nil ,_bafc );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062\u006d\u0032");
};_aaca :=&_fd .Stack {};_aaca .Aux =&_fd .Stack {};_cfaa =&Boxes {};var (_fabc ,_bfcg int ;_cbdg _da .Point ;_acce bool ;_dcf *_da .Rectangle ;);for {if _cbdg ,_acce ,_bfcc =_dddf .nextOnPixel (_fabc ,_bfcg );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"");
};if !_acce {break ;};if _dcf ,_bfcc =_fbab (_dddf ,_aaca ,_cbdg .X ,_cbdg .Y ,_ggbe );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"");};if _bfcc =_cfaa .Add (_dcf );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"");};if _ecaff ,_bfcc =_dddf .clipRectangle (_dcf ,nil );
_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062\u006d\u0033");};if _fda ,_bfcc =_ccb .clipRectangle (_dcf ,nil );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062\u006d\u0034");};if _ ,_bfcc =_aee (_ecaff ,_ecaff ,_fda );_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _bfcc =_ccb .RasterOperation (_dcf .Min .X ,_dcf .Min .Y ,_dcf .Dx (),_dcf .Dy (),PixSrcXorDst ,_ecaff ,0,0);_bfcc !=nil {return nil ,_de .Wrap (_bfcc ,_ebde ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_acbcb .AddBitmap (_ecaff );
_fabc =_cbdg .X ;_bfcg =_cbdg .Y ;};_acbcb .Boxes =*_cfaa ;return _cfaa ,nil ;};func _eaf (_ad *Bitmap ,_gce int )(*Bitmap ,error ){const _df ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _ad ==nil {return nil ,_de .Error (_df ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gce ==1{return _bafg (nil ,_ad );};if _gce !=2&&_gce !=4&&_gce !=8{return nil ,_de .Error (_df ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ddg :=_gce *_ad .Width ;_fgg :=_gce *_ad .Height ;_gb :=New (_ddg ,_fgg );var _ee error ;switch _gce {case 2:_ee =_ef (_gb ,_ad );case 4:_ee =_ggc (_gb ,_ad );case 8:_ee =_ae (_gb ,_ad );};if _ee !=nil {return nil ,_de .Wrap (_ee ,_df ,"");};return _gb ,nil ;
};type Color int ;func (_aab *Bitmap )clipRectangle (_cadg ,_cffa *_da .Rectangle )(_gga *Bitmap ,_cgda error ){const _ffa ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _cadg ==nil {return nil ,_de .Error (_ffa ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_bcb ,_ccf :=_aab .Width ,_aab .Height ;_ceee ,_cgda :=ClipBoxToRectangle (_cadg ,_bcb ,_ccf );if _cgda !=nil {_fa .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cgda );
return nil ,nil ;};_cef ,_aed :=_ceee .Min .X ,_ceee .Min .Y ;_ebed ,_ccd :=_ceee .Max .X -_ceee .Min .X ,_ceee .Max .Y -_ceee .Min .Y ;_gga =New (_ebed ,_ccd );_gga .Text =_aab .Text ;if _cgda =_gga .RasterOperation (0,0,_ebed ,_ccd ,PixSrc ,_aab ,_cef ,_aed );
_cgda !=nil {return nil ,_de .Wrap (_cgda ,_ffa ,"");};if _cffa !=nil {*_cffa =*_ceee ;};return _gga ,nil ;};func (_ecec Points )Get (i int )(Point ,error ){if i > len (_ecec )-1{return Point {},_de .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ecec [i ],nil ;};func (_ecc *Bitmap )addPadBits ()(_eee error ){const _abc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_bege :=_ecc .Width %8;if _bege ==0{return nil ;};_cec :=_ecc .Width /8;
_bbe :=_e .NewReader (_ecc .Data );_cgdg :=make ([]byte ,_ecc .Height *_ecc .RowStride );_ebg :=_e .NewWriterMSB (_cgdg );_baee :=make ([]byte ,_cec );var (_efg int ;_aegf uint64 ;);for _efg =0;_efg < _ecc .Height ;_efg ++{if _ ,_eee =_bbe .Read (_baee );
_eee !=nil {return _de .Wrap (_eee ,_abc ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_eee =_ebg .Write (_baee );_eee !=nil {return _de .Wrap (_eee ,_abc ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _aegf ,_eee =_bbe .ReadBits (byte (_bege ));
_eee !=nil {return _de .Wrap (_eee ,_abc ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _eee =_ebg .WriteByte (byte (_aegf )<<uint (8-_bege ));_eee !=nil {return _de .Wrap (_eee ,_abc ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_ecc .Data =_ebg .Data ();return nil ;};func _ffdbc (_eegec ,_egcg *Bitmap ,_fcaf ,_gbffg int )(_edef error ){const _dfgf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_eggb ,_egad ,_cgfeg ,_cdgf int ;
_gead ,_dbce ,_cbagb ,_feee ,_fded ,_fdcc ,_efdb byte ;);for _eggb =0;_eggb < _fcaf ;_eggb ++{_cgfeg =_eggb *_eegec .RowStride ;_cdgf =_eggb *_egcg .RowStride ;for _egad =0;_egad < _gbffg ;_egad ++{_gead ,_edef =_eegec .GetByte (_cgfeg +_egad );if _edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_dbce ,_edef =_egcg .GetByte (_cdgf +_egad );if _edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _eggb > 0{_cbagb ,_edef =_eegec .GetByte (_cgfeg -_eegec .RowStride +_egad );if _edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0069\u0020\u003e \u0030");
};_gead |=_cbagb ;};if _egad > 0{_feee ,_edef =_eegec .GetByte (_cgfeg +_egad -1);if _edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u006a\u0020\u003e \u0030");};_gead |=_feee <<7;};_gead &=_dbce ;if _gead ==0||(^_gead )==0{if _edef =_eegec .SetByte (_cgfeg +_egad ,_gead );
_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_efdb =_gead ;_gead =(_gead |(_gead >>1)|(_gead <<1))&_dbce ;if (_gead ^_efdb )==0{if _edef =_eegec .SetByte (_cgfeg +_egad ,_gead );
_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _eggb =_fcaf -1;_eggb >=0;_eggb --{_cgfeg =_eggb *_eegec .RowStride ;_cdgf =_eggb *_egcg .RowStride ;
for _egad =_gbffg -1;_egad >=0;_egad --{if _gead ,_edef =_eegec .GetByte (_cgfeg +_egad );_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _dbce ,_edef =_egcg .GetByte (_cdgf +_egad );
_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _eggb < _fcaf -1{if _fded ,_edef =_eegec .GetByte (_cgfeg +_eegec .RowStride +_egad );_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_gead |=_fded ;};if _egad < _gbffg -1{if _fdcc ,_edef =_eegec .GetByte (_cgfeg +_egad +1);_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_gead |=_fdcc >>7;
};_gead &=_dbce ;if _gead ==0||(^_gead )==0{if _edef =_eegec .SetByte (_cgfeg +_egad ,_gead );_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_efdb =_gead ;_gead =(_gead |(_gead >>1)|(_gead <<1))&_dbce ;if (_gead ^_efdb )==0{if _edef =_eegec .SetByte (_cgfeg +_egad ,_gead );_edef !=nil {return _de .Wrap (_edef ,_dfgf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _cddc (_dfff uint ,_eaeb byte )byte {return _eaeb >>_dfff <<_dfff };const _cggg =5000;type Points []Point ;type shift int ;func (_fabcc *ClassedPoints )SortByY (){_fabcc ._dcgd =_fabcc .ySortFunction ();_bbc .Sort (_fabcc )};
func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _fecag ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cac ,_bcbf :=p1 .Width ,p1 .Height ;_bgcf ,_beb :=p3 .Width ,p3 .Height ;if _fd .Abs (_cac -_bgcf )> maxDiffW {return false ,nil ;
};if _fd .Abs (_bcbf -_beb )> maxDiffH {return false ,nil ;};_dfge :=int (delX +_fd .Sign (delX )*0.5);_cbfa :=int (delY +_fd .Sign (delY )*0.5);var _bage error ;_feac :=p1 .CreateTemplate ();if _bage =_feac .RasterOperation (0,0,_cac ,_bcbf ,PixSrc ,p1 ,0,0);
_bage !=nil {return false ,_de .Wrap (_bage ,_fecag ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bage =_feac .RasterOperation (_dfge ,_cbfa ,_cac ,_bcbf ,PixNotSrcAndDst ,p4 ,0,0);_bage !=nil {return false ,_de .Wrap (_bage ,_fecag ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _feac .Zero (){return false ,nil ;};if _bage =_feac .RasterOperation (_dfge ,_cbfa ,_bgcf ,_beb ,PixSrc ,p3 ,0,0);_bage !=nil {return false ,_de .Wrap (_bage ,_fecag ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bage =_feac .RasterOperation (0,0,_bgcf ,_beb ,PixNotSrcAndDst ,p2 ,0,0);
_bage !=nil {return false ,_de .Wrap (_bage ,_fecag ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _feac .Zero (),nil ;};func (_degd *Bitmap )setEightFullBytes (_fcag int ,_ecff uint64 )error {if _fcag +7> len (_degd .Data )-1{return _de .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_degd .Data [_fcag ]=byte ((_ecff &0xff00000000000000)>>56);_degd .Data [_fcag +1]=byte ((_ecff &0xff000000000000)>>48);_degd .Data [_fcag +2]=byte ((_ecff &0xff0000000000)>>40);_degd .Data [_fcag +3]=byte ((_ecff &0xff00000000)>>32);_degd .Data [_fcag +4]=byte ((_ecff &0xff000000)>>24);
_degd .Data [_fcag +5]=byte ((_ecff &0xff0000)>>16);_degd .Data [_fcag +6]=byte ((_ecff &0xff00)>>8);_degd .Data [_fcag +7]=byte (_ecff &0xff);return nil ;};var _cfe [256]uint8 ;func (_daed *Bitmaps )GetBox (i int )(*_da .Rectangle ,error ){const _cfcc ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _daed ==nil {return nil ,_de .Error (_cfcc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_daed .Boxes )-1{return nil ,_de .Errorf (_cfcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _daed .Boxes [i ],nil ;};type Getter interface{GetBitmap ()*Bitmap ;};type Boxes []*_da .Rectangle ;func (_fbd *Bitmap )setTwoBytes (_aedb int ,_egae uint16 )error {if _aedb +1> len (_fbd .Data )-1{return _de .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_aedb );
};_fbd .Data [_aedb ]=byte ((_egae &0xff00)>>8);_fbd .Data [_aedb +1]=byte (_egae &0xff);return nil ;};func _dgf ()(_cd [256]uint16 ){for _fbc :=0;_fbc < 256;_fbc ++{if _fbc &0x01!=0{_cd [_fbc ]|=0x3;};if _fbc &0x02!=0{_cd [_fbc ]|=0xc;};if _fbc &0x04!=0{_cd [_fbc ]|=0x30;
};if _fbc &0x08!=0{_cd [_fbc ]|=0xc0;};if _fbc &0x10!=0{_cd [_fbc ]|=0x300;};if _fbc &0x20!=0{_cd [_fbc ]|=0xc00;};if _fbc &0x40!=0{_cd [_fbc ]|=0x3000;};if _fbc &0x80!=0{_cd [_fbc ]|=0xc000;};};return _cd ;};func TstPSymbol (t *_b .T )*Bitmap {t .Helper ();
_ddee :=New (5,8);_f .NoError (t ,_ddee .SetPixel (0,0,1));_f .NoError (t ,_ddee .SetPixel (1,0,1));_f .NoError (t ,_ddee .SetPixel (2,0,1));_f .NoError (t ,_ddee .SetPixel (3,0,1));_f .NoError (t ,_ddee .SetPixel (4,1,1));_f .NoError (t ,_ddee .SetPixel (0,1,1));
_f .NoError (t ,_ddee .SetPixel (4,2,1));_f .NoError (t ,_ddee .SetPixel (0,2,1));_f .NoError (t ,_ddee .SetPixel (4,3,1));_f .NoError (t ,_ddee .SetPixel (0,3,1));_f .NoError (t ,_ddee .SetPixel (0,4,1));_f .NoError (t ,_ddee .SetPixel (1,4,1));_f .NoError (t ,_ddee .SetPixel (2,4,1));
_f .NoError (t ,_ddee .SetPixel (3,4,1));_f .NoError (t ,_ddee .SetPixel (0,5,1));_f .NoError (t ,_ddee .SetPixel (0,6,1));_f .NoError (t ,_ddee .SetPixel (0,7,1));return _ddee ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};type SizeComparison int ;
func New (width ,height int )*Bitmap {_gda :=_gab (width ,height );_gda .Data =make ([]byte ,height *_gda .RowStride );return _gda ;};func (_aec *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_bfff *Boxes )Get (i int )(*_da .Rectangle ,error ){const _cdf ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _bfff ==nil {return nil ,_de .Error (_cdf ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_bfff )-1{return nil ,_de .Errorf (_cdf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_bfff )[i ],nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func MakePixelSumTab8 ()[]int {return _gbfg ()};func _gged (_bbfa ,_egbg *Bitmap ,_cffgc ,_gbed int )(*Bitmap ,error ){const _efge ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _egbg ==nil {return nil ,_de .Error (_efge ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cffgc < 1&&_gbed < 1{return nil ,_de .Error (_efge ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _cffgc ==1&&_gbed ==1{return _egbg .Copy (),nil ;};if _cffgc ==1||_gbed ==1{var _cbbd error ;_aabc :=SelCreateBrick (_gbed ,_cffgc ,_gbed /2,_cffgc /2,SelHit );_bbfa ,_cbbd =_ecbb (_bbfa ,_egbg ,_aabc );if _cbbd !=nil {return nil ,_de .Wrap (_cbbd ,_efge ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bbfa ,nil ;};_gbfb :=SelCreateBrick (1,_cffgc ,0,_cffgc /2,SelHit );_gbcgd :=SelCreateBrick (_gbed ,1,_gbed /2,0,SelHit );_ebbf ,_eea :=_gafa (nil ,_egbg ,_gbfb );if _eea !=nil {return nil ,_de .Wrap (_eea ,_efge ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bbfa ,_eea =_gafa (_bbfa ,_ebbf ,_gbcgd );if _eea !=nil {return nil ,_de .Wrap (_eea ,_efge ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_eea =_cgec (_ebbf ,_bbfa ,_gbfb );if _eea !=nil {return nil ,_de .Wrap (_eea ,_efge ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_eea =_cgec (_bbfa ,_ebbf ,_gbcgd );if _eea !=nil {return nil ,_de .Wrap (_eea ,_efge ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bbfa ,nil ;};func _gab (_gae ,_fce int )*Bitmap {return &Bitmap {Width :_gae ,Height :_fce ,RowStride :(_gae +7)>>3};
};func (_fabd *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ebfabc *Boxes ,_efgb error ){const _eega ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _fabd ==nil {return nil ,_de .Error (_eega ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_fabd )==0{return _fabd ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_de .Errorf (_eega ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_de .Errorf (_eega ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_agdb :=_fabd .makeSizeIndicator (width ,height ,tp ,relation );_efc ,_efgb :=_fabd .selectWithIndicator (_agdb );if _efgb !=nil {return nil ,_de .Wrap (_efgb ,_eega ,"");};return _efc ,nil ;};func (_ebeb *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _bbfdc ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _ebeb ==nil {return nil ,_de .Error (_bbfdc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_ebeb .Values )-1{return nil ,_de .Errorf (_bbfdc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ebeb .Values [i ],nil ;};func (_fede *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _cbdca ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fede .IntSlice .Size (){return 0,_de .Errorf (_cbdca ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fede .XAtIndex (i )),nil ;};func _ecad (_ebbe *Bitmap ,_eebe *_fd .Stack ,_ecdc ,_baaa int )(_bbdc *_da .Rectangle ,_defce error ){const _aacg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ebbe ==nil {return nil ,_de .Error (_aacg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _eebe ==nil {return nil ,_de .Error (_aacg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_ggdcg ,_fabccf :=_ebbe .Width ,_ebbe .Height ;_cagd :=_ggdcg -1;_bdaae :=_fabccf -1;if _ecdc < 0||_ecdc > _cagd ||_baaa < 0||_baaa > _bdaae ||!_ebbe .GetPixel (_ecdc ,_baaa ){return nil ,nil ;
};var _dddg *_da .Rectangle ;_dddg ,_defce =Rect (100000,100000,0,0);if _defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"");};if _defce =_afef (_eebe ,_ecdc ,_ecdc ,_baaa ,1,_bdaae ,_dddg );_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _defce =_afef (_eebe ,_ecdc ,_ecdc ,_baaa +1,-1,_bdaae ,_dddg );_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_dddg .Min .X ,_dddg .Max .X =_ecdc ,_ecdc ;
_dddg .Min .Y ,_dddg .Max .Y =_baaa ,_baaa ;var (_gdaa *fillSegment ;_fbbf int ;);for _eebe .Len ()> 0{if _gdaa ,_defce =_fccb (_eebe );_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"");};_baaa =_gdaa ._befef ;for _ecdc =_gdaa ._ebcb ;_ecdc >=0&&_ebbe .GetPixel (_ecdc ,_baaa );
_ecdc --{if _defce =_ebbe .SetPixel (_ecdc ,_baaa ,0);_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"");};};if _ecdc >=_gdaa ._ebcb {for _ecdc ++;_ecdc <=_gdaa ._fgffe &&_ecdc <=_cagd &&!_ebbe .GetPixel (_ecdc ,_baaa );_ecdc ++{};_fbbf =_ecdc ;if !(_ecdc <=_gdaa ._fgffe &&_ecdc <=_cagd ){continue ;
};}else {_fbbf =_ecdc +1;if _fbbf < _gdaa ._ebcb -1{if _defce =_afef (_eebe ,_fbbf ,_gdaa ._ebcb -1,_gdaa ._befef ,-_gdaa ._fgbe ,_bdaae ,_dddg );_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ecdc =_gdaa ._ebcb +1;};for {for ;_ecdc <=_cagd &&_ebbe .GetPixel (_ecdc ,_baaa );_ecdc ++{if _defce =_ebbe .SetPixel (_ecdc ,_baaa ,0);_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _defce =_afef (_eebe ,_fbbf ,_ecdc -1,_gdaa ._befef ,_gdaa ._fgbe ,_bdaae ,_dddg );
_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ecdc > _gdaa ._fgffe +1{if _defce =_afef (_eebe ,_gdaa ._fgffe +1,_ecdc -1,_gdaa ._befef ,-_gdaa ._fgbe ,_bdaae ,_dddg );_defce !=nil {return nil ,_de .Wrap (_defce ,_aacg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ecdc ++;_ecdc <=_gdaa ._fgffe &&_ecdc <=_cagd &&!_ebbe .GetPixel (_ecdc ,_baaa );_ecdc ++{};_fbbf =_ecdc ;if !(_ecdc <=_gdaa ._fgffe &&_ecdc <=_cagd ){break ;};};};_dddg .Max .X ++;_dddg .Max .Y ++;return _dddg ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_ecg bool ,_cfga error ){const _addf ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_gfa ,_bbadc :=p1 .Width ,p1 .Height ;_cge ,_bfca :=p3 .Width ,p3 .Height ;if _fd .Abs (_gfa -_cge )> maxDiffW {return false ,nil ;};if _fd .Abs (_bbadc -_bfca )> maxDiffH {return false ,nil ;};_ecga :=int (float32 (area1 )*(1.0-rank )+0.5);_ebce :=int (float32 (area3 )*(1.0-rank )+0.5);
var _cdec ,_dbac int ;if delX >=0{_cdec =int (delX +0.5);}else {_cdec =int (delX -0.5);};if delY >=0{_dbac =int (delY +0.5);}else {_dbac =int (delY -0.5);};_bgaf :=p1 .CreateTemplate ();if _cfga =_bgaf .RasterOperation (0,0,_gfa ,_bbadc ,PixSrc ,p1 ,0,0);
_cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cfga =_bgaf .RasterOperation (_cdec ,_dbac ,_gfa ,_bbadc ,PixNotSrcAndDst ,p4 ,0,0);_cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_ecg ,_cfga =_bgaf .ThresholdPixelSum (_ecga ,tab8 );if _cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _ecg {return false ,nil ;};if _cfga =_bgaf .RasterOperation (_cdec ,_dbac ,_cge ,_bfca ,PixSrc ,p3 ,0,0);
_cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cfga =_bgaf .RasterOperation (0,0,_cge ,_bfca ,PixNotSrcAndDst ,p2 ,0,0);_cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_ecg ,_cfga =_bgaf .ThresholdPixelSum (_ebce ,tab8 );if _cfga !=nil {return false ,_de .Wrap (_cfga ,_addf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_ecg ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_fbcf :=make ([]Point ,len (bms ));
_edbeg :=_ceff ();_agcgc :=_gbfg ();var _ebaed error ;for _ggfc ,_agcd :=range bms {_fbcf [_ggfc ],_ebaed =_agcd .centroid (_edbeg ,_agcgc );if _ebaed !=nil {return nil ,_ebaed ;};};_cdff :=Points (_fbcf );return &_cdff ,nil ;};func (_ccgd *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ccgc (_ccgd ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_cbad *ClassedPoints )XAtIndex (i int )float32 {return (*_cbad .Points )[_cbad .IntSlice [i ]].X };func _bba ()(_ggg [256]uint64 ){for _gd :=0;_gd < 256;_gd ++{if _gd &0x01!=0{_ggg [_gd ]|=0xff;};if _gd &0x02!=0{_ggg [_gd ]|=0xff00;};if _gd &0x04!=0{_ggg [_gd ]|=0xff0000;
};if _gd &0x08!=0{_ggg [_gd ]|=0xff000000;};if _gd &0x10!=0{_ggg [_gd ]|=0xff00000000;};if _gd &0x20!=0{_ggg [_gd ]|=0xff0000000000;};if _gd &0x40!=0{_ggg [_gd ]|=0xff000000000000;};if _gd &0x80!=0{_ggg [_gd ]|=0xff00000000000000;};};return _ggg ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bdaa float64 ,_eedg error ){const _bggd ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _bdaa ,_de .Error (_bggd ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bdaa ,_de .Error (_bggd ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _bdaa ,_de .Error (_bggd ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_afbb ,_bcbd :=bm1 .Width ,bm1 .Height ;_gcbf ,_eebg :=bm2 .Width ,bm2 .Height ;
if _fadd (_afbb -_gcbf )> maxDiffW {return 0,nil ;};if _fadd (_bcbd -_eebg )> maxDiffH {return 0,nil ;};var _aadd ,_aaba int ;if delX >=0{_aadd =int (delX +0.5);}else {_aadd =int (delX -0.5);};if delY >=0{_aaba =int (delY +0.5);}else {_aaba =int (delY -0.5);
};_bgae :=bm1 .createTemplate ();if _eedg =_bgae .RasterOperation (_aadd ,_aaba ,_gcbf ,_eebg ,PixSrc ,bm2 ,0,0);_eedg !=nil {return _bdaa ,_de .Wrap (_eedg ,_bggd ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _eedg =_bgae .RasterOperation (0,0,_afbb ,_bcbd ,PixSrcAndDst ,bm1 ,0,0);
_eedg !=nil {return _bdaa ,_de .Wrap (_eedg ,_bggd ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_fcfd :=_bgae .countPixels ();_bdaa =float64 (_fcfd )*float64 (_fcfd )/(float64 (area1 )*float64 (area2 ));return _bdaa ,nil ;};func (_agce *Bitmap )setBit (_cagf int ){_agce .Data [(_cagf >>3)]|=0x80>>uint (_cagf &7)};
func (_dgcc *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _edac ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_dgcc .IntSlice .Size (){return 0,_de .Errorf (_edac ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dgcc .YAtIndex (i )),nil ;};type ClassedPoints struct{*Points ;_fd .IntSlice ;_dcgd func (_eabg ,_eacd int )bool ;};func (_cddcc MorphProcess )getWidthHeight ()(_gfdd ,_effc int ){return _cddcc .Arguments [0],_cddcc .Arguments [1];};func (_ggb *Bitmap )Copy ()*Bitmap {_dca :=make ([]byte ,len (_ggb .Data ));
copy (_dca ,_ggb .Data );return &Bitmap {Width :_ggb .Width ,Height :_ggb .Height ,RowStride :_ggb .RowStride ,Data :_dca ,Color :_ggb .Color ,Text :_ggb .Text ,BitmapNumber :_ggb .BitmapNumber ,Special :_ggb .Special };};func (_eac *Bitmap )SetByte (index int ,v byte )error {if index > len (_eac .Data )-1||index < 0{return _de .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_eac .Data [index ]=v ;return nil ;};func (_acdg *Bitmap )ClipRectangle (box *_da .Rectangle )(_ggf *Bitmap ,_geaa *_da .Rectangle ,_bde error ){const _agg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_de .Error (_agg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_eebc ,_gabf :=_acdg .Width ,_acdg .Height ;_cca :=_da .Rect (0,0,_eebc ,_gabf );if !box .Overlaps (_cca ){return nil ,nil ,_de .Error (_agg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_gdb :=box .Intersect (_cca );
_cbdf ,_agc :=_gdb .Min .X ,_gdb .Min .Y ;_agaf ,_fca :=_gdb .Dx (),_gdb .Dy ();_ggf =New (_agaf ,_fca );_ggf .Text =_acdg .Text ;if _bde =_ggf .RasterOperation (0,0,_agaf ,_fca ,PixSrc ,_acdg ,_cbdf ,_agc );_bde !=nil {return nil ,nil ,_de .Wrap (_bde ,_agg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_geaa =&_gdb ;return _ggf ,_geaa ,nil ;};func _cgec (_cfgc *Bitmap ,_eccb *Bitmap ,_fgffb *Selection )(*Bitmap ,error ){var (_gefa *Bitmap ;_dcde error ;);_cfgc ,_dcde =_dbfa (_cfgc ,_eccb ,_fgffb ,&_gefa );if _dcde !=nil {return nil ,_dcde ;};if _dcde =_cfgc .clearAll ();
_dcde !=nil {return nil ,_dcde ;};var _ffge SelectionValue ;for _fbgag :=0;_fbgag < _fgffb .Height ;_fbgag ++{for _cgecf :=0;_cgecf < _fgffb .Width ;_cgecf ++{_ffge =_fgffb .Data [_fbgag ][_cgecf ];if _ffge ==SelHit {if _dcde =_cfgc .RasterOperation (_cgecf -_fgffb .Cx ,_fbgag -_fgffb .Cy ,_eccb .Width ,_eccb .Height ,PixSrcOrDst ,_gefa ,0,0);
_dcde !=nil {return nil ,_dcde ;};};};};return _cfgc ,nil ;};func _abda (_efef ...MorphProcess )(_eegc error ){const _gaegf ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _aeda ,_gfeg int ;for _fdcga ,_gbeg :=range _efef {if _eegc =_gbeg .verify (_fdcga ,&_aeda ,&_gfeg );
_eegc !=nil {return _de .Wrap (_eegc ,_gaegf ,"");};};if _gfeg !=0&&_aeda !=0{return _de .Error (_gaegf ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};var (_bcef *Bitmap ;_feag *Bitmap ;);func _dgec (_dbcf ,_dffae *Bitmap ,_ddb ,_cda ,_egcd ,_cbee ,_addg int ,_afbf CombinationOperator )error {var _bbda int ;_ccae :=func (){_bbda ++;_egcd +=_dffae .RowStride ;_cbee +=_dbcf .RowStride ;
_addg +=_dbcf .RowStride };for _bbda =_ddb ;_bbda < _cda ;_ccae (){_efec :=_egcd ;for _def :=_cbee ;_def <=_addg ;_def ++{_adef ,_agefg :=_dffae .GetByte (_efec );if _agefg !=nil {return _agefg ;};_gdfe ,_agefg :=_dbcf .GetByte (_def );if _agefg !=nil {return _agefg ;
};if _agefg =_dffae .SetByte (_efec ,_afa (_adef ,_gdfe ,_afbf ));_agefg !=nil {return _agefg ;};_efec ++;};};return nil ;};func _gbfgg (_gcabbd *Bitmap ,_bdbbb ,_eeebc ,_ebddd ,_baaf int ,_fdceg RasterOperator ,_gdbcc *Bitmap ,_ffdb ,_ebaede int )error {var (_dgea bool ;
_dacg bool ;_cced int ;_fbfe int ;_dbaaa int ;_eaee bool ;_dgab byte ;_gcba int ;_bbdg int ;_gecgc int ;_gcaae ,_fgfb int ;);_fbaf :=8-(_bdbbb &7);_acde :=_fcgf [_fbaf ];_bfba :=_gcabbd .RowStride *_eeebc +(_bdbbb >>3);_gdff :=_gdbcc .RowStride *_ebaede +(_ffdb >>3);
if _ebddd < _fbaf {_dgea =true ;_acde &=_ggee [8-_fbaf +_ebddd ];};if !_dgea {_cced =(_ebddd -_fbaf )>>3;if _cced > 0{_dacg =true ;_fbfe =_bfba +1;_dbaaa =_gdff +1;};};_gcba =(_bdbbb +_ebddd )&7;if !(_dgea ||_gcba ==0){_eaee =true ;_dgab =_ggee [_gcba ];
_bbdg =_bfba +1+_cced ;_gecgc =_gdff +1+_cced ;};switch _fdceg {case PixSrc :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ],_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;
};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ],_dgab );
_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotSrc :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^_gdbcc .Data [_gdff ],_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;
};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=^_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;
_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^_gdbcc .Data [_gecgc ],_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixSrcOrDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ]|_gcabbd .Data [_bfba ],_acde );
_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]|=_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;
};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ]|_gcabbd .Data [_bbdg ],_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixSrcAndDst :for _gcaae =0;
_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ]&_gcabbd .Data [_bfba ],_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;
_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]&=_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ]&_gcabbd .Data [_bbdg ],_dgab );
_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixSrcXorDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ]^_gcabbd .Data [_bfba ],_acde );_bfba +=_gcabbd .RowStride ;
_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]^=_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;
_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ]^_gcabbd .Data [_bbdg ],_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotSrcOrDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^(_gdbcc .Data [_gdff ])|_gcabbd .Data [_bfba ],_acde );
_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]|=^(_gdbcc .Data [_dbaaa +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;
};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^(_gdbcc .Data [_gecgc ])|_gcabbd .Data [_bbdg ],_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotSrcAndDst :for _gcaae =0;
_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^(_gdbcc .Data [_gdff ])&_gcabbd .Data [_bfba ],_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;
_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]&=^_gdbcc .Data [_dbaaa +_fgfb ];};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^(_gdbcc .Data [_gecgc ])&_gcabbd .Data [_bbdg ],_dgab );
_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixSrcOrNotDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ]|^(_gcabbd .Data [_bfba ]),_acde );_bfba +=_gcabbd .RowStride ;
_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=_gdbcc .Data [_dbaaa +_fgfb ]|^(_gcabbd .Data [_fbfe +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;
};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ]|^(_gcabbd .Data [_bbdg ]),_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixSrcAndNotDst :for _gcaae =0;
_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],_gdbcc .Data [_gdff ]&^(_gcabbd .Data [_bfba ]),_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;
_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=_gdbcc .Data [_dbaaa +_fgfb ]&^(_gcabbd .Data [_fbfe +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],_gdbcc .Data [_gecgc ]&^(_gcabbd .Data [_bbdg ]),_dgab );
_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotPixSrcOrDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^(_gdbcc .Data [_gdff ]|_gcabbd .Data [_bfba ]),_acde );_bfba +=_gcabbd .RowStride ;
_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=^(_gdbcc .Data [_dbaaa +_fgfb ]|_gcabbd .Data [_fbfe +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;
};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^(_gdbcc .Data [_gecgc ]|_gcabbd .Data [_bbdg ]),_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotPixSrcAndDst :for _gcaae =0;
_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^(_gdbcc .Data [_gdff ]&_gcabbd .Data [_bfba ]),_acde );_bfba +=_gcabbd .RowStride ;_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;
_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=^(_gdbcc .Data [_dbaaa +_fgfb ]&_gcabbd .Data [_fbfe +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^(_gdbcc .Data [_gecgc ]&_gcabbd .Data [_bbdg ]),_dgab );
_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};case PixNotPixSrcXorDst :for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bfba ]=_adaf (_gcabbd .Data [_bfba ],^(_gdbcc .Data [_gdff ]^_gcabbd .Data [_bfba ]),_acde );_bfba +=_gcabbd .RowStride ;
_gdff +=_gdbcc .RowStride ;};if _dacg {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{for _fgfb =0;_fgfb < _cced ;_fgfb ++{_gcabbd .Data [_fbfe +_fgfb ]=^(_gdbcc .Data [_dbaaa +_fgfb ]^_gcabbd .Data [_fbfe +_fgfb ]);};_fbfe +=_gcabbd .RowStride ;_dbaaa +=_gdbcc .RowStride ;
};};if _eaee {for _gcaae =0;_gcaae < _baaf ;_gcaae ++{_gcabbd .Data [_bbdg ]=_adaf (_gcabbd .Data [_bbdg ],^(_gdbcc .Data [_gecgc ]^_gcabbd .Data [_bbdg ]),_dgab );_bbdg +=_gcabbd .RowStride ;_gecgc +=_gdbcc .RowStride ;};};default:_fa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_fdceg );
return _de .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ccgc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_dgece *Selection )findMaxTranslations ()(_afdbe ,_gaaag ,_gagag ,_ecdf int ){for _ceag :=0;
_ceag < _dgece .Height ;_ceag ++{for _cabad :=0;_cabad < _dgece .Width ;_cabad ++{if _dgece .Data [_ceag ][_cabad ]==SelHit {_afdbe =_ceeg (_afdbe ,_dgece .Cx -_cabad );_gaaag =_ceeg (_gaaag ,_dgece .Cy -_ceag );_gagag =_ceeg (_gagag ,_cabad -_dgece .Cx );
_ecdf =_ceeg (_ecdf ,_ceag -_dgece .Cy );};};};return _afdbe ,_gaaag ,_gagag ,_ecdf ;};type CombinationOperator int ;const (_babcc shift =iota ;_gfcfa ;);func (_bddb *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _bgcg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _bddb ==nil {return nil ,_de .Error (_bgcg ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_de .Error (_bgcg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_eeca :=len (_bddb .Values );_dageg :=&Bitmaps {Values :make ([]*Bitmap ,_eeca ),Boxes :make ([]*_da .Rectangle ,_eeca )};var (_faddg ,_acceb *Bitmap ;_fceg *_da .Rectangle ;_bgcdc error ;);for _gggga :=0;_gggga < _eeca ;_gggga ++{if _faddg ,_bgcdc =_bddb .GetBitmap (_gggga );
_bgcdc !=nil {return nil ,_de .Wrap (_bgcdc ,_bgcg ,"");};if _fceg ,_bgcdc =_bddb .GetBox (_gggga );_bgcdc !=nil {return nil ,_de .Wrap (_bgcdc ,_bgcg ,"");};if _acceb ,_bgcdc =s .clipRectangle (_fceg ,nil );_bgcdc !=nil {return nil ,_de .Wrap (_bgcdc ,_bgcg ,"");
};if _acceb ,_bgcdc =_acceb .And (_faddg );_bgcdc !=nil {return nil ,_de .Wrap (_bgcdc ,_bgcg ,"");};_dageg .Values [_gggga ]=_acceb ;_dageg .Boxes [_gggga ]=_fceg ;};return _dageg ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;
Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func _gbfg ()[]int {_cfgf :=make ([]int ,256);for _dbag :=0;_dbag <=0xff;_dbag ++{_dbde :=byte (_dbag );_cfgf [_dbde ]=int (_dbde &0x1)+(int (_dbde >>1)&0x1)+(int (_dbde >>2)&0x1)+(int (_dbde >>3)&0x1)+(int (_dbde >>4)&0x1)+(int (_dbde >>5)&0x1)+(int (_dbde >>6)&0x1)+(int (_dbde >>7)&0x1);
};return _cfgf ;};func _aeff (_dded *Bitmap ,_fgga ,_cggfe int ,_cfgda ,_bdgb int ,_ceeef RasterOperator ){var (_fdbfe int ;_dgef byte ;_eebd ,_dfgea int ;_ddfe int ;);_afcd :=_cfgda >>3;_ccaa :=_cfgda &7;if _ccaa > 0{_dgef =_ggee [_ccaa ];};_fdbfe =_dded .RowStride *_cggfe +(_fgga >>3);
switch _ceeef {case PixClr :for _eebd =0;_eebd < _bdgb ;_eebd ++{_ddfe =_fdbfe +_eebd *_dded .RowStride ;for _dfgea =0;_dfgea < _afcd ;_dfgea ++{_dded .Data [_ddfe ]=0x0;_ddfe ++;};if _ccaa > 0{_dded .Data [_ddfe ]=_adaf (_dded .Data [_ddfe ],0x0,_dgef );
};};case PixSet :for _eebd =0;_eebd < _bdgb ;_eebd ++{_ddfe =_fdbfe +_eebd *_dded .RowStride ;for _dfgea =0;_dfgea < _afcd ;_dfgea ++{_dded .Data [_ddfe ]=0xff;_ddfe ++;};if _ccaa > 0{_dded .Data [_ddfe ]=_adaf (_dded .Data [_ddfe ],0xff,_dgef );};};case PixNotDst :for _eebd =0;
_eebd < _bdgb ;_eebd ++{_ddfe =_fdbfe +_eebd *_dded .RowStride ;for _dfgea =0;_dfgea < _afcd ;_dfgea ++{_dded .Data [_ddfe ]=^_dded .Data [_ddfe ];_ddfe ++;};if _ccaa > 0{_dded .Data [_ddfe ]=_adaf (_dded .Data [_ddfe ],^_dded .Data [_ddfe ],_dgef );};
};};};func (_ecac *Bitmap )Equals (s *Bitmap )bool {if len (_ecac .Data )!=len (s .Data )||_ecac .Width !=s .Width ||_ecac .Height !=s .Height {return false ;};for _beca :=0;_beca < _ecac .Height ;_beca ++{_bac :=_beca *_ecac .RowStride ;for _agbb :=0;
_agbb < _ecac .RowStride ;_agbb ++{if _ecac .Data [_bac +_agbb ]!=s .Data [_bac +_agbb ]{return false ;};};};return true ;};func (_acbc *Bitmap )GetChocolateData ()[]byte {if _acbc .Color ==Vanilla {_acbc .inverseData ();};return _acbc .Data ;};func _ecbb (_bcbfc ,_dadc *Bitmap ,_acgf *Selection )(*Bitmap ,error ){const _dgaa ="\u006f\u0070\u0065\u006e";
var _fae error ;_bcbfc ,_fae =_cebf (_bcbfc ,_dadc ,_acgf );if _fae !=nil {return nil ,_de .Wrap (_fae ,_dgaa ,"");};_bcag ,_fae :=_gafa (nil ,_dadc ,_acgf );if _fae !=nil {return nil ,_de .Wrap (_fae ,_dgaa ,"");};_ ,_fae =_cgec (_bcbfc ,_bcag ,_acgf );
if _fae !=nil {return nil ,_de .Wrap (_fae ,_dgaa ,"");};return _bcbfc ,nil ;};func (_bede *Bitmap )CreateTemplate ()*Bitmap {return _bede .createTemplate ()};func _faffe (_deecdd *Bitmap ,_begg ...MorphProcess )(_cabga *Bitmap ,_abbc error ){const _cgge ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _deecdd ==nil {return nil ,_de .Error (_cgge ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_begg )==0{return nil ,_de .Error (_cgge ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _abbc =_abda (_begg ...);
_abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};var _aedg ,_gbcgb ,_dabg int ;_cabga =_deecdd .Copy ();for _ ,_cffe :=range _begg {switch _cffe .Operation {case MopDilation :_aedg ,_gbcgb =_cffe .getWidthHeight ();_cabga ,_abbc =DilateBrick (nil ,_cabga ,_aedg ,_gbcgb );
if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};case MopErosion :_aedg ,_gbcgb =_cffe .getWidthHeight ();_cabga ,_abbc =_bdfc (nil ,_cabga ,_aedg ,_gbcgb );if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};case MopOpening :_aedg ,_gbcgb =_cffe .getWidthHeight ();
_cabga ,_abbc =_gged (nil ,_cabga ,_aedg ,_gbcgb );if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};case MopClosing :_aedg ,_gbcgb =_cffe .getWidthHeight ();_cabga ,_abbc =_bfbb (nil ,_cabga ,_aedg ,_gbcgb );if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");
};case MopRankBinaryReduction :_cabga ,_abbc =_geb (_cabga ,_cffe .Arguments ...);if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};case MopReplicativeBinaryExpansion :_cabga ,_abbc =_aacag (_cabga ,_cffe .Arguments [0]);if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");
};case MopAddBorder :_dabg =_cffe .Arguments [0];_cabga ,_abbc =_cabga .AddBorder (_dabg ,0);if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"");};default:return nil ,_de .Error (_cgge ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _dabg > 0{_cabga ,_abbc =_cabga .RemoveBorder (_dabg );if _abbc !=nil {return nil ,_de .Wrap (_abbc ,_cgge ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cabga ,nil ;};func (_bcf *Bitmap )String ()string {var _gggc ="\u000a";
for _eafcg :=0;_eafcg < _bcf .Height ;_eafcg ++{var _feae string ;for _agef :=0;_agef < _bcf .Width ;_agef ++{_bae :=_bcf .GetPixel (_agef ,_eafcg );if _bae {_feae +="\u0031";}else {_feae +="\u0030";};};_gggc +=_feae +"\u000a";};return _gggc ;};func TstImageBitmapData ()[]byte {return _feag .Data };
func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _dgff ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_bbf :=_gab (width ,height );_bbf .Data =data ;if len (data )< height *_bbf .RowStride {return nil ,_de .Errorf (_dgff ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_bbf .RowStride );
};return _bbf ,nil ;};func (_eddb *byHeight )Len ()int {return len (_eddb .Values )};func (_fcad *Boxes )selectWithIndicator (_bdbg *_fd .NumSlice )(_gbde *Boxes ,_fffe error ){const _adgbb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fcad ==nil {return nil ,_de .Error (_adgbb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _bdbg ==nil {return nil ,_de .Error (_adgbb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_bdbg )!=len (*_fcad ){return nil ,_de .Error (_adgbb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ccac ,_gdba int ;for _fdbf :=0;_fdbf < len (*_bdbg );_fdbf ++{if _ccac ,_fffe =_bdbg .GetInt (_fdbf );_fffe !=nil {return nil ,_de .Wrap (_fffe ,_adgbb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ccac ==1{_gdba ++;
};};if _gdba ==len (*_fcad ){return _fcad ,nil ;};_bfde :=Boxes {};for _ddbd :=0;_ddbd < len (*_bdbg );_ddbd ++{_ccac =int ((*_bdbg )[_ddbd ]);if _ccac ==0{continue ;};_bfde =append (_bfde ,(*_fcad )[_ddbd ]);};_gbde =&_bfde ;return _gbde ,nil ;};func _aeg (_cga *Bitmap ,_eae int ,_eag []byte )(_dff *Bitmap ,_bdb error ){const _cfd ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _cga ==nil {return nil ,_de .Error (_cfd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _eae < 1||_eae > 4{return nil ,_de .Error (_cfd ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _cga .Height <=1{return nil ,_de .Errorf (_cfd ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cga .Height );
};_dff =New (_cga .Width /2,_cga .Height /2);if _eag ==nil {_eag =_gdg ();};_fgc :=_fcc (_cga .RowStride ,2*_dff .RowStride );switch _eae {case 1:_bdb =_ccg (_cga ,_dff ,_eae ,_eag ,_fgc );case 2:_bdb =_dc (_cga ,_dff ,_eae ,_eag ,_fgc );case 3:_bdb =_cfda (_cga ,_dff ,_eae ,_eag ,_fgc );
case 4:_bdb =_baf (_cga ,_dff ,_eae ,_eag ,_fgc );};if _bdb !=nil {return nil ,_bdb ;};return _dff ,nil ;};func _bbfc (_afcf *Bitmap ,_ccbec *Bitmap ,_gacbg int )(_dddc error ){const _bdba ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_gad :=_fcc (_afcf .Height ,_ccbec .Height );_dbea :=_fcc (_afcf .RowStride ,_ccbec .RowStride );switch _gacbg {case 4:_dddc =_ffdbc (_afcf ,_ccbec ,_gad ,_dbea );case 8:_dddc =_bcce (_afcf ,_ccbec ,_gad ,_dbea );default:return _de .Errorf (_bdba ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_gacbg );
};if _dddc !=nil {return _de .Wrap (_dddc ,_bdba ,"");};return nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _afa (oldByte ,newByte ,op );};func Extract (roi _da .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ebgd :=New (roi .Dx (),roi .Dy ());
_cgdd :=roi .Min .X &0x07;_gba :=8-_cgdd ;_adb :=uint (8-_ebgd .Width &0x07);_gabff :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_gbcc :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fecd :=_ebgd .RowStride ==_gbcc +1-_gabff ;var _gfff int ;for _dege :=roi .Min .Y ;
_dege < roi .Max .Y ;_dege ++{_aggf :=_gabff ;_baba :=_gfff ;switch {case _gabff ==_gbcc :_gdbaa ,_ecaef :=src .GetByte (_aggf );if _ecaef !=nil {return nil ,_ecaef ;};_gdbaa <<=uint (_cgdd );_ecaef =_ebgd .SetByte (_baba ,_cddc (_adb ,_gdbaa ));if _ecaef !=nil {return nil ,_ecaef ;
};case _cgdd ==0:for _dcdff :=_gabff ;_dcdff <=_gbcc ;_dcdff ++{_bgg ,_cbfc :=src .GetByte (_aggf );if _cbfc !=nil {return nil ,_cbfc ;};_aggf ++;if _dcdff ==_gbcc &&_fecd {_bgg =_cddc (_adb ,_bgg );};_cbfc =_ebgd .SetByte (_baba ,_bgg );if _cbfc !=nil {return nil ,_cbfc ;
};_baba ++;};default:_ebae :=_gdgf (src ,_ebgd ,uint (_cgdd ),uint (_gba ),_adb ,_gabff ,_gbcc ,_fecd ,_aggf ,_baba );if _ebae !=nil {return nil ,_ebae ;};};_gabff +=src .RowStride ;_gbcc +=src .RowStride ;_gfff +=_ebgd .RowStride ;};return _ebgd ,nil ;
};func (_fead *Boxes )Add (box *_da .Rectangle )error {if _fead ==nil {return _de .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_fead =append (*_fead ,box );
return nil ;};func _ceeg (_fcfa ,_bdbb int )int {if _fcfa > _bdbb {return _fcfa ;};return _bdbb ;};func (_ceg *Bitmaps )WidthSorter ()func (_decb ,_aefd int )bool {return func (_gdag ,_ffdd int )bool {return _ceg .Values [_gdag ].Width < _ceg .Values [_ffdd ].Width };
};func _afc (_faa *Bitmap ,_abd ,_ac int )(*Bitmap ,error ){const _abde ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _faa ==nil {return nil ,_de .Error (_abde ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abd <=0||_ac <=0{return nil ,_de .Error (_abde ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _abd ==_ac {if _abd ==1{_aga ,_ged :=_bafg (nil ,_faa );
if _ged !=nil {return nil ,_de .Wrap (_ged ,_abde ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _aga ,nil ;};if _abd ==2||_abd ==4||_abd ==8{_eaa ,_aa :=_eaf (_faa ,_abd );if _aa !=nil {return nil ,_de .Wrap (_aa ,_abde ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _eaa ,nil ;};};_cgd :=_abd *_faa .Width ;_eaff :=_ac *_faa .Height ;_db :=New (_cgd ,_eaff );_afd :=_db .RowStride ;var (_dfc ,_agf ,_bff ,_fgf ,_egg int ;_cbd byte ;_cgc error ;);for _agf =0;_agf < _faa .Height ;_agf ++{_dfc =_ac *_agf *_afd ;
for _bff =0;_bff < _faa .Width ;_bff ++{if _ead :=_faa .GetPixel (_bff ,_agf );_ead {_egg =_abd *_bff ;for _fgf =0;_fgf < _abd ;_fgf ++{_db .setBit (_dfc *8+_egg +_fgf );};};};for _fgf =1;_fgf < _ac ;_fgf ++{_faf :=_dfc +_fgf *_afd ;for _cbf :=0;_cbf < _afd ;
_cbf ++{if _cbd ,_cgc =_db .GetByte (_dfc +_cbf );_cgc !=nil {return nil ,_de .Wrapf (_cgc ,_abde ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_fgf );};if _cgc =_db .SetByte (_faf +_cbf ,_cbd );
_cgc !=nil {return nil ,_de .Wrap (_cgc ,_abde ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _db ,nil ;};func (_gdde *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cbed *Boxes ,_gcac error ){const _deee ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _gdde ==nil {return nil ,_de .Error (_deee ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_de .Error (_deee ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _cbed ,_gcac =_gdde .connComponentsBB (connectivity );_gcac !=nil {return nil ,_de .Wrap (_gcac ,_deee ,"");};}else {if _cbed ,_gcac =_gdde .connComponentsBitmapsBB (bms ,connectivity );_gcac !=nil {return nil ,_de .Wrap (_gcac ,_deee ,"");
};};return _cbed ,nil ;};func _bfbb (_fcca ,_gfba *Bitmap ,_cgeb ,_fcef int )(*Bitmap ,error ){const _ggbg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _gfba ==nil {return nil ,_de .Error (_ggbg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cgeb < 1||_fcef < 1{return nil ,_de .Error (_ggbg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _cgeb ==1&&_fcef ==1{return _bafg (_fcca ,_gfba );};
if MorphBC ==SymmetricMorphBC {_aafe ,_efcg :=_cgbf (_fcca ,_gfba ,_cgeb ,_fcef );if _efcg !=nil {return nil ,_de .Wrap (_efcg ,_ggbg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _aafe ,nil ;};_acdgd :=_ceeg (_cgeb /2,_fcef /2);
_adee :=8*((_acdgd +7)/8);_gcaac ,_edbea :=_gfba .AddBorder (_adee ,0);if _edbea !=nil {return nil ,_de .Wrapf (_edbea ,_ggbg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_adee );};var _cbgb ,_ccdg *Bitmap ;if _cgeb ==1||_fcef ==1{_bdff :=SelCreateBrick (_fcef ,_cgeb ,_fcef /2,_cgeb /2,SelHit );
_cbgb ,_edbea =_fbdc (nil ,_gcaac ,_bdff );if _edbea !=nil {return nil ,_de .Wrap (_edbea ,_ggbg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_fbgd :=SelCreateBrick (1,_cgeb ,0,_cgeb /2,SelHit );
_eddg ,_abbd :=_cgec (nil ,_gcaac ,_fbgd );if _abbd !=nil {return nil ,_de .Wrap (_abbd ,_ggbg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_fbffb :=SelCreateBrick (_fcef ,1,_fcef /2,0,SelHit );
_cbgb ,_abbd =_cgec (nil ,_eddg ,_fbffb );if _abbd !=nil {return nil ,_de .Wrap (_abbd ,_ggbg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_abbd =_gafa (_eddg ,_cbgb ,_fbgd );
_abbd !=nil {return nil ,_de .Wrap (_abbd ,_ggbg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_abbd =_gafa (_cbgb ,_eddg ,_fbffb );_abbd !=nil {return nil ,_de .Wrap (_abbd ,_ggbg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _ccdg ,_edbea =_cbgb .RemoveBorder (_adee );_edbea !=nil {return nil ,_de .Wrap (_edbea ,_ggbg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fcca ==nil {return _ccdg ,nil ;};if _ ,_edbea =_bafg (_fcca ,_ccdg );_edbea !=nil {return nil ,_edbea ;
};return _fcca ,nil ;};func (_fbga *Bitmap )clearAll ()error {return _fbga .RasterOperation (0,0,_fbga .Width ,_fbga .Height ,PixClr ,nil ,0,0);};func TstESymbol (t *_b .T ,scale ...int )*Bitmap {_afec ,_eefd :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_f .NoError (t ,_eefd );return TstGetScaledSymbol (t ,_afec ,scale ...);};func TstImageBitmap ()*Bitmap {return _feag .Copy ()};type Bitmaps struct{Values []*Bitmap ;Boxes []*_da .Rectangle ;};func _gdbc (_gbdf ,_gbdb *Bitmap ,_dace ,_baa ,_cdc ,_dacd ,_fbcd ,_dacc ,_febg ,_edag int ,_eceb CombinationOperator )error {var _gebbb int ;
_cccg :=func (){_gebbb ++;_cdc +=_gbdb .RowStride ;_dacd +=_gbdf .RowStride ;_fbcd +=_gbdf .RowStride };for _gebbb =_dace ;_gebbb < _baa ;_cccg (){var _dafa uint16 ;_aged :=_cdc ;for _ggbc :=_dacd ;_ggbc <=_fbcd ;_ggbc ++{_gcagb ,_bfga :=_gbdb .GetByte (_aged );
if _bfga !=nil {return _bfga ;};_fgfeb ,_bfga :=_gbdf .GetByte (_ggbc );if _bfga !=nil {return _bfga ;};_dafa =(_dafa |uint16 (_fgfeb ))<<uint (_edag );_fgfeb =byte (_dafa >>8);if _ggbc ==_fbcd {_fgfeb =_cddc (uint (_dacc ),_fgfeb );};if _bfga =_gbdb .SetByte (_aged ,_afa (_gcagb ,_fgfeb ,_eceb ));
_bfga !=nil {return _bfga ;};_aged ++;_dafa <<=uint (_febg );};};return nil ;};func (_cdgc *Bitmaps )AddBox (box *_da .Rectangle ){_cdgc .Boxes =append (_cdgc .Boxes ,box )};func (_gdc *byWidth )Less (i ,j int )bool {return _gdc .Values [i ].Width < _gdc .Values [j ].Width };
var (_ggee =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fcgf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _gdbb (_fcfb ,_dadbd *Bitmap ,_faaf CombinationOperator )*Bitmap {_afdg :=New (_fcfb .Width ,_fcfb .Height );for _bgfd :=0;
_bgfd < len (_afdg .Data );_bgfd ++{_afdg .Data [_bgfd ]=_afa (_fcfb .Data [_bgfd ],_dadbd .Data [_bgfd ],_faaf );};return _afdg ;};func (_ggda *Bitmaps )SortByWidth (){_abbce :=(*byWidth )(_ggda );_bbc .Sort (_abbce )};func ClipBoxToRectangle (box *_da .Rectangle ,wi ,hi int )(_cagg *_da .Rectangle ,_dcef error ){const _fcadg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_de .Error (_fcadg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_de .Error (_fcadg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_aba :=*box ;_cagg =&_aba ;if _cagg .Min .X < 0{_cagg .Max .X +=_cagg .Min .X ;_cagg .Min .X =0;};if _cagg .Min .Y < 0{_cagg .Max .Y +=_cagg .Min .Y ;_cagg .Min .Y =0;};if _cagg .Max .X > wi {_cagg .Max .X =wi ;};if _cagg .Max .Y > hi {_cagg .Max .Y =hi ;
};return _cagg ,nil ;};func Rect (x ,y ,w ,h int )(*_da .Rectangle ,error ){const _deecd ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_de .Errorf (_deecd ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_de .Error (_deecd ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_cgba :=_da .Rect (x ,y ,x +w ,y +h );return &_cgba ,nil ;
};func (_fefe *Bitmap )setEightBytes (_bdbf int ,_fdbb uint64 )error {_gbd :=_fefe .RowStride -(_bdbf %_fefe .RowStride );if _fefe .RowStride !=_fefe .Width >>3{_gbd --;};if _gbd >=8{return _fefe .setEightFullBytes (_bdbf ,_fdbb );};return _fefe .setEightPartlyBytes (_bdbf ,_gbd ,_fdbb );
};func _fbdc (_gcabb ,_afe *Bitmap ,_gbgd *Selection )(*Bitmap ,error ){const _fbde ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _abba error ;if _gcabb ,_abba =_cebf (_gcabb ,_afe ,_gbgd );_abba !=nil {return nil ,_abba ;};_afff ,_abba :=_cgec (nil ,_afe ,_gbgd );
if _abba !=nil {return nil ,_de .Wrap (_abba ,_fbde ,"");};if _ ,_abba =_gafa (_gcabb ,_afff ,_gbgd );_abba !=nil {return nil ,_de .Wrap (_abba ,_fbde ,"");};return _gcabb ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _cbff (d ,s ,hSize ,vSize )};
func (_eeac *ClassedPoints )validateIntSlice ()error {const _ageg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_dgae :=range _eeac .IntSlice {if _dgae >=(_eeac .Points .Size ()){return _de .Errorf (_ageg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dgae ,_eeac .Points .Size ());
};};return nil ;};func (_cabf *Bitmap )countPixels ()int {var (_daba int ;_geef uint8 ;_ggeb byte ;_bga int ;);_fgaa :=_cabf .RowStride ;_cffc :=uint (_cabf .Width &0x07);if _cffc !=0{_geef =uint8 ((0xff<<(8-_cffc ))&0xff);_fgaa --;};for _fab :=0;_fab < _cabf .Height ;
_fab ++{for _bga =0;_bga < _fgaa ;_bga ++{_ggeb =_cabf .Data [_fab *_cabf .RowStride +_bga ];_daba +=int (_cfe [_ggeb ]);};if _cffc !=0{_daba +=int (_cfe [_cabf .Data [_fab *_cabf .RowStride +_bga ]&_geef ]);};};return _daba ;};func (_dgcg *Bitmap )SizesEqual (s *Bitmap )bool {if _dgcg ==s {return true ;
};if _dgcg .Width !=s .Width ||_dgcg .Height !=s .Height {return false ;};return true ;};func (_geed *Bitmap )CountPixels ()int {return _geed .countPixels ()};func (_afgdc *byWidth )Len ()int {return len (_afgdc .Values )};func TstFrameBitmap ()*Bitmap {return _bcef .Copy ()};
func _cfg (_fccf *Bitmap )(_abcc *Bitmap ,_dfde int ,_ecd error ){const _cdae ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _fccf ==nil {return nil ,0,_de .Errorf (_cdae ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _cbca ,_ggfb *Bitmap ;if _cbca ,_ecd =_bafg (nil ,_fccf );_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_ffbe [13]int ;_aef ,_ffcb int ;);_dacf :=12;_fdfd :=_fd .NewNumSlice (_dacf +1);
_gfbd :=_fd .NewNumSlice (_dacf +1);var _cabg *Boxes ;for _fbf :=0;_fbf <=_dacf ;_fbf ++{if _fbf ==0{if _ggfb ,_ecd =_bafg (nil ,_cbca );_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ggfb ,_ecd =_faffe (_cbca ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _cabg ,_ecd =_ggfb .connComponentsBB (4);_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"");};_ffbe [_fbf ]=len (*_cabg );
_fdfd .AddInt (_ffbe [_fbf ]);switch _fbf {case 0:_aef =_ffbe [0];default:_ffcb =_ffbe [_fbf -1]-_ffbe [_fbf ];_gfbd .AddInt (_ffcb );};_cbca =_ggfb ;};_eadb :=true ;_fgff :=2;var _gcab ,_ccff int ;for _bbcg :=1;_bbcg < len (*_gfbd );_bbcg ++{if _gcab ,_ecd =_fdfd .GetInt (_bbcg );
_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _eadb &&_gcab < int (0.3*float32 (_aef )){_fgff =_bbcg +1;_eadb =false ;};if _ffcb ,_ecd =_gfbd .GetInt (_bbcg );
_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _ffcb > _ccff {_ccff =_ffcb ;};};_dage :=_fccf .XResolution ;if _dage ==0{_dage =150;};if _dage > 110{_fgff ++;};if _fgff < 2{_fa .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_fgff =2;};_dfde =_fgff +1;if _abcc ,_ecd =_cgbf (nil ,_fccf ,_fgff +1,1);_ecd !=nil {return nil ,0,_de .Wrap (_ecd ,_cdae ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _abcc ,_dfde ,nil ;
};func (_fcfc *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _fcfc .addBorderGeneral (left ,right ,top ,bot ,val );};var _gdafa =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _feadb (_adfb *Bitmap ,_gfgge ,_gfaa ,_ccaec ,_acgb int ,_cccgd RasterOperator ){if _gfgge < 0{_ccaec +=_gfgge ;_gfgge =0;};_fbcca :=_gfgge +_ccaec -_adfb .Width ;if _fbcca > 0{_ccaec -=_fbcca ;};if _gfaa < 0{_acgb +=_gfaa ;_gfaa =0;};_feed :=_gfaa +_acgb -_adfb .Height ;
if _feed > 0{_acgb -=_feed ;};if _ccaec <=0||_acgb <=0{return ;};if (_gfgge &7)==0{_aeff (_adfb ,_gfgge ,_gfaa ,_ccaec ,_acgb ,_cccgd );}else {_gagd (_adfb ,_gfgge ,_gfaa ,_ccaec ,_acgb ,_cccgd );};};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _cfed ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_acg :=_gab (width ,height );_acg .Data =data ;if _aaf :=((width *height )+7)>>3;len (data )< _aaf {return nil ,_de .Errorf (_cfed ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_aaf );
};if _fed :=_acg .addPadBits ();_fed !=nil {return nil ,_de .Wrap (_fed ,_cfed ,"");};return _acg ,nil ;};func _geb (_gfb *Bitmap ,_dbd ...int )(_abff *Bitmap ,_gfd error ){const _ebe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _gfb ==nil {return nil ,_de .Error (_ebe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_dbd )==0||len (_dbd )> 4{return nil ,_de .Error (_ebe ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _dbd [0]<=0{_fa .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_abff ,_gfd =_bafg (nil ,_gfb );if _gfd !=nil {return nil ,_de .Wrap (_gfd ,_ebe ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _abff ,nil ;};_ebf :=_gdg ();_abff =_gfb ;for _adg ,_edf :=range _dbd {if _edf <=0{break ;};_abff ,_gfd =_aeg (_abff ,_edf ,_ebf );if _gfd !=nil {return nil ,_de .Wrapf (_gfd ,_ebe ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_adg );
};};return _abff ,nil ;};func (_gaaa *Bitmap )GetVanillaData ()[]byte {if _gaaa .Color ==Chocolate {_gaaa .inverseData ();};return _gaaa .Data ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_geece Points )GetIntX (i int )(int ,error ){if i >=len (_geece ){return 0,_de .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_geece [i ].X ),nil ;};func _dc (_eafc ,_bgc *Bitmap ,_fge int ,_eda []byte ,_ced int )(_cbg error ){const _acc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_ebef ,_fcf ,_efd ,_aag ,_dea ,_eeb ,_afcc ,_ada int ;_gff ,_ffc ,_aad ,_ec uint32 ;_dbdf ,_cag byte ;_bfc uint16 ;);_cdd :=make ([]byte ,4);_faff :=make ([]byte ,4);for _efd =0;_efd < _eafc .Height -1;_efd ,_aag =_efd +2,_aag +1{_ebef =_efd *_eafc .RowStride ;
_fcf =_aag *_bgc .RowStride ;for _dea ,_eeb =0,0;_dea < _ced ;_dea ,_eeb =_dea +4,_eeb +1{for _afcc =0;_afcc < 4;_afcc ++{_ada =_ebef +_dea +_afcc ;if _ada <=len (_eafc .Data )-1&&_ada < _ebef +_eafc .RowStride {_cdd [_afcc ]=_eafc .Data [_ada ];}else {_cdd [_afcc ]=0x00;
};_ada =_ebef +_eafc .RowStride +_dea +_afcc ;if _ada <=len (_eafc .Data )-1&&_ada < _ebef +(2*_eafc .RowStride ){_faff [_afcc ]=_eafc .Data [_ada ];}else {_faff [_afcc ]=0x00;};};_gff =_eb .BigEndian .Uint32 (_cdd );_ffc =_eb .BigEndian .Uint32 (_faff );
_aad =_gff &_ffc ;_aad |=_aad <<1;_ec =_gff |_ffc ;_ec &=_ec <<1;_ffc =_aad |_ec ;_ffc &=0xaaaaaaaa;_gff =_ffc |(_ffc <<7);_dbdf =byte (_gff >>24);_cag =byte ((_gff >>8)&0xff);_ada =_fcf +_eeb ;if _ada +1==len (_bgc .Data )-1||_ada +1>=_fcf +_bgc .RowStride {if _cbg =_bgc .SetByte (_ada ,_eda [_dbdf ]);
_cbg !=nil {return _de .Wrapf (_cbg ,_acc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ada );};}else {_bfc =(uint16 (_eda [_dbdf ])<<8)|uint16 (_eda [_cag ]);if _cbg =_bgc .setTwoBytes (_ada ,_bfc );_cbg !=nil {return _de .Wrapf (_cbg ,_acc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ada );
};_eeb ++;};};};return nil ;};func (_afcac *ClassedPoints )xSortFunction ()func (_dafac int ,_fgdc int )bool {return func (_cefb ,_dadcc int )bool {return _afcac .XAtIndex (_cefb )< _afcac .XAtIndex (_dadcc )};};func (_cgfd *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cbgf :=_cgfd .GetByteIndex (x ,y );
if _cbgf > len (_cgfd .Data )-1{return _de .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cbgf );};_dcc :=_cgfd .GetBitOffset (x );
_dgfc :=uint (7-_dcc );_fgd :=_cgfd .Data [_cbgf ];var _adc byte ;if pixel ==1{_adc =_fgd |(pixel &0x01<<_dgfc );}else {_adc =_fgd &^(1<<_dgfc );};_cgfd .Data [_cbgf ]=_adc ;return nil ;};func (_daaf *Bitmap )inverseData (){if _acee :=_daaf .RasterOperation (0,0,_daaf .Width ,_daaf .Height ,PixNotDst ,nil ,0,0);
_acee !=nil {_fa .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_acee );};if _daaf .Color ==Chocolate {_daaf .Color =Vanilla ;}else {_daaf .Color =Chocolate ;};};func TstWordBitmap (t *_b .T ,scale ...int )*Bitmap {_baff :=1;
if len (scale )> 0{_baff =scale [0];};_bfae :=3;_cbade :=9+7+15+2*_bfae ;_cbac :=5+_bfae +5;_caab :=New (_cbade *_baff ,_cbac *_baff );_gadc :=&Bitmaps {};var _degefc *int ;_bfae *=_baff ;_ggede :=0;_degefc =&_ggede ;_fbda :=0;_ccedf :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,_bfae );_ccedf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,_bfae );_ccedf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,0);*_degefc =0;_fbda =5*_baff +_bfae ;_ccedf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,_bfae );
_ccedf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );
_ccedf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,1*_baff );_ccedf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gadc ,_ccedf ,_degefc ,_fbda ,0);TstWriteSymbols (t ,_gadc ,_caab );return _caab ;};func (_fabca *BitmapsArray )GetBox (i int )(*_da .Rectangle ,error ){const _bgcb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _fabca ==nil {return nil ,_de .Error (_bgcb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fabca .Boxes )-1{return nil ,_de .Errorf (_bgcb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fabca .Boxes [i ],nil ;};func (_dgcf *Bitmap )equivalent (_gec *Bitmap )bool {if _dgcf ==_gec {return true ;};if !_dgcf .SizesEqual (_gec ){return false ;};_acccd :=_gdbb (_dgcf ,_gec ,CmbOpXor );_dge :=_dgcf .countPixels ();_ccag :=int (0.25*float32 (_dge ));
if _acccd .thresholdPixelSum (_ccag ){return false ;};var (_eba [9][9]int ;_afg [18][9]int ;_ebea [9][18]int ;_bgf int ;_fdf int ;);_fcbb :=9;_fcd :=_dgcf .Height /_fcbb ;_eab :=_dgcf .Width /_fcbb ;_afgd ,_dcg :=_fcd /2,_eab /2;if _fcd < _eab {_afgd =_eab /2;
_dcg =_fcd /2;};_afca :=float64 (_afgd )*float64 (_dcg )*_a .Pi ;_ecae :=int (float64 (_fcd *_eab /2)*0.9);_dffa :=int (float64 (_eab *_fcd /2)*0.9);for _bfd :=0;_bfd < _fcbb ;_bfd ++{_eaab :=_eab *_bfd +_bgf ;var _ace int ;if _bfd ==_fcbb -1{_bgf =0;_ace =_dgcf .Width ;
}else {_ace =_eaab +_eab ;if ((_dgcf .Width -_bgf )%_fcbb )> 0{_bgf ++;_ace ++;};};for _gffa :=0;_gffa < _fcbb ;_gffa ++{_gedb :=_fcd *_gffa +_fdf ;var _bbad int ;if _gffa ==_fcbb -1{_fdf =0;_bbad =_dgcf .Height ;}else {_bbad =_gedb +_fcd ;if (_dgcf .Height -_fdf )%_fcbb > 0{_fdf ++;
_bbad ++;};};var _cfee ,_aeb ,_ebfb ,_ecb int ;_abfd :=(_eaab +_ace )/2;_fegf :=(_gedb +_bbad )/2;for _gdbd :=_eaab ;_gdbd < _ace ;_gdbd ++{for _ega :=_gedb ;_ega < _bbad ;_ega ++{if _acccd .GetPixel (_gdbd ,_ega ){if _gdbd < _abfd {_cfee ++;}else {_aeb ++;
};if _ega < _fegf {_ecb ++;}else {_ebfb ++;};};};};_eba [_bfd ][_gffa ]=_cfee +_aeb ;_afg [_bfd *2][_gffa ]=_cfee ;_afg [_bfd *2+1][_gffa ]=_aeb ;_ebea [_bfd ][_gffa *2]=_ecb ;_ebea [_bfd ][_gffa *2+1]=_ebfb ;};};for _fac :=0;_fac < _fcbb *2-1;_fac ++{for _deec :=0;
_deec < (_fcbb -1);_deec ++{var _dbaf int ;for _gcd :=0;_gcd < 2;_gcd ++{for _fdce :=0;_fdce < 2;_fdce ++{_dbaf +=_afg [_fac +_gcd ][_deec +_fdce ];};};if _dbaf > _dffa {return false ;};};};for _gfbc :=0;_gfbc < (_fcbb -1);_gfbc ++{for _gcag :=0;_gcag < ((_fcbb *2)-1);
_gcag ++{var _edfe int ;for _ecf :=0;_ecf < 2;_ecf ++{for _dbc :=0;_dbc < 2;_dbc ++{_edfe +=_ebea [_gfbc +_ecf ][_gcag +_dbc ];};};if _edfe > _ecae {return false ;};};};for _gfc :=0;_gfc < (_fcbb -2);_gfc ++{for _afge :=0;_afge < (_fcbb -2);_afge ++{var _dadb ,_dga int ;
for _eaed :=0;_eaed < 3;_eaed ++{for _ffb :=0;_ffb < 3;_ffb ++{if _eaed ==_ffb {_dadb +=_eba [_gfc +_eaed ][_afge +_ffb ];};if (2-_eaed )==_ffb {_dga +=_eba [_gfc +_eaed ][_afge +_ffb ];};};};if _dadb > _dffa ||_dga > _dffa {return false ;};};};for _gac :=0;
_gac < (_fcbb -1);_gac ++{for _gfec :=0;_gfec < (_fcbb -1);_gfec ++{var _dec int ;for _agea :=0;_agea < 2;_agea ++{for _aced :=0;_aced < 2;_aced ++{_dec +=_eba [_gac +_agea ][_gfec +_aced ];};};if float64 (_dec )> _afca {return false ;};};};return true ;
};func (_fgae *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cbbf ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_bacf ,_gegd :=_fgae .selectByIndexes (idx );
if _gegd !=nil {return nil ,_de .Wrap (_gegd ,_cbbf ,"");};return _bacf ,nil ;};func _afef (_eedd *_fd .Stack ,_deeab ,_fbccd ,_eefb ,_aeba ,_eeeg int ,_afbc *_da .Rectangle )(_eaef error ){const _bdfcb ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _eedd ==nil {return _de .Error (_bdfcb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _afbc ==nil {return _de .Error (_bdfcb ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_afbc .Min .X =_fd .Min (_afbc .Min .X ,_deeab );_afbc .Max .X =_fd .Max (_afbc .Max .X ,_fbccd );_afbc .Min .Y =_fd .Min (_afbc .Min .Y ,_eefb );_afbc .Max .Y =_fd .Max (_afbc .Max .Y ,_eefb );if !(_eefb +_aeba >=0&&_eefb +_aeba <=_eeeg ){return nil ;
};if _eedd .Aux ==nil {return _de .Error (_bdfcb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _agdg *fillSegment ;_dcdb ,_bcgca :=_eedd .Aux .Pop ();if _bcgca {if _agdg ,_bcgca =_dcdb .(*fillSegment );
!_bcgca {return _de .Error (_bdfcb ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_agdg =&fillSegment {};
};_agdg ._ebcb =_deeab ;_agdg ._fgffe =_fbccd ;_agdg ._befef =_eefb ;_agdg ._fgbe =_aeba ;_eedd .Push (_agdg );return nil ;};func _agda (_cdeg *Bitmap ,_ffac ,_cggfa ,_eege ,_eefee int ,_cabd RasterOperator ,_bccc *Bitmap ,_bacg ,_eabgf int )error {var (_fcfdb bool ;
_dbdd bool ;_faafg byte ;_ebefa int ;_bcab int ;_gebd int ;_bbcd int ;_fgbg bool ;_gbff int ;_bfed int ;_fcee int ;_ffgg bool ;_eeed byte ;_fadg int ;_dcdgc int ;_fggg int ;_afbac byte ;_ecdee int ;_acfd int ;_cedg uint ;_dddd uint ;_egeb byte ;_ddddc shift ;
_deea bool ;_cbeb bool ;_ceca ,_fcdcf int ;);if _bacg &7!=0{_acfd =8-(_bacg &7);};if _ffac &7!=0{_bcab =8-(_ffac &7);};if _acfd ==0&&_bcab ==0{_egeb =_fcgf [0];}else {if _bcab > _acfd {_cedg =uint (_bcab -_acfd );}else {_cedg =uint (8-(_acfd -_bcab ));
};_dddd =8-_cedg ;_egeb =_fcgf [_cedg ];};if (_ffac &7)!=0{_fcfdb =true ;_ebefa =8-(_ffac &7);_faafg =_fcgf [_ebefa ];_gebd =_cdeg .RowStride *_cggfa +(_ffac >>3);_bbcd =_bccc .RowStride *_eabgf +(_bacg >>3);_ecdee =8-(_bacg &7);if _ebefa > _ecdee {_ddddc =_babcc ;
if _eege >=_acfd {_deea =true ;};}else {_ddddc =_gfcfa ;};};if _eege < _ebefa {_dbdd =true ;_faafg &=_ggee [8-_ebefa +_eege ];};if !_dbdd {_gbff =(_eege -_ebefa )>>3;if _gbff !=0{_fgbg =true ;_bfed =_cdeg .RowStride *_cggfa +((_ffac +_bcab )>>3);_fcee =_bccc .RowStride *_eabgf +((_bacg +_bcab )>>3);
};};_fadg =(_ffac +_eege )&7;if !(_dbdd ||_fadg ==0){_ffgg =true ;_eeed =_ggee [_fadg ];_dcdgc =_cdeg .RowStride *_cggfa +((_ffac +_bcab )>>3)+_gbff ;_fggg =_bccc .RowStride *_eabgf +((_bacg +_bcab )>>3)+_gbff ;if _fadg > int (_dddd ){_cbeb =true ;};};
switch _cabd {case PixSrc :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};
_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac ,_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );
_cdeg .Data [_bfed +_fcdcf ]=_afbac ;};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );
};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac ,_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixNotSrc :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^_afbac ,_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );
_cdeg .Data [_bfed +_fcdcf ]=^_afbac ;};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );
};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^_afbac ,_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixSrcOrDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac |_cdeg .Data [_gebd ],_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;
_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]|=_afbac ;};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;
_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac |_cdeg .Data [_dcdgc ],_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;
};};case PixSrcAndDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac &_cdeg .Data [_gebd ],_faafg );
_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]&=_afbac ;
};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac &_cdeg .Data [_dcdgc ],_eeed );
_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixSrcXorDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac ^_cdeg .Data [_gebd ],_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;
_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]^=_afbac ;};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;
_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac ^_cdeg .Data [_dcdgc ],_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;
};};case PixNotSrcOrDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^_afbac |_cdeg .Data [_gebd ],_faafg );
_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]|=^_afbac ;
};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^_afbac |_cdeg .Data [_dcdgc ],_eeed );
_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixNotSrcAndDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^_afbac &_cdeg .Data [_gebd ],_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;
_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]&=^_afbac ;};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;
_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^_afbac &_cdeg .Data [_dcdgc ],_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;
};};case PixSrcOrNotDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac |^_cdeg .Data [_gebd ],_faafg );
_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]=_afbac |^_cdeg .Data [_bfed +_fcdcf ];
};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac |^_cdeg .Data [_dcdgc ],_eeed );
_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixSrcAndNotDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],_afbac &^_cdeg .Data [_gebd ],_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;
_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]=_afbac &^_cdeg .Data [_bfed +_fcdcf ];};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;
_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],_afbac &^_cdeg .Data [_dcdgc ],_eeed );_dcdgc +=_cdeg .RowStride ;
_fggg +=_bccc .RowStride ;};};case PixNotPixSrcOrDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;
};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^(_afbac |_cdeg .Data [_gebd ]),_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );
_cdeg .Data [_bfed +_fcdcf ]=^(_afbac |_cdeg .Data [_bfed +_fcdcf ]);};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );
};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^(_afbac |_cdeg .Data [_dcdgc ]),_eeed );_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixNotPixSrcAndDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;
if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^(_afbac &_cdeg .Data [_gebd ]),_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;
};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]=^(_afbac &_cdeg .Data [_bfed +_fcdcf ]);
};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^(_afbac &_cdeg .Data [_dcdgc ]),_eeed );
_dcdgc +=_cdeg .RowStride ;_fggg +=_bccc .RowStride ;};};case PixNotPixSrcXorDst :if _fcfdb {for _ceca =0;_ceca < _eefee ;_ceca ++{if _ddddc ==_babcc {_afbac =_bccc .Data [_bbcd ]<<_cedg ;if _deea {_afbac =_adaf (_afbac ,_bccc .Data [_bbcd +1]>>_dddd ,_egeb );
};}else {_afbac =_bccc .Data [_bbcd ]>>_dddd ;};_cdeg .Data [_gebd ]=_adaf (_cdeg .Data [_gebd ],^(_afbac ^_cdeg .Data [_gebd ]),_faafg );_gebd +=_cdeg .RowStride ;_bbcd +=_bccc .RowStride ;};};if _fgbg {for _ceca =0;_ceca < _eefee ;_ceca ++{for _fcdcf =0;
_fcdcf < _gbff ;_fcdcf ++{_afbac =_adaf (_bccc .Data [_fcee +_fcdcf ]<<_cedg ,_bccc .Data [_fcee +_fcdcf +1]>>_dddd ,_egeb );_cdeg .Data [_bfed +_fcdcf ]=^(_afbac ^_cdeg .Data [_bfed +_fcdcf ]);};_bfed +=_cdeg .RowStride ;_fcee +=_bccc .RowStride ;};};
if _ffgg {for _ceca =0;_ceca < _eefee ;_ceca ++{_afbac =_bccc .Data [_fggg ]<<_cedg ;if _cbeb {_afbac =_adaf (_afbac ,_bccc .Data [_fggg +1]>>_dddd ,_egeb );};_cdeg .Data [_dcdgc ]=_adaf (_cdeg .Data [_dcdgc ],^(_afbac ^_cdeg .Data [_dcdgc ]),_eeed );_dcdgc +=_cdeg .RowStride ;
_fggg +=_bccc .RowStride ;};};default:_fa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cabd );return _de .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func _edde (_cfeee *Bitmap ,_efbe ,_eafff ,_gccf ,_abgb int ,_ccfe RasterOperator ,_dgcd *Bitmap ,_ddag ,_cdffd int )error {var (_efdc byte ;_cdee int ;_afae int ;_beaf ,_ccfa int ;_babc ,_cgbg int ;);_fggb :=_gccf >>3;_bgda :=_gccf &7;
if _bgda > 0{_efdc =_ggee [_bgda ];};_cdee =_dgcd .RowStride *_cdffd +(_ddag >>3);_afae =_cfeee .RowStride *_eafff +(_efbe >>3);switch _ccfe {case PixSrc :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;
for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=_dgcd .Data [_beaf ];_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ],_efdc );};};case PixNotSrc :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;
_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=^(_dgcd .Data [_beaf ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^_dgcd .Data [_beaf ],_efdc );};};case PixSrcOrDst :for _babc =0;
_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]|=_dgcd .Data [_beaf ];_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ]|_cfeee .Data [_ccfa ],_efdc );
};};case PixSrcAndDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]&=_dgcd .Data [_beaf ];_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ]&_cfeee .Data [_ccfa ],_efdc );
};};case PixSrcXorDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]^=_dgcd .Data [_beaf ];_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ]^_cfeee .Data [_ccfa ],_efdc );
};};case PixNotSrcOrDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]|=^(_dgcd .Data [_beaf ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^(_dgcd .Data [_beaf ])|_cfeee .Data [_ccfa ],_efdc );
};};case PixNotSrcAndDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]&=^(_dgcd .Data [_beaf ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^(_dgcd .Data [_beaf ])&_cfeee .Data [_ccfa ],_efdc );
};};case PixSrcOrNotDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=_dgcd .Data [_beaf ]|^(_cfeee .Data [_ccfa ]);_ccfa ++;
_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ]|^(_cfeee .Data [_ccfa ]),_efdc );};};case PixSrcAndNotDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;
for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=_dgcd .Data [_beaf ]&^(_cfeee .Data [_ccfa ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],_dgcd .Data [_beaf ]&^(_cfeee .Data [_ccfa ]),_efdc );};};case PixNotPixSrcOrDst :for _babc =0;
_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=^(_dgcd .Data [_beaf ]|_cfeee .Data [_ccfa ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^(_dgcd .Data [_beaf ]|_cfeee .Data [_ccfa ]),_efdc );
};};case PixNotPixSrcAndDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=^(_dgcd .Data [_beaf ]&_cfeee .Data [_ccfa ]);_ccfa ++;
_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^(_dgcd .Data [_beaf ]&_cfeee .Data [_ccfa ]),_efdc );};};case PixNotPixSrcXorDst :for _babc =0;_babc < _abgb ;_babc ++{_beaf =_cdee +_babc *_dgcd .RowStride ;_ccfa =_afae +_babc *_cfeee .RowStride ;
for _cgbg =0;_cgbg < _fggb ;_cgbg ++{_cfeee .Data [_ccfa ]=^(_dgcd .Data [_beaf ]^_cfeee .Data [_ccfa ]);_ccfa ++;_beaf ++;};if _bgda > 0{_cfeee .Data [_ccfa ]=_adaf (_cfeee .Data [_ccfa ],^(_dgcd .Data [_beaf ]^_cfeee .Data [_ccfa ]),_efdc );};};default:_fa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ccfe );
return _de .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};type SizeSelection int ;func (_bgce *Bitmap )GetByteIndex (x ,y int )int {return y *_bgce .RowStride +(x >>3)};func _baf (_dac ,_dbf *Bitmap ,_acd int ,_bbg []byte ,_fec int )(_bea error ){const _feg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ggd ,_ffg ,_ffga ,_cgae ,_dba ,_fga ,_beg ,_egde int ;_ddd ,_gee uint32 ;_bdgab ,_caa byte ;_fgcd uint16 ;);_edgc :=make ([]byte ,4);_abfa :=make ([]byte ,4);for _ffga =0;_ffga < _dac .Height -1;_ffga ,_cgae =_ffga +2,_cgae +1{_ggd =_ffga *_dac .RowStride ;
_ffg =_cgae *_dbf .RowStride ;for _dba ,_fga =0,0;_dba < _fec ;_dba ,_fga =_dba +4,_fga +1{for _beg =0;_beg < 4;_beg ++{_egde =_ggd +_dba +_beg ;if _egde <=len (_dac .Data )-1&&_egde < _ggd +_dac .RowStride {_edgc [_beg ]=_dac .Data [_egde ];}else {_edgc [_beg ]=0x00;
};_egde =_ggd +_dac .RowStride +_dba +_beg ;if _egde <=len (_dac .Data )-1&&_egde < _ggd +(2*_dac .RowStride ){_abfa [_beg ]=_dac .Data [_egde ];}else {_abfa [_beg ]=0x00;};};_ddd =_eb .BigEndian .Uint32 (_edgc );_gee =_eb .BigEndian .Uint32 (_abfa );_gee &=_ddd ;
_gee &=_gee <<1;_gee &=0xaaaaaaaa;_ddd =_gee |(_gee <<7);_bdgab =byte (_ddd >>24);_caa =byte ((_ddd >>8)&0xff);_egde =_ffg +_fga ;if _egde +1==len (_dbf .Data )-1||_egde +1>=_ffg +_dbf .RowStride {_dbf .Data [_egde ]=_bbg [_bdgab ];if _bea =_dbf .SetByte (_egde ,_bbg [_bdgab ]);
_bea !=nil {return _de .Wrapf (_bea ,_feg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_egde );};}else {_fgcd =(uint16 (_bbg [_bdgab ])<<8)|uint16 (_bbg [_caa ]);if _bea =_dbf .setTwoBytes (_egde ,_fgcd );_bea !=nil {return _de .Wrapf (_bea ,_feg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_egde );
};_fga ++;};};};return nil ;};func (_gcgf *ClassedPoints )Less (i ,j int )bool {return _gcgf ._dcgd (i ,j )};func _fcc (_ege ,_aggd int )int {if _ege < _aggd {return _ege ;};return _aggd ;};func (_bbed *Bitmaps )selectByIndicator (_gdbff *_fd .NumSlice )(_aecd *Bitmaps ,_dfe error ){const _gbccb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bbed ==nil {return nil ,_de .Error (_gbccb ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gdbff ==nil {return nil ,_de .Error (_gbccb ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_bbed .Values )==0{return _bbed ,nil ;};if len (*_gdbff )!=len (_bbed .Values ){return nil ,_de .Errorf (_gbccb ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gdbff ),len (_bbed .Values ));
};var _fdga ,_abfg ,_afda int ;for _abfg =0;_abfg < len (*_gdbff );_abfg ++{if _fdga ,_dfe =_gdbff .GetInt (_abfg );_dfe !=nil {return nil ,_de .Wrap (_dfe ,_gbccb ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fdga ==1{_afda ++;
};};if _afda ==len (_bbed .Values ){return _bbed ,nil ;};_aecd =&Bitmaps {};_bgfca :=len (_bbed .Values )==len (_bbed .Boxes );for _abfg =0;_abfg < len (*_gdbff );_abfg ++{if _fdga =int ((*_gdbff )[_abfg ]);_fdga ==0{continue ;};_aecd .Values =append (_aecd .Values ,_bbed .Values [_abfg ]);
if _bgfca {_aecd .Boxes =append (_aecd .Boxes ,_bbed .Boxes [_abfg ]);};};return _aecd ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};var MorphBC BoundaryCondition ;func TstWordBitmapWithSpaces (t *_b .T ,scale ...int )*Bitmap {_abgf :=1;
if len (scale )> 0{_abgf =scale [0];};_adge :=3;_cbabf :=9+7+15+2*_adge +2*_adge ;_faaeb :=5+_adge +5+2*_adge ;_bggc :=New (_cbabf *_abgf ,_faaeb *_abgf );_aeca :=&Bitmaps {};var _cbfcf *int ;_adge *=_abgf ;_gfad :=_adge ;_cbfcf =&_gfad ;_cgdab :=_adge ;
_cgaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,_adge );_cgaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );
_cgaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,_adge );_cgaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );
_cgaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,0);*_cbfcf =_adge ;_cgdab =5*_abgf +_adge ;_cgaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,_adge );
_cgaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );
_cgaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,1*_abgf );_cgaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aeca ,_cgaf ,_cbfcf ,_cgdab ,0);TstWriteSymbols (t ,_aeca ,_bggc );return _bggc ;};func _bcce (_bfffa ,_beec *Bitmap ,_fgcab ,_egbd int )(_gdfg error ){const _faca ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_bcgc ,_cbge ,_degfb ,_aebf int ;_agbf ,_gbgg ,_fafd ,_fged ,_ccec ,_afgde ,_cgedc ,_edegg byte ;);for _bcgc =0;_bcgc < _fgcab ;_bcgc ++{_degfb =_bcgc *_bfffa .RowStride ;_aebf =_bcgc *_beec .RowStride ;for _cbge =0;_cbge < _egbd ;_cbge ++{if _agbf ,_gdfg =_bfffa .GetByte (_degfb +_cbge );
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _gbgg ,_gdfg =_beec .GetByte (_aebf +_cbge );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _bcgc > 0{if _fafd ,_gdfg =_bfffa .GetByte (_degfb -_bfffa .RowStride +_cbge );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_agbf |=_fafd |(_fafd <<1)|(_fafd >>1);if _cbge > 0{if _edegg ,_gdfg =_bfffa .GetByte (_degfb -_bfffa .RowStride +_cbge -1);
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_agbf |=_edegg <<7;};if _cbge < _egbd -1{if _edegg ,_gdfg =_bfffa .GetByte (_degfb -_bfffa .RowStride +_cbge +1);
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_agbf |=_edegg >>7;};};if _cbge > 0{if _fged ,_gdfg =_bfffa .GetByte (_degfb +_cbge -1);_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u006a\u0020\u003e \u0030");
};_agbf |=_fged <<7;};_agbf &=_gbgg ;if _agbf ==0||^_agbf ==0{if _gdfg =_bfffa .SetByte (_degfb +_cbge ,_agbf );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};
for {_cgedc =_agbf ;_agbf =(_agbf |(_agbf >>1)|(_agbf <<1))&_gbgg ;if (_agbf ^_cgedc )==0{if _gdfg =_bfffa .SetByte (_degfb +_cbge ,_agbf );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bcgc =_fgcab -1;_bcgc >=0;_bcgc --{_degfb =_bcgc *_bfffa .RowStride ;_aebf =_bcgc *_beec .RowStride ;for _cbge =_egbd -1;_cbge >=0;_cbge --{if _agbf ,_gdfg =_bfffa .GetByte (_degfb +_cbge );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _gbgg ,_gdfg =_beec .GetByte (_aebf +_cbge );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcgc < _fgcab -1{if _ccec ,_gdfg =_bfffa .GetByte (_degfb +_bfffa .RowStride +_cbge );
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_agbf |=_ccec |(_ccec <<1)|_ccec >>1;if _cbge > 0{if _edegg ,_gdfg =_bfffa .GetByte (_degfb +_bfffa .RowStride +_cbge -1);
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_agbf |=_edegg <<7;};if _cbge < _egbd -1{if _edegg ,_gdfg =_bfffa .GetByte (_degfb +_bfffa .RowStride +_cbge +1);
_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_agbf |=_edegg >>7;};};if _cbge < _egbd -1{if _afgde ,_gdfg =_bfffa .GetByte (_degfb +_cbge +1);_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_agbf |=_afgde >>7;};_agbf &=_gbgg ;if _agbf ==0||(^_agbf )==0{if _gdfg =_bfffa .SetByte (_degfb +_cbge ,_agbf );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_cgedc =_agbf ;
_agbf =(_agbf |(_agbf >>1)|(_agbf <<1))&_gbgg ;if (_agbf ^_cgedc )==0{if _gdfg =_bfffa .SetByte (_degfb +_cbge ,_agbf );_gdfg !=nil {return _de .Wrap (_gdfg ,_faca ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};type LocationFilter int ;func TstOSymbol (t *_b .T ,scale ...int )*Bitmap {_cagfb ,_fade :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_fade );return TstGetScaledSymbol (t ,_cagfb ,scale ...);};func (_fea *Bitmap )SetDefaultPixel (){for _fee :=range _fea .Data {_fea .Data [_fee ]=byte (0xff);
};};func (_bee *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _bee .removeBorderGeneral (left ,right ,top ,bot );};func _gagd (_cdgg *Bitmap ,_accf ,_aaa int ,_bdge ,_eeae int ,_dccb RasterOperator ){var (_dcdgb bool ;
_bffg bool ;_bgeg int ;_fadfe int ;_ecfc int ;_abab int ;_bafga bool ;_ffdbb byte ;);_gedd :=8-(_accf &7);_dede :=_fcgf [_gedd ];_feba :=_cdgg .RowStride *_aaa +(_accf >>3);if _bdge < _gedd {_dcdgb =true ;_dede &=_ggee [8-_gedd +_bdge ];};if !_dcdgb {_bgeg =(_bdge -_gedd )>>3;
if _bgeg !=0{_bffg =true ;_fadfe =_feba +1;};};_ecfc =(_accf +_bdge )&7;if !(_dcdgb ||_ecfc ==0){_bafga =true ;_ffdbb =_ggee [_ecfc ];_abab =_feba +1+_bgeg ;};var _bgde ,_adec int ;switch _dccb {case PixClr :for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_feba ]=_adaf (_cdgg .Data [_feba ],0x0,_dede );
_feba +=_cdgg .RowStride ;};if _bffg {for _bgde =0;_bgde < _eeae ;_bgde ++{for _adec =0;_adec < _bgeg ;_adec ++{_cdgg .Data [_fadfe +_adec ]=0x0;};_fadfe +=_cdgg .RowStride ;};};if _bafga {for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_abab ]=_adaf (_cdgg .Data [_abab ],0x0,_ffdbb );
_abab +=_cdgg .RowStride ;};};case PixSet :for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_feba ]=_adaf (_cdgg .Data [_feba ],0xff,_dede );_feba +=_cdgg .RowStride ;};if _bffg {for _bgde =0;_bgde < _eeae ;_bgde ++{for _adec =0;_adec < _bgeg ;_adec ++{_cdgg .Data [_fadfe +_adec ]=0xff;
};_fadfe +=_cdgg .RowStride ;};};if _bafga {for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_abab ]=_adaf (_cdgg .Data [_abab ],0xff,_ffdbb );_abab +=_cdgg .RowStride ;};};case PixNotDst :for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_feba ]=_adaf (_cdgg .Data [_feba ],^_cdgg .Data [_feba ],_dede );
_feba +=_cdgg .RowStride ;};if _bffg {for _bgde =0;_bgde < _eeae ;_bgde ++{for _adec =0;_adec < _bgeg ;_adec ++{_cdgg .Data [_fadfe +_adec ]=^(_cdgg .Data [_fadfe +_adec ]);};_fadfe +=_cdgg .RowStride ;};};if _bafga {for _bgde =0;_bgde < _eeae ;_bgde ++{_cdgg .Data [_abab ]=_adaf (_cdgg .Data [_abab ],^_cdgg .Data [_abab ],_ffdbb );
_abab +=_cdgg .RowStride ;};};};};func (_egbgg *Points )AddPoint (x ,y float32 ){*_egbgg =append (*_egbgg ,Point {x ,y })};func TstISymbol (t *_b .T ,scale ...int )*Bitmap {_eged ,_abe :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_abe );
return TstGetScaledSymbol (t ,_eged ,scale ...);};func _ggc (_cg ,_ff *Bitmap )(_gc error ){const _cc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_fb :=_ff .RowStride ;_ab :=_cg .RowStride ;
_ca :=_ff .RowStride *4-_cg .RowStride ;var (_gge ,_ed byte ;_bdg uint32 ;_fc ,_eg ,_cb ,_ea ,_ggeg ,_afb ,_cf int ;);for _cb =0;_cb < _ff .Height ;_cb ++{_fc =_cb *_fb ;_eg =4*_cb *_ab ;for _ea =0;_ea < _fb ;_ea ++{_gge =_ff .Data [_fc +_ea ];_bdg =_ccde [_gge ];
_afb =_eg +_ea *4;if _ca !=0&&(_ea +1)*4> _cg .RowStride {for _ggeg =_ca ;_ggeg > 0;_ggeg --{_ed =byte ((_bdg >>uint (_ggeg *8))&0xff);_cf =_afb +(_ca -_ggeg );if _gc =_cg .SetByte (_cf ,_ed );_gc !=nil {return _de .Wrapf (_gc ,_cc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ggeg );
};};}else if _gc =_cg .setFourBytes (_afb ,_bdg );_gc !=nil {return _de .Wrap (_gc ,_cc ,"");};if _gc =_cg .setFourBytes (_eg +_ea *4,_ccde [_ff .Data [_fc +_ea ]]);_gc !=nil {return _de .Wrap (_gc ,_cc ,"");};};for _ggeg =1;_ggeg < 4;_ggeg ++{for _ea =0;
_ea < _ab ;_ea ++{if _gc =_cg .SetByte (_eg +_ggeg *_ab +_ea ,_cg .Data [_eg +_ea ]);_gc !=nil {return _de .Wrapf (_gc ,_cc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ggeg ,_ea );
};};};};return nil ;};func (_fdcca *Bitmaps )CountPixels ()*_fd .NumSlice {_fdab :=&_fd .NumSlice {};for _ ,_dedg :=range _fdcca .Values {_fdab .AddInt (_dedg .CountPixels ());};return _fdab ;};func (_eff *Bitmap )Equivalent (s *Bitmap )bool {return _eff .equivalent (s )};
func TstFrameBitmapData ()[]byte {return _bcef .Data };func (_fagc *ClassedPoints )ySortFunction ()func (_fccc int ,_cagc int )bool {return func (_edcc ,_bada int )bool {return _fagc .YAtIndex (_edcc )< _fagc .YAtIndex (_bada )};};func (_cgag *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cgag .Copy (),nil ;
};_agd ,_fgee :=_cgag .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _fgee !=nil {return nil ,_de .Wrap (_fgee ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _agd ,nil ;};func (_gggb *Bitmap )nextOnPixel (_gebb ,_ggag int )(_gfbf _da .Point ,_gbf bool ,_fcdf error ){const _adgb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_gfbf ,_gbf ,_fcdf =_gggb .nextOnPixelLow (_gggb .Width ,_gggb .Height ,_gggb .RowStride ,_gebb ,_ggag );if _fcdf !=nil {return _gfbf ,false ,_de .Wrap (_fcdf ,_adgb ,"");};return _gfbf ,_gbf ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_da .Rectangle ;
};func (_gacg *Bitmaps )selectByIndexes (_cgfea []int )(*Bitmaps ,error ){_effdb :=&Bitmaps {};for _ ,_bcea :=range _cgfea {_bfffb ,_bfdg :=_gacg .GetBitmap (_bcea );if _bfdg !=nil {return nil ,_de .Wrap (_bfdg ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_effdb .AddBitmap (_bfffb );};return _effdb ,nil ;};type RasterOperator int ;func TstWSymbol (t *_b .T ,scale ...int )*Bitmap {_bdgg ,_ggbga :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_ggbga );return TstGetScaledSymbol (t ,_bdgg ,scale ...);
};func (_fbcb Points )YSorter ()func (_aebgc ,_cccb int )bool {return func (_cbabc ,_ecde int )bool {return _fbcb [_cbabc ].Y < _fbcb [_ecde ].Y };};func TstDSymbol (t *_b .T ,scale ...int )*Bitmap {_cbae ,_decg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_f .NoError (t ,_decg );return TstGetScaledSymbol (t ,_cbae ,scale ...);};func _ae (_gfe ,_bg *Bitmap )(_bbcc error ){const _egd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_dda :=_bg .RowStride ;
_cab :=_gfe .RowStride ;var _abf ,_bf ,_fg ,_ag ,_ddab int ;for _fg =0;_fg < _bg .Height ;_fg ++{_abf =_fg *_dda ;_bf =8*_fg *_cab ;for _ag =0;_ag < _dda ;_ag ++{if _bbcc =_gfe .setEightBytes (_bf +_ag *8,_cgfe [_bg .Data [_abf +_ag ]]);_bbcc !=nil {return _de .Wrap (_bbcc ,_egd ,"");
};};for _ddab =1;_ddab < 8;_ddab ++{for _ag =0;_ag < _cab ;_ag ++{if _bbcc =_gfe .SetByte (_bf +_ddab *_cab +_ag ,_gfe .Data [_bf +_ag ]);_bbcc !=nil {return _de .Wrap (_bbcc ,_egd ,"");};};};};return nil ;};func TstImageBitmapInverseData ()[]byte {_cgede :=_feag .Copy ();
_cgede .InverseData ();return _cgede .Data ;};func _aee (_ccda ,_bcbe ,_cecd *Bitmap )(*Bitmap ,error ){const _cgdgb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bcbe ==nil {return nil ,_de .Error (_cgdgb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cecd ==nil {return nil ,_de .Error (_cgdgb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ccda ==_cecd {return nil ,_de .Error (_cgdgb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bcbe .SizesEqual (_cecd ){_fa .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cgdgb );
};var _ddgf error ;if _ccda ,_ddgf =_bafg (_ccda ,_bcbe );_ddgf !=nil {return nil ,_de .Wrap (_ddgf ,_cgdgb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ddgf =_ccda .RasterOperation (0,0,_ccda .Width ,_ccda .Height ,PixSrcXorDst ,_cecd ,0,0);
_ddgf !=nil {return nil ,_de .Wrap (_ddgf ,_cgdgb ,"");};return _ccda ,nil ;};func TstTSymbol (t *_b .T ,scale ...int )*Bitmap {_abdbf ,_dfeb :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_dfeb );return TstGetScaledSymbol (t ,_abdbf ,scale ...);
};func NewClassedPoints (points *Points ,classes _fd .IntSlice )(*ClassedPoints ,error ){const _abfb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_de .Error (_abfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_de .Error (_abfb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_effd :=&ClassedPoints {Points :points ,IntSlice :classes };if _caafa :=_effd .validateIntSlice ();_caafa !=nil {return nil ,_de .Wrap (_caafa ,_abfb ,"");
};return _effd ,nil ;};func _cfda (_dce ,_dfd *Bitmap ,_eed int ,_afdb []byte ,_cgf int )(_gfg error ){const _gaa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_fe ,_cgg ,_abdc ,_cggd ,_gca ,_ade ,_bed ,_adf int ;
_acb ,_ede ,_fgb ,_edb uint32 ;_ebfa ,_bbcca byte ;_gef uint16 ;);_cad :=make ([]byte ,4);_dfb :=make ([]byte ,4);for _abdc =0;_abdc < _dce .Height -1;_abdc ,_cggd =_abdc +2,_cggd +1{_fe =_abdc *_dce .RowStride ;_cgg =_cggd *_dfd .RowStride ;for _gca ,_ade =0,0;
_gca < _cgf ;_gca ,_ade =_gca +4,_ade +1{for _bed =0;_bed < 4;_bed ++{_adf =_fe +_gca +_bed ;if _adf <=len (_dce .Data )-1&&_adf < _fe +_dce .RowStride {_cad [_bed ]=_dce .Data [_adf ];}else {_cad [_bed ]=0x00;};_adf =_fe +_dce .RowStride +_gca +_bed ;
if _adf <=len (_dce .Data )-1&&_adf < _fe +(2*_dce .RowStride ){_dfb [_bed ]=_dce .Data [_adf ];}else {_dfb [_bed ]=0x00;};};_acb =_eb .BigEndian .Uint32 (_cad );_ede =_eb .BigEndian .Uint32 (_dfb );_fgb =_acb &_ede ;_fgb |=_fgb <<1;_edb =_acb |_ede ;_edb &=_edb <<1;
_ede =_fgb &_edb ;_ede &=0xaaaaaaaa;_acb =_ede |(_ede <<7);_ebfa =byte (_acb >>24);_bbcca =byte ((_acb >>8)&0xff);_adf =_cgg +_ade ;if _adf +1==len (_dfd .Data )-1||_adf +1>=_cgg +_dfd .RowStride {if _gfg =_dfd .SetByte (_adf ,_afdb [_ebfa ]);_gfg !=nil {return _de .Wrapf (_gfg ,_gaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_adf );
};}else {_gef =(uint16 (_afdb [_ebfa ])<<8)|uint16 (_afdb [_bbcca ]);if _gfg =_dfd .setTwoBytes (_adf ,_gef );_gfg !=nil {return _de .Wrapf (_gfg ,_gaa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_adf );
};_ade ++;};};};return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_bdf *Bitmap )GetPixel (x ,y int )bool {_cbcd :=_bdf .GetByteIndex (x ,y );
_edbe :=_bdf .GetBitOffset (x );_agad :=uint (7-_edbe );if _cbcd > len (_bdf .Data )-1{_fa .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_bdf );
return false ;};if (_bdf .Data [_cbcd ]>>_agad )&0x01>=1{return true ;};return false ;};func (_facg *ClassedPoints )Len ()int {return _facg .IntSlice .Size ()};func _aacag (_dcad *Bitmap ,_cdfa int )(*Bitmap ,error ){const _dgeb ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _dcad ==nil {return nil ,_de .Error (_dgeb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cdfa <=0{return nil ,_de .Error (_dgeb ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _cdfa ==1{_aacf ,_ddgd :=_bafg (nil ,_dcad );if _ddgd !=nil {return nil ,_de .Wrap (_ddgd ,_dgeb ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _aacf ,nil ;};_gagge ,_abcf :=_afc (_dcad ,_cdfa ,_cdfa );if _abcf !=nil {return nil ,_de .Wrap (_abcf ,_dgeb ,"");
};return _gagge ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_aegg float64 ,_fcdc error ){const _fba ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_de .Error (_fba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_de .Error (_fba ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_de .Error (_fba ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_dffb ,_ccbe :=bm1 .Width ,bm1 .Height ;_eade ,_bfdd :=bm2 .Width ,bm2 .Height ;
_acfe :=_fadd (_dffb -_eade );if _acfe > maxDiffW {return 0,nil ;};_cefg :=_fadd (_ccbe -_bfdd );if _cefg > maxDiffH {return 0,nil ;};var _aafdd ,_ffbf int ;if delX >=0{_aafdd =int (delX +0.5);}else {_aafdd =int (delX -0.5);};if delY >=0{_ffbf =int (delY +0.5);
}else {_ffbf =int (delY -0.5);};_debff :=_ceeg (_ffbf ,0);_afgg :=_fcc (_bfdd +_ffbf ,_ccbe );_efad :=bm1 .RowStride *_debff ;_cdda :=bm2 .RowStride *(_debff -_ffbf );_eadg :=_ceeg (_aafdd ,0);_eacf :=_fcc (_eade +_aafdd ,_dffb );_cffg :=bm2 .RowStride ;
var _edc ,_fgfea int ;if _aafdd >=8{_edc =_aafdd >>3;_efad +=_edc ;_eadg -=_edc <<3;_eacf -=_edc <<3;_aafdd &=7;}else if _aafdd <=-8{_fgfea =-((_aafdd +7)>>3);_cdda +=_fgfea ;_cffg -=_fgfea ;_aafdd +=_fgfea <<3;};if _eadg >=_eacf ||_debff >=_afgg {return 0,nil ;
};_fgaf :=(_eacf +7)>>3;var (_gdbcd ,_ggdc ,_bcdf byte ;_bbdd ,_ecea ,_fbff int ;);switch {case _aafdd ==0:for _fbff =_debff ;_fbff < _afgg ;_fbff ,_efad ,_cdda =_fbff +1,_efad +bm1 .RowStride ,_cdda +bm2 .RowStride {for _ecea =0;_ecea < _fgaf ;_ecea ++{_bcdf =bm1 .Data [_efad +_ecea ]&bm2 .Data [_cdda +_ecea ];
_bbdd +=tab [_bcdf ];};};case _aafdd > 0:if _cffg < _fgaf {for _fbff =_debff ;_fbff < _afgg ;_fbff ,_efad ,_cdda =_fbff +1,_efad +bm1 .RowStride ,_cdda +bm2 .RowStride {_gdbcd ,_ggdc =bm1 .Data [_efad ],bm2 .Data [_cdda ]>>uint (_aafdd );_bcdf =_gdbcd &_ggdc ;
_bbdd +=tab [_bcdf ];for _ecea =1;_ecea < _cffg ;_ecea ++{_gdbcd ,_ggdc =bm1 .Data [_efad +_ecea ],(bm2 .Data [_cdda +_ecea ]>>uint (_aafdd ))|(bm2 .Data [_cdda +_ecea -1]<<uint (8-_aafdd ));_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];};_gdbcd =bm1 .Data [_efad +_ecea ];
_ggdc =bm2 .Data [_cdda +_ecea -1]<<uint (8-_aafdd );_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];};}else {for _fbff =_debff ;_fbff < _afgg ;_fbff ,_efad ,_cdda =_fbff +1,_efad +bm1 .RowStride ,_cdda +bm2 .RowStride {_gdbcd ,_ggdc =bm1 .Data [_efad ],bm2 .Data [_cdda ]>>uint (_aafdd );
_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];for _ecea =1;_ecea < _fgaf ;_ecea ++{_gdbcd =bm1 .Data [_efad +_ecea ];_ggdc =(bm2 .Data [_cdda +_ecea ]>>uint (_aafdd ))|(bm2 .Data [_cdda +_ecea -1]<<uint (8-_aafdd ));_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];
};};};default:if _fgaf < _cffg {for _fbff =_debff ;_fbff < _afgg ;_fbff ,_efad ,_cdda =_fbff +1,_efad +bm1 .RowStride ,_cdda +bm2 .RowStride {for _ecea =0;_ecea < _fgaf ;_ecea ++{_gdbcd =bm1 .Data [_efad +_ecea ];_ggdc =bm2 .Data [_cdda +_ecea ]<<uint (-_aafdd );
_ggdc |=bm2 .Data [_cdda +_ecea +1]>>uint (8+_aafdd );_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];};};}else {for _fbff =_debff ;_fbff < _afgg ;_fbff ,_efad ,_cdda =_fbff +1,_efad +bm1 .RowStride ,_cdda +bm2 .RowStride {for _ecea =0;_ecea < _fgaf -1;_ecea ++{_gdbcd =bm1 .Data [_efad +_ecea ];
_ggdc =bm2 .Data [_cdda +_ecea ]<<uint (-_aafdd );_ggdc |=bm2 .Data [_cdda +_ecea +1]>>uint (8+_aafdd );_bcdf =_gdbcd &_ggdc ;_bbdd +=tab [_bcdf ];};_gdbcd =bm1 .Data [_efad +_ecea ];_ggdc =bm2 .Data [_cdda +_ecea ]<<uint (-_aafdd );_bcdf =_gdbcd &_ggdc ;
_bbdd +=tab [_bcdf ];};};};_aegg =float64 (_bbdd )*float64 (_bbdd )/(float64 (area1 )*float64 (area2 ));return _aegg ,nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _fabb ,_fffb int ;_cfeb :=src .RowStride -1;if x < 0{_fffb =-x ;
x =0;}else if x +src .Width > dst .Width {_cfeb -=src .Width +x -dst .Width ;};if y < 0{_fabb =-y ;y =0;_fffb +=src .RowStride ;_cfeb +=src .RowStride ;}else if y +src .Height > dst .Height {_fabb =src .Height +y -dst .Height ;};var (_cea int ;_afba error ;
);_bfe :=x &0x07;_bcg :=8-_bfe ;_bfea :=src .Width &0x07;_ecace :=_bcg -_bfea ;_ddfb :=_bcg &0x07!=0;_dfda :=src .Width <=((_cfeb -_fffb )<<3)+_bcg ;_ebcf :=dst .GetByteIndex (x ,y );_ecaf :=_fabb +dst .Height ;if src .Height > _ecaf {_cea =_ecaf ;}else {_cea =src .Height ;
};switch {case !_ddfb :_afba =_dgec (src ,dst ,_fabb ,_cea ,_ebcf ,_fffb ,_cfeb ,op );case _dfda :_afba =_gdbc (src ,dst ,_fabb ,_cea ,_ebcf ,_fffb ,_cfeb ,_ecace ,_bfe ,_bcg ,op );default:_afba =_aeced (src ,dst ,_fabb ,_cea ,_ebcf ,_fffb ,_cfeb ,_ecace ,_bfe ,_bcg ,op ,_bfea );
};return _afba ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_befd *Bitmap )connComponentsBB (_bgfa int )(_bddf *Boxes ,_fgbf error ){const _feca ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _bgfa !=4&&_bgfa !=8{return nil ,_de .Error (_feca ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _befd .Zero (){return &Boxes {},nil ;
};_befd .setPadBits (0);_aca ,_fgbf :=_bafg (nil ,_befd );if _fgbf !=nil {return nil ,_de .Wrap (_fgbf ,_feca ,"\u0062\u006d\u0031");};_fdbc :=&_fd .Stack {};_fdbc .Aux =&_fd .Stack {};_bddf =&Boxes {};var (_ffaa ,_ggab int ;_ebda _da .Point ;_bcdg bool ;
_degf *_da .Rectangle ;);for {if _ebda ,_bcdg ,_fgbf =_aca .nextOnPixel (_ggab ,_ffaa );_fgbf !=nil {return nil ,_de .Wrap (_fgbf ,_feca ,"");};if !_bcdg {break ;};if _degf ,_fgbf =_fbab (_aca ,_fdbc ,_ebda .X ,_ebda .Y ,_bgfa );_fgbf !=nil {return nil ,_de .Wrap (_fgbf ,_feca ,"");
};if _fgbf =_bddf .Add (_degf );_fgbf !=nil {return nil ,_de .Wrap (_fgbf ,_feca ,"");};_ggab =_ebda .X ;_ffaa =_ebda .Y ;};return _bddf ,nil ;};func (_ddgfg *Selection )setOrigin (_faaa ,_ffdc int ){_ddgfg .Cy ,_ddgfg .Cx =_faaa ,_ffdc };func (_efaa *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_aafd *Bitmaps ,_edeg *Boxes ,_ecbaa error ){const _bggg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _efaa ==nil {return nil ,nil ,_de .Error (_bggg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_de .Error (_bggg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _efaa .Zero (){_edeg =&Boxes {};_aafd =&Bitmaps {};return _aafd ,_edeg ,nil ;};switch components {case ComponentConn :_aafd =&Bitmaps {};if _edeg ,_ecbaa =_efaa .ConnComponents (_aafd ,8);_ecbaa !=nil {return nil ,nil ,_de .Wrap (_ecbaa ,_bggg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_dcbgc ,_gbga :=MorphSequence (_efaa ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gbga !=nil {return nil ,nil ,_de .Wrap (_gbga ,_bggg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _fa .Log .IsLogLevel (_fa .LogLevelTrace ){_fa .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_dcbgc .String ());
};_bfb :=&Bitmaps {};_edeg ,_gbga =_dcbgc .ConnComponents (_bfb ,8);if _gbga !=nil {return nil ,nil ,_de .Wrap (_gbga ,_bggg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _fa .Log .IsLogLevel (_fa .LogLevelTrace ){_fa .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_bfb .String ());
};if _aafd ,_gbga =_bfb .ClipToBitmap (_efaa );_gbga !=nil {return nil ,nil ,_de .Wrap (_gbga ,_bggg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_aedbe :=1;
var _ded *Bitmap ;switch {case _efaa .XResolution <=200:_ded =_efaa ;case _efaa .XResolution <=400:_aedbe =2;_ded ,_ecbaa =_geb (_efaa ,1,0,0,0);if _ecbaa !=nil {return nil ,nil ,_de .Wrap (_ecbaa ,_bggg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_aedbe =4;_ded ,_ecbaa =_geb (_efaa ,1,1,0,0);if _ecbaa !=nil {return nil ,nil ,_de .Wrap (_ecbaa ,_bggg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_fage ,_ ,_bdab :=_cfg (_ded );if _bdab !=nil {return nil ,nil ,_de .Wrap (_bdab ,_bggg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gcc ,_bdab :=_aacag (_fage ,_aedbe );if _bdab !=nil {return nil ,nil ,_de .Wrap (_bdab ,_bggg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_geda :=&Bitmaps {};if _edeg ,_bdab =_gcc .ConnComponents (_geda ,4);_bdab !=nil {return nil ,nil ,_de .Wrap (_bdab ,_bggg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _aafd ,_bdab =_geda .ClipToBitmap (_efaa );_bdab !=nil {return nil ,nil ,_de .Wrap (_bdab ,_bggg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_aafd ,_ecbaa =_aafd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _ecbaa !=nil {return nil ,nil ,_de .Wrap (_ecbaa ,_bggg ,"");};_edeg ,_ecbaa =_edeg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _ecbaa !=nil {return nil ,nil ,_de .Wrap (_ecbaa ,_bggg ,"");};return _aafd ,_edeg ,nil ;};
func _cbff (_gbgb ,_defc *Bitmap ,_dgfe ,_fbcc int )(*Bitmap ,error ){const _bgea ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _defc ==nil {_fa .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_de .Error (_bgea ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dgfe < 1||_fbcc < 1{return nil ,_de .Error (_bgea ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dgfe ==1&&_fbcc ==1{_ffeg ,_eeef :=_bafg (_gbgb ,_defc );if _eeef !=nil {return nil ,_de .Wrap (_eeef ,_bgea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ffeg ,nil ;};if _dgfe ==1||_fbcc ==1{_bca :=SelCreateBrick (_fbcc ,_dgfe ,_fbcc /2,_dgfe /2,SelHit );_edbc ,_eaec :=_cgec (_gbgb ,_defc ,_bca );if _eaec !=nil {return nil ,_de .Wrap (_eaec ,_bgea ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _edbc ,nil ;};_ceed :=SelCreateBrick (1,_dgfe ,0,_dgfe /2,SelHit );_dbg :=SelCreateBrick (_fbcc ,1,_fbcc /2,0,SelHit );_bddfc ,_gbdfc :=_cgec (nil ,_defc ,_ceed );if _gbdfc !=nil {return nil ,_de .Wrap (_gbdfc ,_bgea ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gbgb ,_gbdfc =_cgec (_gbgb ,_bddfc ,_dbg );if _gbdfc !=nil {return nil ,_de .Wrap (_gbdfc ,_bgea ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gbgb ,nil ;};func (_dbbc *Bitmap )thresholdPixelSum (_eeg int )bool {var (_fbdb int ;
_dfg uint8 ;_gaed byte ;_fafa int ;);_gcdca :=_dbbc .RowStride ;_caed :=uint (_dbbc .Width &0x07);if _caed !=0{_dfg =uint8 ((0xff<<(8-_caed ))&0xff);_gcdca --;};for _fgeed :=0;_fgeed < _dbbc .Height ;_fgeed ++{for _fafa =0;_fafa < _gcdca ;_fafa ++{_gaed =_dbbc .Data [_fgeed *_dbbc .RowStride +_fafa ];
_fbdb +=int (_cfe [_gaed ]);};if _caed !=0{_gaed =_dbbc .Data [_fgeed *_dbbc .RowStride +_fafa ]&_dfg ;_fbdb +=int (_cfe [_gaed ]);};if _fbdb > _eeg {return true ;};};return false ;};func (_ebfcb *Bitmaps )makeSizeIndicator (_gega ,_dfgfe int ,_adfc LocationFilter ,_cdfe SizeComparison )(_egadb *_fd .NumSlice ,_bfcee error ){const _dfa ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebfcb ==nil {return nil ,_de .Error (_dfa ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _adfc {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_de .Errorf (_dfa ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_adfc );
};switch _cdfe {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_de .Errorf (_dfa ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cdfe );
};_egadb =&_fd .NumSlice {};var (_effe ,_begea ,_bdffc int ;_agde *Bitmap ;);for _ ,_agde =range _ebfcb .Values {_effe =0;_begea ,_bdffc =_agde .Width ,_agde .Height ;switch _adfc {case LocSelectWidth :if (_cdfe ==SizeSelectIfLT &&_begea < _gega )||(_cdfe ==SizeSelectIfGT &&_begea > _gega )||(_cdfe ==SizeSelectIfLTE &&_begea <=_gega )||(_cdfe ==SizeSelectIfGTE &&_begea >=_gega )||(_cdfe ==SizeSelectIfEQ &&_begea ==_gega ){_effe =1;
};case LocSelectHeight :if (_cdfe ==SizeSelectIfLT &&_bdffc < _dfgfe )||(_cdfe ==SizeSelectIfGT &&_bdffc > _dfgfe )||(_cdfe ==SizeSelectIfLTE &&_bdffc <=_dfgfe )||(_cdfe ==SizeSelectIfGTE &&_bdffc >=_dfgfe )||(_cdfe ==SizeSelectIfEQ &&_bdffc ==_dfgfe ){_effe =1;
};case LocSelectIfEither :if (_cdfe ==SizeSelectIfLT &&(_begea < _gega ||_bdffc < _dfgfe ))||(_cdfe ==SizeSelectIfGT &&(_begea > _gega ||_bdffc > _dfgfe ))||(_cdfe ==SizeSelectIfLTE &&(_begea <=_gega ||_bdffc <=_dfgfe ))||(_cdfe ==SizeSelectIfGTE &&(_begea >=_gega ||_bdffc >=_dfgfe ))||(_cdfe ==SizeSelectIfEQ &&(_begea ==_gega ||_bdffc ==_dfgfe )){_effe =1;
};case LocSelectIfBoth :if (_cdfe ==SizeSelectIfLT &&(_begea < _gega &&_bdffc < _dfgfe ))||(_cdfe ==SizeSelectIfGT &&(_begea > _gega &&_bdffc > _dfgfe ))||(_cdfe ==SizeSelectIfLTE &&(_begea <=_gega &&_bdffc <=_dfgfe ))||(_cdfe ==SizeSelectIfGTE &&(_begea >=_gega &&_bdffc >=_dfgfe ))||(_cdfe ==SizeSelectIfEQ &&(_begea ==_gega &&_bdffc ==_dfgfe )){_effe =1;
};};_egadb .AddInt (_effe );};return _egadb ,nil ;};type BoundaryCondition int ;func init (){const _edeac ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_bcef =New (50,40);var _faac error ;
_bcef ,_faac =_bcef .AddBorder (2,1);if _faac !=nil {panic (_de .Wrap (_faac ,_edeac ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_feag ,_faac =NewWithData (50,22,_gdafa );if _faac !=nil {panic (_de .Wrap (_faac ,_edeac ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_gbc *Bitmap )Zero ()bool {_abg :=_gbc .Width /8;_dgffe :=_gbc .Width &7;var _aae byte ;if _dgffe !=0{_aae =byte (0xff<<uint (8-_dgffe ));};var _eggg ,_fbg ,_cdg int ;for _fbg =0;_fbg < _gbc .Height ;_fbg ++{_eggg =_gbc .RowStride *_fbg ;for _cdg =0;
_cdg < _abg ;_cdg ,_eggg =_cdg +1,_eggg +1{if _gbc .Data [_eggg ]!=0{return false ;};};if _dgffe > 0{if _gbc .Data [_eggg ]&_aae !=0{return false ;};};};return true ;};func (_edda CombinationOperator )String ()string {var _cadbf string ;switch _edda {case CmbOpOr :_cadbf ="\u004f\u0052";
case CmbOpAnd :_cadbf ="\u0041\u004e\u0044";case CmbOpXor :_cadbf ="\u0058\u004f\u0052";case CmbOpXNor :_cadbf ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_cadbf ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_cadbf ="\u004e\u004f\u0054";};
return _cadbf ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_aaef *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _aggff ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_aaef .Values )==0{return nil ,_de .Error (_aggff ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_gde :=&BitmapsArray {};_aaef .SortByWidth ();_eecgb :=-1;_ddbg :=-1;for _ecbbc :=0;_ecbbc < len (_aaef .Values );
_ecbbc ++{_affcb :=_aaef .Values [_ecbbc ].Width ;if _affcb > _eecgb {_eecgb =_affcb ;_ddbg ++;_gde .Values =append (_gde .Values ,&Bitmaps {});};_gde .Values [_ddbg ].AddBitmap (_aaef .Values [_ecbbc ]);};return _gde ,nil ;};func _dbfa (_dcga *Bitmap ,_cgbbf *Bitmap ,_ebcd *Selection ,_cafe **Bitmap )(*Bitmap ,error ){const _gcbc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _cgbbf ==nil {return nil ,_de .Error (_gcbc ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _ebcd ==nil {return nil ,_de .Error (_gcbc ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_adag ,_aefg :=_ebcd .Height ,_ebcd .Width ;if _adag ==0||_aefg ==0{return nil ,_de .Error (_gcbc ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _dcga ==nil {_dcga =_cgbbf .createTemplate ();
*_cafe =_cgbbf ;return _dcga ,nil ;};_dcga .Width =_cgbbf .Width ;_dcga .Height =_cgbbf .Height ;_dcga .RowStride =_cgbbf .RowStride ;_dcga .Color =_cgbbf .Color ;_dcga .Data =make ([]byte ,_cgbbf .RowStride *_cgbbf .Height );if _dcga ==_cgbbf {*_cafe =_cgbbf .Copy ();
}else {*_cafe =_cgbbf ;};return _dcga ,nil ;};func _cebf (_dbeg ,_gggg *Bitmap ,_ggdcb *Selection )(*Bitmap ,error ){const _agff ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _cgfc ,_eafd int ;
if _gggg ==nil {return nil ,_de .Error (_agff ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggdcb ==nil {return nil ,_de .Error (_agff ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cgfc =_ggdcb .Width ;_eafd =_ggdcb .Height ;if _cgfc ==0||_eafd ==0{return nil ,_de .Error (_agff ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _dbeg ==nil {return _gggg .createTemplate (),nil ;};if _ccad :=_dbeg .resizeImageData (_gggg );
_ccad !=nil {return nil ,_ccad ;};return _dbeg ,nil ;};var (_afgc =_dgf ();_ccde =_geg ();_cgfe =_bba (););func (_eccba Points )GetIntY (i int )(int ,error ){if i >=len (_eccba ){return 0,_de .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_eccba [i ].Y ),nil ;};var _ _bbc .Interface =&ClassedPoints {};func (_fde *Points )Add (pt *Points )error {const _ecge ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _fde ==nil {return _de .Error (_ecge ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _de .Error (_ecge ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_fde =append (*_fde ,*pt ...);return nil ;};const (ComponentConn Component =iota ;
ComponentCharacters ;ComponentWords ;);type SelectionValue int ;func (_bfgg *Bitmap )setEightPartlyBytes (_cfa ,_daf int ,_ddf uint64 )(_gaf error ){var (_cbda byte ;_gagg int ;);const _ebfc ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _facf :=1;_facf <=_daf ;_facf ++{_gagg =64-_facf *8;_cbda =byte (_ddf >>uint (_gagg )&0xff);_fa .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_cbda ,_cfa ,_cfa +_facf -1,_daf ,_gagg );
if _gaf =_bfgg .SetByte (_cfa +_facf -1,_cbda );_gaf !=nil {return _de .Wrap (_gaf ,_ebfc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_gcdc :=_bfgg .RowStride *8-_bfgg .Width ;if _gcdc ==0{return nil ;};_gagg -=8;_cbda =byte (_ddf >>uint (_gagg )&0xff)<<uint (_gcdc );
if _gaf =_bfgg .SetByte (_cfa +_daf ,_cbda );_gaf !=nil {return _de .Wrap (_gaf ,_ebfc ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_agca *ClassedPoints )YAtIndex (i int )float32 {return (*_agca .Points )[_agca .IntSlice [i ]].Y };func _fbab (_ggeed *Bitmap ,_bfbf *_fd .Stack ,_ccbc ,_dfbb ,_bbadb int )(_ggdf *_da .Rectangle ,_cgfef error ){const _bbfd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ggeed ==nil {return nil ,_de .Error (_bbfd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bfbf ==nil {return nil ,_de .Error (_bbfd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _bbadb {case 4:if _ggdf ,_cgfef =_ecad (_ggeed ,_bfbf ,_ccbc ,_dfbb );_cgfef !=nil {return nil ,_de .Wrap (_cgfef ,_bbfd ,"");};return _ggdf ,nil ;case 8:if _ggdf ,_cgfef =_acgba (_ggeed ,_bfbf ,_ccbc ,_dfbb );_cgfef !=nil {return nil ,_de .Wrap (_cgfef ,_bbfd ,"");
};return _ggdf ,nil ;default:return nil ,_de .Errorf (_bbfd ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_bbadb );
};};type MorphOperation int ;func (_fafe *Bitmap )resizeImageData (_eec *Bitmap )error {if _eec ==nil {return _de .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fafe .SizesEqual (_eec ){return nil ;};_fafe .Data =make ([]byte ,len (_eec .Data ));_fafe .Width =_eec .Width ;_fafe .Height =_eec .Height ;_fafe .RowStride =_eec .RowStride ;return nil ;};func (_efcc *Bitmaps )String ()string {_edcg :=_bb .Builder {};
for _ ,_eegeg :=range _efcc .Values {_edcg .WriteString (_eegeg .String ());_edcg .WriteRune ('\n');};return _edcg .String ();};type byWidth Bitmaps ;func _bega (_fddc ,_agaff ,_bfeb *Bitmap ,_ababc int )(*Bitmap ,error ){const _fgcdb ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _agaff ==nil {return nil ,_de .Error (_fgcdb ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bfeb ==nil {return nil ,_de .Error (_fgcdb ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ababc !=4&&_ababc !=8{return nil ,_de .Error (_fgcdb ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _adga error ;
_fddc ,_adga =_bafg (_fddc ,_agaff );if _adga !=nil {return nil ,_de .Wrap (_adga ,_fgcdb ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_gaga :=_agaff .createTemplate ();_bfeb .setPadBits (0);for _bcee :=0;
_bcee < _cggg ;_bcee ++{_gaga ,_adga =_bafg (_gaga ,_fddc );if _adga !=nil {return nil ,_de .Wrapf (_adga ,_fgcdb ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bcee );};if _adga =_bbfc (_fddc ,_bfeb ,_ababc );_adga !=nil {return nil ,_de .Wrapf (_adga ,_fgcdb ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bcee );
};if _gaga .Equals (_fddc ){break ;};};return _fddc ,nil ;};func (_fecab *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _gbad ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_fecab .Values )==0{return nil ,_de .Error (_gbad ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dcfb :=&BitmapsArray {};_fecab .SortByHeight ();_acba :=-1;_ccbcc :=-1;for _aeef :=0;_aeef < len (_fecab .Values );_aeef ++{_aggfa :=_fecab .Values [_aeef ].Height ;if _aggfa > _acba {_acba =_aggfa ;_ccbcc ++;_dcfb .Values =append (_dcfb .Values ,&Bitmaps {});
};_dcfb .Values [_ccbcc ].AddBitmap (_fecab .Values [_aeef ]);};return _dcfb ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);