//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ff "github.com/unidoc/unipdf/v3/internal/jbig2/document";_a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";
);func (_g *Decoder )DecodeNextPage ()([]byte ,error ){_g ._ad ++;_fe :=_g ._ad ;return _g .decodePage (_fe );};func (_cfe *Decoder )decodePageImage (_dc int )(_d .Image ,error ){const _ee ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _dc < 0{return nil ,_a .Errorf (_ee ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dc );};if _dc > int (_cfe ._e .NumberOfPages ){return nil ,_a .Errorf (_ee ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dc );
};_gd ,_cc :=_cfe ._e .GetPage (_dc );if _cc !=nil {return nil ,_a .Wrap (_cc ,_ee ,"");};_db ,_cc :=_gd .GetBitmap ();if _cc !=nil {return nil ,_a .Wrap (_cc ,_ee ,"");};_db .InverseData ();return _db .ToImage (),nil ;};func (_fab *Decoder )PageNumber ()(int ,error ){const _cg ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _fab ._e ==nil {return 0,_a .Error (_cg ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_fab ._e .NumberOfPages ),nil ;};func (_fa *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fa .decodePage (pageNumber )};
func (_cfa *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _dfd ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_ba ,_bf :=_cfa .decodePageImage (pageNumber );
if _bf !=nil {return nil ,_a .Wrap (_bf ,_dfd ,"");};return _ba ,nil ;};type Decoder struct{_df *_f .Reader ;_e *_ff .Document ;_ad int ;_cf Parameters ;};func (_faa *Decoder )decodePage (_ade int )([]byte ,error ){const _de ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _ade < 0{return nil ,_a .Errorf (_de ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ade );};if _ade > int (_faa ._e .NumberOfPages ){return nil ,_a .Errorf (_de ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ade );
};_ce ,_cgc :=_faa ._e .GetPage (_ade );if _cgc !=nil {return nil ,_a .Wrap (_cgc ,_de ,"");};_ca ,_cgc :=_ce .GetBitmap ();if _cgc !=nil {return nil ,_a .Wrap (_cgc ,_de ,"");};_ca .InverseData ();if !_faa ._cf .UnpaddedData {return _ca .Data ,nil ;};
return _ca .GetUnpaddedData ();};func Decode (input []byte ,parameters Parameters ,globals *_ff .Globals )(*Decoder ,error ){_eg :=_f .NewReader (input );_dbb ,_aa :=_ff .DecodeDocument (_eg ,globals );if _aa !=nil {return nil ,_aa ;};return &Decoder {_df :_eg ,_e :_dbb ,_cf :parameters },nil ;
};type Parameters struct{UnpaddedData bool ;Color _c .Color ;};