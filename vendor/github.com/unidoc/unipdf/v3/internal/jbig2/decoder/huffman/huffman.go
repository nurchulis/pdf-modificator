//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_b "errors";_g "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_ee "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_cc "math";_d "strings";);func (_ba *EncodedTable )InitTree (codeTable []*Code )error {_eag (codeTable );
for _ ,_fad :=range codeTable {if _gg :=_ba ._f .append (_fad );_gg !=nil {return _gg ;};};return nil ;};func (_fae *EncodedTable )parseTable ()error {var (_gcc []*Code ;_a ,_bd ,_eee int32 ;_bf uint64 ;_ae error ;);_cag :=_fae .StreamReader ();_dg :=_fae .HtLow ();
for _dg < _fae .HtHigh (){_bf ,_ae =_cag .ReadBits (byte (_fae .HtPS ()));if _ae !=nil {return _ae ;};_a =int32 (_bf );_bf ,_ae =_cag .ReadBits (byte (_fae .HtRS ()));if _ae !=nil {return _ae ;};_bd =int32 (_bf );_gcc =append (_gcc ,NewCode (_a ,_bd ,_eee ,false ));
_dg +=1<<uint (_bd );};_bf ,_ae =_cag .ReadBits (byte (_fae .HtPS ()));if _ae !=nil {return _ae ;};_a =int32 (_bf );_bd =32;_eee =_fae .HtLow ()-1;_gcc =append (_gcc ,NewCode (_a ,_bd ,_eee ,true ));_bf ,_ae =_cag .ReadBits (byte (_fae .HtPS ()));if _ae !=nil {return _ae ;
};_a =int32 (_bf );_bd =32;_eee =_fae .HtHigh ();_gcc =append (_gcc ,NewCode (_a ,_bd ,_eee ,false ));if _fae .HtOOB ()==1{_bf ,_ae =_cag .ReadBits (byte (_fae .HtPS ()));if _ae !=nil {return _ae ;};_a =int32 (_bf );_gcc =append (_gcc ,NewCode (_a ,-1,-1,false ));
};if _ae =_fae .InitTree (_gcc );_ae !=nil {return _ae ;};return nil ;};func (_bbf *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _bbf ._de .Decode (r )};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_bgf :prefixLength ,_efg :rangeLength ,_fega :rangeLow ,_ebb :isLowerRange ,_ec :-1};
};func (_cg *EncodedTable )RootNode ()*InternalNode {return _cg ._f };type FixedSizeTable struct{_bde *InternalNode };func (_gba *FixedSizeTable )RootNode ()*InternalNode {return _gba ._bde };func _fafg (_bgc *Code )*ValueNode {return &ValueNode {_gbe :_bgc ._efg ,_fe :_bgc ._fega ,_dgf :_bgc ._ebb };
};func (_cagf *FixedSizeTable )InitTree (codeTable []*Code )error {_eag (codeTable );for _ ,_gcb :=range codeTable {_gfb :=_cagf ._bde .append (_gcb );if _gfb !=nil {return _gfb ;};};return nil ;};func _ccg (_aed *Code )*OutOfBandNode {return &OutOfBandNode {}};
func _bgb (_aeg [][]int32 )(*StandardTable ,error ){var _ed []*Code ;for _bag :=0;_bag < len (_aeg );_bag ++{_da :=_aeg [_bag ][0];_gd :=_aeg [_bag ][1];_aa :=_aeg [_bag ][2];var _fgg bool ;if len (_aeg [_bag ])> 3{_fgg =true ;};_ed =append (_ed ,NewCode (_da ,_gd ,_aa ,_fgg ));
};_ede :=&StandardTable {_de :_gcea (0)};if _fbe :=_ede .InitTree (_ed );_fbe !=nil {return nil ,_fbe ;};return _ede ,nil ;};func (_cda *StandardTable )RootNode ()*InternalNode {return _cda ._de };var _ Tabler =&EncodedTable {};var _ Node =&ValueNode {};
func (_gb *EncodedTable )String ()string {return _gb ._f .String ()+"\u000a"};func (_fg *InternalNode )String ()string {_cb :=&_d .Builder {};_cb .WriteString ("\u000a");_fg .pad (_cb );_cb .WriteString ("\u0030\u003a\u0020");_cb .WriteString (_fg ._aea .String ()+"\u000a");
_fg .pad (_cb );_cb .WriteString ("\u0031\u003a\u0020");_cb .WriteString (_fg ._bgcg .String ()+"\u000a");return _cb .String ();};func (_gfa *InternalNode )append (_faee *Code )(_gce error ){if _faee ._bgf ==0{return nil ;};_ggb :=_faee ._bgf -1-_gfa ._eb ;
if _ggb < 0{return _b .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_cf :=(_faee ._ec >>uint (_ggb ))&0x1;
if _ggb ==0{if _faee ._efg ==-1{if _cf ==1{if _gfa ._bgcg !=nil {return _g .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_faee );};_gfa ._bgcg =_ccg (_faee );
}else {if _gfa ._aea !=nil {return _g .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_faee );};_gfa ._aea =_ccg (_faee );};}else {if _cf ==1{if _gfa ._bgcg !=nil {return _g .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_faee );
};_gfa ._bgcg =_fafg (_faee );}else {if _gfa ._aea !=nil {return _g .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_faee );
};_gfa ._aea =_fafg (_faee );};};}else {if _cf ==1{if _gfa ._bgcg ==nil {_gfa ._bgcg =_gcea (_gfa ._eb +1);};if _gce =_gfa ._bgcg .(*InternalNode ).append (_faee );_gce !=nil {return _gce ;};}else {if _gfa ._aea ==nil {_gfa ._aea =_gcea (_gfa ._eb +1);
};if _gce =_gfa ._aea .(*InternalNode ).append (_faee );_gce !=nil {return _gce ;};};};return nil ;};func _gcea (_ge int32 )*InternalNode {return &InternalNode {_eb :_ge }};func (_ef *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_be ,_bb :=r .ReadBit ();
if _bb !=nil {return 0,_bb ;};if _be ==0{return _ef ._aea .Decode (r );};return _ef ._bgcg .Decode (r );};func (_cd *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_ee .ErrOOB };type StandardTable struct{_de *InternalNode };type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()*_c .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type ValueNode struct{_gbe int32 ;_fe int32 ;_dgf bool ;};func (_baa *FixedSizeTable )String ()string {return _baa ._bde .String ()+"\u000a"};type InternalNode struct{_eb int32 ;
_aea Node ;_bgcg Node ;};var _ Node =&OutOfBandNode {};type Code struct{_bgf int32 ;_efg int32 ;_fega int32 ;_ebb bool ;_ec int32 ;};func (_feg *ValueNode )String ()string {return _g .Sprintf ("\u0025\u0064\u002f%\u0064",_feg ._gbe ,_feg ._fe );};var _ Node =&InternalNode {};
func _ecd (_eec ,_ece int32 )string {var _fab int32 ;_fba :=make ([]rune ,_ece );for _eae :=int32 (1);_eae <=_ece ;_eae ++{_fab =_eec >>uint (_ece -_eae )&1;if _fab !=0{_fba [_eae -1]='1';}else {_fba [_eae -1]='0';};};return string (_fba );};var _gea =make ([]Tabler ,len (_def ));
func _abg (_db ,_gef int32 )int32 {if _db > _gef {return _db ;};return _gef ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gea ){return nil ,_b .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fef :=_gea [number -1];if _fef ==nil {var _ggc error ;_fef ,_ggc =_bgb (_def [number -1]);if _ggc !=nil {return nil ,_ggc ;};_gea [number -1]=_fef ;};return _fef ,nil ;};func (_ff *InternalNode )pad (_gfd *_d .Builder ){for _cbf :=int32 (0);_cbf < _ff ._eb ;
_cbf ++{_gfd .WriteString ("\u0020\u0020\u0020");};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_eea :=&FixedSizeTable {_bde :&InternalNode {}};if _bg :=_eea .InitTree (codeTable );_bg !=nil {return nil ,_bg ;};return _eea ,nil ;
};func (_ggd *OutOfBandNode )String ()string {return _g .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_cc .MaxInt64 ));};type Node interface{Decode (_fb *_c .Reader )(int64 ,error );String ()string ;};var _def =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_fa :=&EncodedTable {_f :&InternalNode {},BasicTabler :table };if _faf :=_fa .parseTable ();_faf !=nil {return nil ,_faf ;};return _fa ,nil ;};func _eag (_bdd []*Code ){var _bad int32 ;for _ ,_fgb :=range _bdd {_bad =_abg (_bad ,_fgb ._bgf );
};_gec :=make ([]int32 ,_bad +1);for _ ,_ebe :=range _bdd {_gec [_ebe ._bgf ]++;};var _ebca int32 ;_ebg :=make ([]int32 ,len (_gec )+1);_gec [0]=0;for _af :=int32 (1);_af <=int32 (len (_gec ));_af ++{_ebg [_af ]=(_ebg [_af -1]+(_gec [_af -1]))<<1;_ebca =_ebg [_af ];
for _ ,_dd :=range _bdd {if _dd ._bgf ==_af {_dd ._ec =_ebca ;_ebca ++;};};};};func (_gf *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _gf ._f .Decode (r )};func (_ea *StandardTable )InitTree (codeTable []*Code )error {_eag (codeTable );
for _ ,_beb :=range codeTable {if _ga :=_ea ._de .append (_beb );_ga !=nil {return _ga ;};};return nil ;};func (_ebc *StandardTable )String ()string {return _ebc ._de .String ()+"\u000a"};type OutOfBandNode struct{};type EncodedTable struct{BasicTabler ;
_f *InternalNode ;};func (_dc *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _dc ._bde .Decode (r )};type Tabler interface{Decode (_cdd *_c .Reader )(int64 ,error );InitTree (_bcf []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};func (_eg *Code )String ()string {var _bgfd string ;if _eg ._ec !=-1{_bgfd =_ecd (_eg ._ec ,_eg ._bgf );}else {_bgfd ="\u003f";};return _g .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bgfd ,_eg ._bgf ,_eg ._efg ,_eg ._fega );
};func (_feb *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_ab ,_bfe :=r .ReadBits (byte (_feb ._gbe ));if _bfe !=nil {return 0,_bfe ;};if _feb ._dgf {_ab =-_ab ;};return int64 (_feb ._fe )+int64 (_ab ),nil ;};