//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_db "encoding/binary";_ea "errors";_g "fmt";_bg "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_dd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_gf "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_bc "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_eee "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_ab "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_ff "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_cb "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_de "golang.org/x/xerrors";_f "image";_a "io";_d "math";_b "strings";_ee "time";);func (_fgdg *TableSegment )HtRS ()int32 {return _fgdg ._ddegf };
type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_bgb *GenericRefinementRegion )getPixel (_gde *_ac .Bitmap ,_bba ,_cdge int )int {if _bba < 0||_bba >=_gde .Width {return 0;};if _cdge < 0||_cdge >=_gde .Height {return 0;
};if _gde .GetPixel (_bba ,_cdge ){return 1;};return 0;};func (_bbeg *SymbolDictionary )decodeAggregate (_fede ,_agcb uint32 )error {var (_gefg int64 ;_becd error ;);if _bbeg .IsHuffmanEncoded {_gefg ,_becd =_bbeg .huffDecodeRefAggNInst ();if _becd !=nil {return _becd ;
};}else {_edgd ,_ffde :=_bbeg ._debf .DecodeInt (_bbeg ._abegg );if _ffde !=nil {return _ffde ;};_gefg =int64 (_edgd );};if _gefg > 1{return _bbeg .decodeThroughTextRegion (_fede ,_agcb ,uint32 (_gefg ));}else if _gefg ==1{return _bbeg .decodeRefinedSymbol (_fede ,_agcb );
};return nil ;};func (_agcc *SymbolDictionary )encodeNumSyms (_efbbe _c .BinaryWriter )(_bbgd int ,_bebefe error ){const _cfbe ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";_egbg :=make ([]byte ,4);_db .BigEndian .PutUint32 (_egbg ,_agcc .NumberOfExportedSymbols );
if _bbgd ,_bebefe =_efbbe .Write (_egbg );_bebefe !=nil {return _bbgd ,_ff .Wrap (_bebefe ,_cfbe ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};_db .BigEndian .PutUint32 (_egbg ,_agcc .NumberOfNewSymbols );
_gefd ,_bebefe :=_efbbe .Write (_egbg );if _bebefe !=nil {return _bbgd ,_ff .Wrap (_bebefe ,_cfbe ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _bbgd +_gefd ,nil ;};func (_cddf *SymbolDictionary )getSymbol (_debe int )(*_ac .Bitmap ,error ){const _dfcbb ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";
_egca ,_acgb :=_cddf ._aeda .GetBitmap (_cddf ._abaa [_debe ]);if _acgb !=nil {return nil ,_ff .Wrap (_acgb ,_dfcbb ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");};return _egca ,nil ;};func (_gfeg *TextRegion )symbolIDCodeLengths ()error {var (_eade []*_bc .Code ;
_dcfg uint64 ;_ccbb _bc .Tabler ;_adfg error ;);for _gddf :=0;_gddf < 35;_gddf ++{_dcfg ,_adfg =_gfeg ._egaf .ReadBits (4);if _adfg !=nil {return _adfg ;};_gcgf :=int (_dcfg &0xf);if _gcgf > 0{_eade =append (_eade ,_bc .NewCode (int32 (_gcgf ),0,int32 (_gddf ),false ));
};};_ccbb ,_adfg =_bc .NewFixedSizeTable (_eade );if _adfg !=nil {return _adfg ;};var (_bggc int64 ;_ccaae uint32 ;_cgge []*_bc .Code ;_ddbg int64 ;);for _ccaae < _gfeg .NumberOfSymbols {_ddbg ,_adfg =_ccbb .Decode (_gfeg ._egaf );if _adfg !=nil {return _adfg ;
};if _ddbg < 32{if _ddbg > 0{_cgge =append (_cgge ,_bc .NewCode (int32 (_ddbg ),0,int32 (_ccaae ),false ));};_bggc =_ddbg ;_ccaae ++;}else {var _fgbg ,_fdda int64 ;switch _ddbg {case 32:_dcfg ,_adfg =_gfeg ._egaf .ReadBits (2);if _adfg !=nil {return _adfg ;
};_fgbg =3+int64 (_dcfg );if _ccaae > 0{_fdda =_bggc ;};case 33:_dcfg ,_adfg =_gfeg ._egaf .ReadBits (3);if _adfg !=nil {return _adfg ;};_fgbg =3+int64 (_dcfg );case 34:_dcfg ,_adfg =_gfeg ._egaf .ReadBits (7);if _adfg !=nil {return _adfg ;};_fgbg =11+int64 (_dcfg );
};for _cddea :=0;_cddea < int (_fgbg );_cddea ++{if _fdda > 0{_cgge =append (_cgge ,_bc .NewCode (int32 (_fdda ),0,int32 (_ccaae ),false ));};_ccaae ++;};};};_gfeg ._egaf .Align ();_gfeg ._eefdd ,_adfg =_bc .NewFixedSizeTable (_cgge );return _adfg ;};func (_dcdg *SymbolDictionary )encodeSymbols (_bdfb _c .BinaryWriter )(_cccc int ,_efcc error ){const _fdff ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";
_ggde :=_ab .New ();_ggde .Init ();_dag ,_efcc :=_dcdg ._aeda .SelectByIndexes (_dcdg ._abaa );if _efcc !=nil {return 0,_ff .Wrap (_efcc ,_fdff ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_cbcfg :=map[*_ac .Bitmap ]int {};for _gfcb ,_aad :=range _dag .Values {_cbcfg [_aad ]=_gfcb ;
};_dag .SortByHeight ();var _dbcc ,_cfae int ;_bfgb ,_efcc :=_dag .GroupByHeight ();if _efcc !=nil {return 0,_ff .Wrap (_efcc ,_fdff ,"");};for _ ,_fada :=range _bfgb .Values {_ecdcg :=_fada .Values [0].Height ;_cecc :=_ecdcg -_dbcc ;if _efcc =_ggde .EncodeInteger (_ab .IADH ,_cecc );
_efcc !=nil {return 0,_ff .Wrapf (_efcc ,_fdff ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_cecc );};_dbcc =_ecdcg ;_fgee ,_dcgf :=_fada .GroupByWidth ();if _dcgf !=nil {return 0,_ff .Wrapf (_dcgf ,_fdff ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_ecdcg );
};var _bcceb int ;for _ ,_deca :=range _fgee .Values {for _ ,_cafg :=range _deca .Values {_cgcc :=_cafg .Width ;_efce :=_cgcc -_bcceb ;if _dcgf =_ggde .EncodeInteger (_ab .IADW ,_efce );_dcgf !=nil {return 0,_ff .Wrapf (_dcgf ,_fdff ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_efce );
};_bcceb +=_efce ;if _dcgf =_ggde .EncodeBitmap (_cafg ,false );_dcgf !=nil {return 0,_ff .Wrapf (_dcgf ,_fdff ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_ecdcg ,_cgcc );};_def :=_cbcfg [_cafg ];_dcdg ._bcge [_def ]=_cfae ;
_cfae ++;};};if _dcgf =_ggde .EncodeOOB (_ab .IADW );_dcgf !=nil {return 0,_ff .Wrap (_dcgf ,_fdff ,"\u0049\u0041\u0044\u0057");};};if _efcc =_ggde .EncodeInteger (_ab .IAEX ,0);_efcc !=nil {return 0,_ff .Wrap (_efcc ,_fdff ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _efcc =_ggde .EncodeInteger (_ab .IAEX ,len (_dcdg ._abaa ));_efcc !=nil {return 0,_ff .Wrap (_efcc ,_fdff ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_ggde .Final ();_eebf ,_efcc :=_ggde .WriteTo (_bdfb );
if _efcc !=nil {return 0,_ff .Wrap (_efcc ,_fdff ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};
return int (_eebf ),nil ;};func (_cbfd *TextRegion )decodeRdw ()(int64 ,error ){const _ffbca ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _cbfd .IsHuffmanEncoded {if _cbfd .SbHuffRDWidth ==3{if _cbfd ._ebef ==nil {var (_gedb int ;_bgda error ;);if _cbfd .SbHuffFS ==3{_gedb ++;
};if _cbfd .SbHuffDS ==3{_gedb ++;};if _cbfd .SbHuffDT ==3{_gedb ++;};_cbfd ._ebef ,_bgda =_cbfd .getUserTable (_gedb );if _bgda !=nil {return 0,_ff .Wrap (_bgda ,_ffbca ,"");};};return _cbfd ._ebef .Decode (_cbfd ._egaf );};_fbeb ,_cddd :=_bc .GetStandardTable (14+int (_cbfd .SbHuffRDWidth ));
if _cddd !=nil {return 0,_ff .Wrap (_cddd ,_ffbca ,"");};return _fbeb .Decode (_cbfd ._egaf );};_ggede ,_aeead :=_cbfd ._gefgc .DecodeInt (_cbfd ._cfeb );if _aeead !=nil {return 0,_ff .Wrap (_aeead ,_ffbca ,"");};return int64 (_ggede ),nil ;};func (_cddb *SymbolDictionary )checkInput ()error {if _cddb .SdHuffDecodeHeightSelection ==2{_bg .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_cddb .SdHuffDecodeHeightSelection );
};if _cddb .SdHuffDecodeWidthSelection ==2{_bg .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_cddb .SdHuffDecodeWidthSelection );
};if _cddb .IsHuffmanEncoded {if _cddb .SdTemplate !=0{_bg .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_cddb .SdTemplate );
};if !_cddb .UseRefinementAggregation {if !_cddb .UseRefinementAggregation {if _cddb ._bbcf {_bg .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_cddb ._bbcf =false ;};if _cddb ._gdcg {_bg .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_cddb ._gdcg =false ;};};};}else {if _cddb .SdHuffBMSizeSelection !=0{_bg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_cddb .SdHuffBMSizeSelection =0;};if _cddb .SdHuffDecodeWidthSelection !=0{_bg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_cddb .SdHuffDecodeWidthSelection =0;};if _cddb .SdHuffDecodeHeightSelection !=0{_bg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_cddb .SdHuffDecodeHeightSelection =0;};};if !_cddb .UseRefinementAggregation {if _cddb .SdrTemplate !=0{_bg .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_cddb .SdrTemplate );
_cddb .SdrTemplate =0;};};if !_cddb .IsHuffmanEncoded ||!_cddb .UseRefinementAggregation {if _cddb .SdHuffAggInstanceSelection {_bg .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_cddb .SdHuffAggInstanceSelection );
};};return nil ;};func (_eaag *GenericRefinementRegion )setParameters (_efc *_gf .DecoderStats ,_deg *_gf .Decoder ,_fdb int8 ,_dcf ,_bff uint32 ,_cbde *_ac .Bitmap ,_dbd ,_efgf int32 ,_dba bool ,_fdg []int8 ,_fdbb []int8 ){_bg .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _efc !=nil {_eaag ._gd =_efc ;};if _deg !=nil {_eaag ._ad =_deg ;};_eaag .TemplateID =_fdb ;_eaag .RegionInfo .BitmapWidth =_dcf ;_eaag .RegionInfo .BitmapHeight =_bff ;_eaag .ReferenceBitmap =_cbde ;_eaag .ReferenceDX =_dbd ;_eaag .ReferenceDY =_efgf ;
_eaag .IsTPGROn =_dba ;_eaag .GrAtX =_fdg ;_eaag .GrAtY =_fdbb ;_eaag .RegionBitmap =nil ;_bg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_eaag );
};type SymbolDictionary struct{_cfg *_c .Reader ;SdrTemplate int8 ;SdTemplate int8 ;_bbcf bool ;_gdcg bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;
IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_ebdd uint32 ;_adef []*_ac .Bitmap ;_cfab uint32 ;_geab []*_ac .Bitmap ;_bfeg _bc .Tabler ;_cfef _bc .Tabler ;
_eefdaa _bc .Tabler ;_decca _bc .Tabler ;_fabd []*_ac .Bitmap ;_fbfbc []*_ac .Bitmap ;_debf *_gf .Decoder ;_cegg *TextRegion ;_cbbab *GenericRegion ;_ddgf *GenericRefinementRegion ;_afcd *_gf .DecoderStats ;_fabc *_gf .DecoderStats ;_ebgf *_gf .DecoderStats ;
_abegg *_gf .DecoderStats ;_gacd *_gf .DecoderStats ;_efcfc *_gf .DecoderStats ;_aabg *_gf .DecoderStats ;_gbed *_gf .DecoderStats ;_baa *_gf .DecoderStats ;_aacc int8 ;_aeda *_ac .Bitmaps ;_abaa []int ;_bcge map[int ]int ;_gegaf bool ;};func (_bded *Header )CleanSegmentData (){if _bded .SegmentData !=nil {_bded .SegmentData =nil ;
};};func (_fdde *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_aebf int ;_abec int32 ;_ggbaa error ;_cbdbc =int32 (_fdde ._ebdd +_fdde .NumberOfNewSymbols );_bgd =make ([]int ,_cbdbc ););for _bef :=int32 (0);_bef < _cbdbc ;_bef +=_abec {if _fdde .IsHuffmanEncoded {_fdag ,_fabda :=_bc .GetStandardTable (1);
if _fabda !=nil {return nil ,_fabda ;};_addg ,_fabda :=_fdag .Decode (_fdde ._cfg );if _fabda !=nil {return nil ,_fabda ;};_abec =int32 (_addg );}else {_abec ,_ggbaa =_fdde ._debf .DecodeInt (_fdde ._gacd );if _ggbaa !=nil {return nil ,_ggbaa ;};};if _abec !=0{if _bef +_abec > _cbdbc {return nil ,_ff .Error ("\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0067\u0065\u0074T\u006f\u0045\u0078\u0070\u006f\u0072\u0074F\u006c\u0061\u0067\u0073","\u006d\u0061\u006c\u0066\u006f\u0072m\u0065\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0064\u0061\u0074\u0061\u0020\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u002e\u0020\u0069\u006e\u0064\u0065\u0078\u0020\u006f\u0075\u0074\u0020\u006ff\u0020r\u0061\u006e\u0067\u0065");
};for _dceb :=_bef ;_dceb < _bef +_abec ;_dceb ++{_bgd [_dceb ]=_aebf ;};};if _aebf ==0{_aebf =1;}else {_aebf =0;};};return _bgd ,nil ;};type TableSegment struct{_ccbd *_c .Reader ;_cgaca int32 ;_fddb int32 ;_ddegf int32 ;_edgg int32 ;_dcag int32 ;};var _ _bc .BasicTabler =&TableSegment {};
func (_gce *HalftoneRegion )GetRegionBitmap ()(*_ac .Bitmap ,error ){if _gce .HalftoneRegionBitmap !=nil {return _gce .HalftoneRegionBitmap ,nil ;};var _aaga error ;_gce .HalftoneRegionBitmap =_ac .New (int (_gce .RegionSegment .BitmapWidth ),int (_gce .RegionSegment .BitmapHeight ));
if _gce .Patterns ==nil ||len (_gce .Patterns )==0{_gce .Patterns ,_aaga =_gce .GetPatterns ();if _aaga !=nil {return nil ,_aaga ;};};if _gce .HDefaultPixel ==1{_gce .HalftoneRegionBitmap .SetDefaultPixel ();};_ffbc :=_d .Ceil (_d .Log (float64 (len (_gce .Patterns )))/_d .Log (2));
_edbf :=int (_ffbc );var _gee [][]int ;_gee ,_aaga =_gce .grayScaleDecoding (_edbf );if _aaga !=nil {return nil ,_aaga ;};if _aaga =_gce .renderPattern (_gee );_aaga !=nil {return nil ,_aaga ;};return _gce .HalftoneRegionBitmap ,nil ;};var (_bacf Segmenter ;
_fcd =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _bacf },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _bacf },TProfiles :func ()Segmenter {return _bacf },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _bacf },TBitmap :func ()Segmenter {return _bacf }};
);func (_ageb *GenericRegion )String ()string {_aff :=&_b .Builder {};_aff .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_aff .WriteString (_ageb .RegionSegment .String ()+"\u000a");_aff .WriteString (_g .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_ageb .UseExtTemplates ));
_aff .WriteString (_g .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_ageb .IsTPGDon ));_aff .WriteString (_g .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_ageb .GBTemplate ));
_aff .WriteString (_g .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_ageb .IsMMREncoded ));_aff .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_ageb .GBAtX ));
_aff .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_ageb .GBAtY ));_aff .WriteString (_g .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_ageb .GBAtOverride ));
return _aff .String ();};func (_aaa *GenericRegion )GetRegionBitmap ()(_fgag *_ac .Bitmap ,_eeda error ){if _aaa .Bitmap !=nil {return _aaa .Bitmap ,nil ;};if _aaa .IsMMREncoded {if _aaa ._bbf ==nil {_aaa ._bbf ,_eeda =_eee .New (_aaa ._cc ,int (_aaa .RegionSegment .BitmapWidth ),int (_aaa .RegionSegment .BitmapHeight ),_aaa .DataOffset ,_aaa .DataLength );
if _eeda !=nil {return nil ,_eeda ;};};_aaa .Bitmap ,_eeda =_aaa ._bbf .UncompressMMR ();return _aaa .Bitmap ,_eeda ;};if _eeda =_aaa .updateOverrideFlags ();_eeda !=nil {return nil ,_eeda ;};var _gbgde int ;if _aaa ._eeea ==nil {_aaa ._eeea ,_eeda =_gf .New (_aaa ._cc );
if _eeda !=nil {return nil ,_eeda ;};};if _aaa ._ccg ==nil {_aaa ._ccg =_gf .NewStats (65536,1);};_aaa .Bitmap =_ac .New (int (_aaa .RegionSegment .BitmapWidth ),int (_aaa .RegionSegment .BitmapHeight ));_cff :=int (uint32 (_aaa .Bitmap .Width +7)&(^uint32 (7)));
for _aaaf :=0;_aaaf < _aaa .Bitmap .Height ;_aaaf ++{if _aaa .IsTPGDon {var _age int ;_age ,_eeda =_aaa .decodeSLTP ();if _eeda !=nil {return nil ,_eeda ;};_gbgde ^=_age ;};if _gbgde ==1{if _aaaf > 0{if _eeda =_aaa .copyLineAbove (_aaaf );_eeda !=nil {return nil ,_eeda ;
};};}else {if _eeda =_aaa .decodeLine (_aaaf ,_aaa .Bitmap .Width ,_cff );_eeda !=nil {return nil ,_eeda ;};};};return _aaa .Bitmap ,nil ;};func (_bdafd *TableSegment )HtHigh ()int32 {return _bdafd ._dcag };func (_gff *GenericRefinementRegion )updateOverride ()error {if _gff .GrAtX ==nil ||_gff .GrAtY ==nil {return _ea .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_gff .GrAtX )!=len (_gff .GrAtY ){return _ea .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_gff ._fc =make ([]bool ,len (_gff .GrAtX ));switch _gff .TemplateID {case 0:if _gff .GrAtX [0]!=-1&&_gff .GrAtY [0]!=-1{_gff ._fc [0]=true ;
_gff ._eb =true ;};if _gff .GrAtX [1]!=-1&&_gff .GrAtY [1]!=-1{_gff ._fc [1]=true ;_gff ._eb =true ;};case 1:_gff ._eb =false ;};return nil ;};func (_face *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_gega ,_fdgb :=_face ._fdeg .ReadBit ();
if _fdgb !=nil {return _fdgb ;};if _gega ==1{_face ._eaadb =true ;};return nil ;};func (_cf *GenericRefinementRegion )getGrReference ()(*_ac .Bitmap ,error ){segments :=_cf ._fg .RTSegments ;if len (segments )==0{return nil ,_ea .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");
};_af ,_gfd :=segments [0].GetSegmentData ();if _gfd !=nil {return nil ,_gfd ;};_aba ,_fcf :=_af .(Regioner );if !_fcf {return nil ,_g .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_af );
};return _aba .GetRegionBitmap ();};var _ SegmentEncoder =&GenericRegion {};type Type int ;func (_gcag *SymbolDictionary )readNumberOfExportedSymbols ()error {_bbgab ,_cgaf :=_gcag ._cfg .ReadBits (32);if _cgaf !=nil {return _cgaf ;};_gcag .NumberOfExportedSymbols =uint32 (_bbgab &_d .MaxUint32 );
return nil ;};func (_adab *PatternDictionary )readPatternWidthAndHeight ()error {_adgc ,_gebd :=_adab ._cgfbc .ReadByte ();if _gebd !=nil {return _gebd ;};_adab .HdpWidth =_adgc ;_adgc ,_gebd =_adab ._cgfbc .ReadByte ();if _gebd !=nil {return _gebd ;};
_adab .HdpHeight =_adgc ;return nil ;};type Segmenter interface{Init (_ffad *Header ,_dgac *_c .Reader )error ;};func (_cabd *SymbolDictionary )decodeThroughTextRegion (_fgdb ,_cedf ,_eaec uint32 )error {if _cabd ._cegg ==nil {_cabd ._cegg =_dgcf (_cabd ._cfg ,nil );
_cabd ._cegg .setContexts (_cabd ._afcd ,_gf .NewStats (512,1),_gf .NewStats (512,1),_gf .NewStats (512,1),_gf .NewStats (512,1),_cabd ._baa ,_gf .NewStats (512,1),_gf .NewStats (512,1),_gf .NewStats (512,1),_gf .NewStats (512,1));};if _agec :=_cabd .setSymbolsArray ();
_agec !=nil {return _agec ;};_cabd ._cegg .setParameters (_cabd ._debf ,_cabd .IsHuffmanEncoded ,true ,_fgdb ,_cedf ,_eaec ,1,_cabd ._ebdd +_cabd ._cfab ,0,0,0,1,0,0,0,0,0,0,0,0,0,_cabd .SdrTemplate ,_cabd .SdrATX ,_cabd .SdrATY ,_cabd ._fbfbc ,_cabd ._aacc );
return _cabd .addSymbol (_cabd ._cegg );};func (_dae *Header )pageSize ()uint {if _dae .PageAssociation <=255{return 1;};return 4;};func (_beec *TextRegion )decodeDT ()(_gfea int64 ,_feaa error ){if _beec .IsHuffmanEncoded {if _beec .SbHuffDT ==3{_gfea ,_feaa =_beec ._afca .Decode (_beec ._egaf );
if _feaa !=nil {return 0,_feaa ;};}else {var _gbebg _bc .Tabler ;_gbebg ,_feaa =_bc .GetStandardTable (11+int (_beec .SbHuffDT ));if _feaa !=nil {return 0,_feaa ;};_gfea ,_feaa =_gbebg .Decode (_beec ._egaf );if _feaa !=nil {return 0,_feaa ;};};}else {var _egafe int32 ;
_egafe ,_feaa =_beec ._gefgc .DecodeInt (_beec ._cbbe );if _feaa !=nil {return ;};_gfea =int64 (_egafe );};_gfea *=int64 (_beec .SbStrips );return _gfea ,nil ;};func (_decc *Header )writeSegmentNumber (_bdbb _c .BinaryWriter )(_fedb int ,_ecbg error ){_gegc :=make ([]byte ,4);
_db .BigEndian .PutUint32 (_gegc ,_decc .SegmentNumber );if _fedb ,_ecbg =_bdbb .Write (_gegc );_ecbg !=nil {return 0,_ff .Wrap (_ecbg ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _fedb ,nil ;};func _adba (_aee int )int {if _aee ==0{return 0;};_aee |=_aee >>1;_aee |=_aee >>2;_aee |=_aee >>4;_aee |=_aee >>8;_aee |=_aee >>16;return (_aee +1)>>1;};func (_ccba *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _ccba ._cdac };
type GenericRegion struct{_cc *_c .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;
GBAtY []int8 ;GBAtOverride []bool ;_aabf bool ;Bitmap *_ac .Bitmap ;_eeea *_gf .Decoder ;_ccg *_gf .DecoderStats ;_bbf *_eee .Decoder ;};func (_egggb *TextRegion )readRegionFlags ()error {var (_eccb int ;_eacb uint64 ;_cdda error ;);_eccb ,_cdda =_egggb ._egaf .ReadBit ();
if _cdda !=nil {return _cdda ;};_egggb .SbrTemplate =int8 (_eccb );_eacb ,_cdda =_egggb ._egaf .ReadBits (5);if _cdda !=nil {return _cdda ;};_egggb .SbDsOffset =int8 (_eacb );if _egggb .SbDsOffset > 0x0f{_egggb .SbDsOffset -=0x20;};_eccb ,_cdda =_egggb ._egaf .ReadBit ();
if _cdda !=nil {return _cdda ;};_egggb .DefaultPixel =int8 (_eccb );_eacb ,_cdda =_egggb ._egaf .ReadBits (2);if _cdda !=nil {return _cdda ;};_egggb .CombinationOperator =_ac .CombinationOperator (int (_eacb )&0x3);_eccb ,_cdda =_egggb ._egaf .ReadBit ();
if _cdda !=nil {return _cdda ;};_egggb .IsTransposed =int8 (_eccb );_eacb ,_cdda =_egggb ._egaf .ReadBits (2);if _cdda !=nil {return _cdda ;};_egggb .ReferenceCorner =int16 (_eacb )&0x3;_eacb ,_cdda =_egggb ._egaf .ReadBits (2);if _cdda !=nil {return _cdda ;
};_egggb .LogSBStrips =int16 (_eacb )&0x3;_egggb .SbStrips =1<<uint (_egggb .LogSBStrips );_eccb ,_cdda =_egggb ._egaf .ReadBit ();if _cdda !=nil {return _cdda ;};if _eccb ==1{_egggb .UseRefinement =true ;};_eccb ,_cdda =_egggb ._egaf .ReadBit ();if _cdda !=nil {return _cdda ;
};if _eccb ==1{_egggb .IsHuffmanEncoded =true ;};return nil ;};func (_eefba *PageInformationSegment )checkInput ()error {if _eefba .PageBMHeight ==_d .MaxInt32 {if !_eefba .IsStripe {_bg .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_cgae *GenericRegion )setParametersWithAt (_bdbe bool ,_eaeg byte ,_cfca ,_egg bool ,_cffd ,_bee []int8 ,_adadb ,_gab uint32 ,_bcce *_gf .DecoderStats ,_fegd *_gf .Decoder ){_cgae .IsMMREncoded =_bdbe ;_cgae .GBTemplate =_eaeg ;
_cgae .IsTPGDon =_cfca ;_cgae .GBAtX =_cffd ;_cgae .GBAtY =_bee ;_cgae .RegionSegment .BitmapHeight =_gab ;_cgae .RegionSegment .BitmapWidth =_adadb ;_cgae ._bbf =nil ;_cgae .Bitmap =nil ;if _bcce !=nil {_cgae ._ccg =_bcce ;};if _fegd !=nil {_cgae ._eeea =_fegd ;
};_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_cgae );};func (_edeg *GenericRegion )updateOverrideFlags ()error {const _efgd ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _edeg .GBAtX ==nil ||_edeg .GBAtY ==nil {return nil ;};if len (_edeg .GBAtX )!=len (_edeg .GBAtY ){return _ff .Errorf (_efgd ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_edeg .GBAtX ),len (_edeg .GBAtY ));
};_edeg .GBAtOverride =make ([]bool ,len (_edeg .GBAtX ));switch _edeg .GBTemplate {case 0:if !_edeg .UseExtTemplates {if _edeg .GBAtX [0]!=3||_edeg .GBAtY [0]!=-1{_edeg .setOverrideFlag (0);};if _edeg .GBAtX [1]!=-3||_edeg .GBAtY [1]!=-1{_edeg .setOverrideFlag (1);
};if _edeg .GBAtX [2]!=2||_edeg .GBAtY [2]!=-2{_edeg .setOverrideFlag (2);};if _edeg .GBAtX [3]!=-2||_edeg .GBAtY [3]!=-2{_edeg .setOverrideFlag (3);};}else {if _edeg .GBAtX [0]!=-2||_edeg .GBAtY [0]!=0{_edeg .setOverrideFlag (0);};if _edeg .GBAtX [1]!=0||_edeg .GBAtY [1]!=-2{_edeg .setOverrideFlag (1);
};if _edeg .GBAtX [2]!=-2||_edeg .GBAtY [2]!=-1{_edeg .setOverrideFlag (2);};if _edeg .GBAtX [3]!=-1||_edeg .GBAtY [3]!=-2{_edeg .setOverrideFlag (3);};if _edeg .GBAtX [4]!=1||_edeg .GBAtY [4]!=-2{_edeg .setOverrideFlag (4);};if _edeg .GBAtX [5]!=2||_edeg .GBAtY [5]!=-1{_edeg .setOverrideFlag (5);
};if _edeg .GBAtX [6]!=-3||_edeg .GBAtY [6]!=0{_edeg .setOverrideFlag (6);};if _edeg .GBAtX [7]!=-4||_edeg .GBAtY [7]!=0{_edeg .setOverrideFlag (7);};if _edeg .GBAtX [8]!=2||_edeg .GBAtY [8]!=-2{_edeg .setOverrideFlag (8);};if _edeg .GBAtX [9]!=3||_edeg .GBAtY [9]!=-1{_edeg .setOverrideFlag (9);
};if _edeg .GBAtX [10]!=-2||_edeg .GBAtY [10]!=-2{_edeg .setOverrideFlag (10);};if _edeg .GBAtX [11]!=-3||_edeg .GBAtY [11]!=-1{_edeg .setOverrideFlag (11);};};case 1:if _edeg .GBAtX [0]!=3||_edeg .GBAtY [0]!=-1{_edeg .setOverrideFlag (0);};case 2:if _edeg .GBAtX [0]!=2||_edeg .GBAtY [0]!=-1{_edeg .setOverrideFlag (0);
};case 3:if _edeg .GBAtX [0]!=2||_edeg .GBAtY [0]!=-1{_edeg .setOverrideFlag (0);};};return nil ;};func (_ddde *Header )Encode (w _c .BinaryWriter )(_bfec int ,_efbg error ){const _caeg ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";
var _gceg _c .BinaryWriter ;_bg .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _efbg !=nil {_bg .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_efbg );
}else {_bg .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_ddde );_bg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _ddde .SegmentData !=nil {_aga ,_cfed :=_ddde .SegmentData .(SegmentEncoder );if !_cfed {return 0,_ff .Errorf (_caeg ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_ddde .SegmentData );
};_gceg =_c .BufferedMSB ();_bfec ,_efbg =_aga .Encode (_gceg );if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");};_ddde .SegmentDataLength =uint64 (_bfec );};if _ddde .pageSize ()==4{_ddde .PageAssociationFieldSize =true ;};var _bcec int ;_bcec ,_efbg =_ddde .writeSegmentNumber (w );
if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");};_bfec +=_bcec ;if _efbg =_ddde .writeFlags (w );_efbg !=nil {return _bfec ,_ff .Wrap (_efbg ,_caeg ,"");};_bfec ++;_bcec ,_efbg =_ddde .writeReferredToCount (w );if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");
};_bfec +=_bcec ;_bcec ,_efbg =_ddde .writeReferredToSegments (w );if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");};_bfec +=_bcec ;_bcec ,_efbg =_ddde .writeSegmentPageAssociation (w );if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");};_bfec +=_bcec ;
_bcec ,_efbg =_ddde .writeSegmentDataLength (w );if _efbg !=nil {return 0,_ff .Wrap (_efbg ,_caeg ,"");};_bfec +=_bcec ;_ddde .HeaderLength =int64 (_bfec )-int64 (_ddde .SegmentDataLength );if _gceg !=nil {if _ ,_efbg =w .Write (_gceg .Data ());_efbg !=nil {return _bfec ,_ff .Wrap (_efbg ,_caeg ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _bfec ,nil ;};func (_fadac *SymbolDictionary )addSymbol (_badb Regioner )error {_ggbb ,_dgcb :=_badb .GetRegionBitmap ();if _dgcb !=nil {return _dgcb ;};_fadac ._geab [_fadac ._cfab ]=_ggbb ;_fadac ._fbfbc =append (_fadac ._fbfbc ,_ggbb );_bg .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_ggbb );
return nil ;};func (_fgg *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _fgg .RegionInfo };type RegionSegment struct{_dgfd *_c .Reader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _ac .CombinationOperator ;
};func (_dafa *TextRegion )encodeFlags (_gcbb _c .BinaryWriter )(_agdb int ,_bffd error ){const _bedc ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _bffd =_gcbb .WriteBit (int (_dafa .SbrTemplate ));_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _ ,_bffd =_gcbb .WriteBits (uint64 (_dafa .SbDsOffset ),5);_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");};if _bffd =_gcbb .WriteBit (int (_dafa .DefaultPixel ));_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");
};if _ ,_bffd =_gcbb .WriteBits (uint64 (_dafa .CombinationOperator ),2);_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _bffd =_gcbb .WriteBit (int (_dafa .IsTransposed ));
_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");};if _ ,_bffd =_gcbb .WriteBits (uint64 (_dafa .ReferenceCorner ),2);_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");
};if _ ,_bffd =_gcbb .WriteBits (uint64 (_dafa .LogSBStrips ),2);_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _ecfe int ;if _dafa .UseRefinement {_ecfe =1;};if _bffd =_gcbb .WriteBit (_ecfe );
_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");};_ecfe =0;if _dafa .IsHuffmanEncoded {_ecfe =1;};if _bffd =_gcbb .WriteBit (_ecfe );_bffd !=nil {return _agdb ,_ff .Wrap (_bffd ,_bedc ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");
};_agdb =2;return _agdb ,nil ;};func (_dcfag *RegionSegment )Encode (w _c .BinaryWriter )(_gca int ,_acfg error ){const _gdgc ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";_cebc :=make ([]byte ,4);_db .BigEndian .PutUint32 (_cebc ,_dcfag .BitmapWidth );
_gca ,_acfg =w .Write (_cebc );if _acfg !=nil {return 0,_ff .Wrap (_acfg ,_gdgc ,"\u0057\u0069\u0064t\u0068");};_db .BigEndian .PutUint32 (_cebc ,_dcfag .BitmapHeight );var _gdbd int ;_gdbd ,_acfg =w .Write (_cebc );if _acfg !=nil {return 0,_ff .Wrap (_acfg ,_gdgc ,"\u0048\u0065\u0069\u0067\u0068\u0074");
};_gca +=_gdbd ;_db .BigEndian .PutUint32 (_cebc ,_dcfag .XLocation );_gdbd ,_acfg =w .Write (_cebc );if _acfg !=nil {return 0,_ff .Wrap (_acfg ,_gdgc ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");};_gca +=_gdbd ;_db .BigEndian .PutUint32 (_cebc ,_dcfag .YLocation );
_gdbd ,_acfg =w .Write (_cebc );if _acfg !=nil {return 0,_ff .Wrap (_acfg ,_gdgc ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_gca +=_gdbd ;if _acfg =w .WriteByte (byte (_dcfag .CombinaionOperator )&0x07);_acfg !=nil {return 0,_ff .Wrap (_acfg ,_gdgc ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");
};_gca ++;return _gca ,nil ;};func (_gdcf *Header )String ()string {_bdaaf :=&_b .Builder {};_bdaaf .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");_bdaaf .WriteString (_g .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_gdcf .SegmentNumber ));
_bdaaf .WriteString (_g .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_gdcf .Type ));_bdaaf .WriteString (_g .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_gdcf .RetainFlag ));
_bdaaf .WriteString (_g .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_gdcf .PageAssociation ));_bdaaf .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_gdcf .PageAssociationFieldSize ));
_bdaaf .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_gfgg :=range _gdcf .RTSNumbers {_bdaaf .WriteString (_g .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_gfgg ));};_bdaaf .WriteString (_g .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_gdcf .HeaderLength ));
_bdaaf .WriteString (_g .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_gdcf .SegmentDataLength ));_bdaaf .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_gdcf .SegmentDataStartOffset ));
return _bdaaf .String ();};func _dgcf (_gfdf *_c .Reader ,_dfbc *Header )*TextRegion {_dbce :=&TextRegion {_egaf :_gfdf ,Header :_dfbc ,RegionInfo :NewRegionSegment (_gfdf )};return _dbce ;};func (_ebda *SymbolDictionary )String ()string {_dgbg :=&_b .Builder {};
_dgbg .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_dgbg .WriteString (_g .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_ebda .SdrTemplate ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_ebda .SdTemplate ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_ebda ._bbcf ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_ebda ._gdcg ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_ebda .SdHuffAggInstanceSelection ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_ebda .SdHuffBMSizeSelection ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_ebda .SdHuffDecodeWidthSelection ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_ebda .SdHuffDecodeHeightSelection ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_ebda .UseRefinementAggregation ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_ebda .IsHuffmanEncoded ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_ebda .SdATX ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_ebda .SdATY ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_ebda .SdrATX ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_ebda .SdrATY ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_ebda .NumberOfExportedSymbols ));_dgbg .WriteString (_g .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_ebda .NumberOfNewSymbols ));
_dgbg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_ebda ._ebdd ));_dgbg .WriteString (_g .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_ebda ._cfab ));
return _dgbg .String ();};func (_bdbg *TextRegion )computeSymbolCodeLength ()error {if _bdbg .IsHuffmanEncoded {return _bdbg .symbolIDCodeLengths ();};_bdbg ._fgbc =int8 (_d .Ceil (_d .Log (float64 (_bdbg .NumberOfSymbols ))/_d .Log (2)));return nil ;};
func (_facg *Header )referenceSize ()uint {switch {case _facg .SegmentNumber <=255:return 1;case _facg .SegmentNumber <=65535:return 2;default:return 4;};};func (_ebgb *GenericRegion )setParameters (_dbf bool ,_cec ,_gebbb int64 ,_afag ,_eacd uint32 ){_ebgb .IsMMREncoded =_dbf ;
_ebgb .DataOffset =_cec ;_ebgb .DataLength =_gebbb ;_ebgb .RegionSegment .BitmapHeight =_afag ;_ebgb .RegionSegment .BitmapWidth =_eacd ;_ebgb ._bbf =nil ;_ebgb .Bitmap =nil ;};func (_fbd *PatternDictionary )parseHeader ()error {_bg .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_bg .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_fbdd :=_fbd ._cgfbc .ReadBits (5);if _fbdd !=nil {return _fbdd ;};if _fbdd =_fbd .readTemplate ();_fbdd !=nil {return _fbdd ;};if _fbdd =_fbd .readIsMMREncoded ();_fbdd !=nil {return _fbdd ;};if _fbdd =_fbd .readPatternWidthAndHeight ();_fbdd !=nil {return _fbdd ;
};if _fbdd =_fbd .readGrayMax ();_fbdd !=nil {return _fbdd ;};if _fbdd =_fbd .computeSegmentDataStructure ();_fbdd !=nil {return _fbdd ;};return _fbd .checkInput ();};func (_gdf *GenericRegion )decodeTemplate3 (_abf ,_bafe ,_gffd int ,_daf ,_fac int )(_fdec error ){const _gbee ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_faaa ,_fgc int ;_cbdb int ;_dgf byte ;_dgcd ,_adbe int ;);if _abf >=1{_dgf ,_fdec =_gdf .Bitmap .GetByte (_fac );if _fdec !=nil {return _ff .Wrap (_fdec ,_gbee ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_cbdb =int (_dgf );};_faaa =(_cbdb >>1)&0x70;
for _cgg :=0;_cgg < _gffd ;_cgg =_dgcd {var (_adaf byte ;_gbgf int ;);_dgcd =_cgg +8;if _cgff :=_bafe -_cgg ;_cgff > 8{_gbgf =8;}else {_gbgf =_cgff ;};if _abf >=1{_cbdb <<=8;if _dgcd < _bafe {_dgf ,_fdec =_gdf .Bitmap .GetByte (_fac +1);if _fdec !=nil {return _ff .Wrap (_fdec ,_gbee ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_cbdb |=int (_dgf );};};for _ccc :=0;_ccc < _gbgf ;_ccc ++{if _gdf ._aabf {_fgc =_gdf .overrideAtTemplate3 (_faaa ,_cgg +_ccc ,_abf ,int (_adaf ),_ccc );_gdf ._ccg .SetIndex (int32 (_fgc ));}else {_gdf ._ccg .SetIndex (int32 (_faaa ));};_adbe ,_fdec =_gdf ._eeea .DecodeBit (_gdf ._ccg );
if _fdec !=nil {return _ff .Wrap (_fdec ,_gbee ,"");};_adaf |=byte (_adbe )<<byte (7-_ccc );_faaa =((_faaa &0x1f7)<<1)|_adbe |((_cbdb >>uint (8-_ccc ))&0x010);};if _aaag :=_gdf .Bitmap .SetByte (_daf ,_adaf );_aaag !=nil {return _ff .Wrap (_aaag ,_gbee ,"");
};_daf ++;_fac ++;};return nil ;};func (_gafag *PageInformationSegment )readIsStriped ()error {_faab ,_gdge :=_gafag ._fdeg .ReadBit ();if _gdge !=nil {return _gdge ;};if _faab ==1{_gafag .IsStripe =true ;};return nil ;};func (_cbc *GenericRegion )decodeLine (_ege ,_edb ,_bcdb int )error {const _ffff ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";
_cbeg :=_cbc .Bitmap .GetByteIndex (0,_ege );_bbg :=_cbeg -_cbc .Bitmap .RowStride ;switch _cbc .GBTemplate {case 0:if !_cbc .UseExtTemplates {return _cbc .decodeTemplate0a (_ege ,_edb ,_bcdb ,_cbeg ,_bbg );};return _cbc .decodeTemplate0b (_ege ,_edb ,_bcdb ,_cbeg ,_bbg );
case 1:return _cbc .decodeTemplate1 (_ege ,_edb ,_bcdb ,_cbeg ,_bbg );case 2:return _cbc .decodeTemplate2 (_ege ,_edb ,_bcdb ,_cbeg ,_bbg );case 3:return _cbc .decodeTemplate3 (_ege ,_edb ,_bcdb ,_cbeg ,_bbg );};return _ff .Errorf (_ffff ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_cbc .GBTemplate );
};func (_ffdfg *Header )GetSegmentData ()(Segmenter ,error ){var _gafac Segmenter ;if _ffdfg .SegmentData !=nil {_gafac =_ffdfg .SegmentData ;};if _gafac ==nil {_gecdf ,_ecef :=_fcd [_ffdfg .Type ];if !_ecef {return nil ,_g .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_ffdfg .Type ,_ffdfg .Type );
};_gafac =_gecdf ();_bg .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_ffdfg .SegmentNumber ,_ffdfg .SegmentDataStartOffset );
_ebfe ,_cega :=_ffdfg .subInputReader ();if _cega !=nil {return nil ,_cega ;};if _cfcd :=_gafac .Init (_ffdfg ,_ebfe );_cfcd !=nil {_bg .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_cfcd ,_gafac );
return nil ,_cfcd ;};_ffdfg .SegmentData =_gafac ;};return _gafac ,nil ;};func (_eefd *GenericRefinementRegion )overrideAtTemplate0 (_daa ,_ggd ,_aaf ,_cdcf ,_cef int )int {if _eefd ._fc [0]{_daa &=0xfff7;if _eefd .GrAtY [0]==0&&int (_eefd .GrAtX [0])>=-_cef {_daa |=(_cdcf >>uint (7-(_cef +int (_eefd .GrAtX [0])))&0x1)<<3;
}else {_daa |=_eefd .getPixel (_eefd .RegionBitmap ,_ggd +int (_eefd .GrAtX [0]),_aaf +int (_eefd .GrAtY [0]))<<3;};};if _eefd ._fc [1]{_daa &=0xefff;if _eefd .GrAtY [1]==0&&int (_eefd .GrAtX [1])>=-_cef {_daa |=(_cdcf >>uint (7-(_cef +int (_eefd .GrAtX [1])))&0x1)<<12;
}else {_daa |=_eefd .getPixel (_eefd .ReferenceBitmap ,_ggd +int (_eefd .GrAtX [1]),_aaf +int (_eefd .GrAtY [1]));};};return _daa ;};func (_bffa *SymbolDictionary )Encode (w _c .BinaryWriter )(_cffc int ,_cee error ){const _bbed ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _bffa ==nil {return 0,_ff .Error (_bbed ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _cffc ,_cee =_bffa .encodeFlags (w );_cee !=nil {return _cffc ,_ff .Wrap (_cee ,_bbed ,"");
};_debd ,_cee :=_bffa .encodeATFlags (w );if _cee !=nil {return _cffc ,_ff .Wrap (_cee ,_bbed ,"");};_cffc +=_debd ;if _debd ,_cee =_bffa .encodeRefinementATFlags (w );_cee !=nil {return _cffc ,_ff .Wrap (_cee ,_bbed ,"");};_cffc +=_debd ;if _debd ,_cee =_bffa .encodeNumSyms (w );
_cee !=nil {return _cffc ,_ff .Wrap (_cee ,_bbed ,"");};_cffc +=_debd ;if _debd ,_cee =_bffa .encodeSymbols (w );_cee !=nil {return _cffc ,_ff .Wrap (_cee ,_bbed ,"");};_cffc +=_debd ;return _cffc ,nil ;};func (_eeebe *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _eeebe .IsHuffmanEncoded {switch _eeebe .SdHuffDecodeWidthSelection {case 0:_fgea ,_aaca :=_bc .GetStandardTable (2);
if _aaca !=nil {return 0,_aaca ;};return _fgea .Decode (_eeebe ._cfg );case 1:_geag ,_gbdgc :=_bc .GetStandardTable (3);if _gbdgc !=nil {return 0,_gbdgc ;};return _geag .Decode (_eeebe ._cfg );case 3:if _eeebe ._cfef ==nil {var _cfbb int ;if _eeebe .SdHuffDecodeHeightSelection ==3{_cfbb ++;
};_dcaf ,_aeed :=_eeebe .getUserTable (_cfbb );if _aeed !=nil {return 0,_aeed ;};_eeebe ._cfef =_dcaf ;};return _eeebe ._cfef .Decode (_eeebe ._cfg );};}else {_dcdb ,_ecfa :=_eeebe ._debf .DecodeInt (_eeebe ._ebgf );if _ecfa !=nil {return 0,_ecfa ;};return int64 (_dcdb ),nil ;
};return 0,nil ;};func (_fec Type )String ()string {switch _fec {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";
case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};type template1 struct{};func (_caabc *TextRegion )decodeID ()(int64 ,error ){if _caabc .IsHuffmanEncoded {if _caabc ._eefdd ==nil {_acee ,_gbab :=_caabc ._egaf .ReadBits (byte (_caabc ._fgbc ));
return int64 (_acee ),_gbab ;};return _caabc ._eefdd .Decode (_caabc ._egaf );};return _caabc ._gefgc .DecodeIAID (uint64 (_caabc ._fgbc ),_caabc ._gegf );};func (_badg *TextRegion )decodeRdy ()(int64 ,error ){const _abea ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";
if _badg .IsHuffmanEncoded {if _badg .SbHuffRDY ==3{if _badg ._aged ==nil {var (_bebd int ;_dedd error ;);if _badg .SbHuffFS ==3{_bebd ++;};if _badg .SbHuffDS ==3{_bebd ++;};if _badg .SbHuffDT ==3{_bebd ++;};if _badg .SbHuffRDWidth ==3{_bebd ++;};if _badg .SbHuffRDHeight ==3{_bebd ++;
};if _badg .SbHuffRDX ==3{_bebd ++;};_badg ._aged ,_dedd =_badg .getUserTable (_bebd );if _dedd !=nil {return 0,_ff .Wrap (_dedd ,_abea ,"");};};return _badg ._aged .Decode (_badg ._egaf );};_aafd ,_egdfe :=_bc .GetStandardTable (14+int (_badg .SbHuffRDY ));
if _egdfe !=nil {return 0,_egdfe ;};return _aafd .Decode (_badg ._egaf );};_ffgc ,_aeef :=_badg ._gefgc .DecodeInt (_badg ._ebfg );if _aeef !=nil {return 0,_ff .Wrap (_aeef ,_abea ,"");};return int64 (_ffgc ),nil ;};func (_cegd *SymbolDictionary )readNumberOfNewSymbols ()error {_aafb ,_gddd :=_cegd ._cfg .ReadBits (32);
if _gddd !=nil {return _gddd ;};_cegd .NumberOfNewSymbols =uint32 (_aafb &_d .MaxUint32 );return nil ;};type template0 struct{};func (_egda *HalftoneRegion )computeGrayScalePlanes (_cfe []*_ac .Bitmap ,_fegde int )([][]int ,error ){_dbef :=make ([][]int ,_egda .HGridHeight );
for _eefg :=0;_eefg < len (_dbef );_eefg ++{_dbef [_eefg ]=make ([]int ,_egda .HGridWidth );};for _eeeb :=0;_eeeb < int (_egda .HGridHeight );_eeeb ++{for _dbg :=0;_dbg < int (_egda .HGridWidth );_dbg +=8{var _gfgd int ;if _ecaa :=int (_egda .HGridWidth )-_dbg ;
_ecaa > 8{_gfgd =8;}else {_gfgd =_ecaa ;};_fggg :=_cfe [0].GetByteIndex (_dbg ,_eeeb );for _dgg :=0;_dgg < _gfgd ;_dgg ++{_egdb :=_dgg +_dbg ;_dbef [_eeeb ][_egdb ]=0;for _bdf :=0;_bdf < _fegde ;_bdf ++{_gdgd ,_fdgf :=_cfe [_bdf ].GetByte (_fggg );if _fdgf !=nil {return nil ,_fdgf ;
};_acb :=_gdgd >>uint (7-_egdb &7);_ffag :=_acb &1;_egde :=1<<uint (_bdf );_ggc :=int (_ffag )*_egde ;_dbef [_eeeb ][_egdb ]+=_ggc ;};};};};return _dbef ,nil ;};func (_cebf *RegionSegment )Size ()int {return 17};func (_cege *PageInformationSegment )encodeFlags (_ffcd _c .BinaryWriter )(_adff error ){const _acfc ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _adff =_ffcd .SkipBits (1);_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");};var _feggc int ;if _cege .CombinationOperatorOverrideAllowed (){_feggc =1;};if _adff =_ffcd .WriteBit (_feggc );
_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");};_feggc =0;if _cege ._eaadb {_feggc =1;
};if _adff =_ffcd .WriteBit (_feggc );_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _adff =_ffcd .WriteBit ((int (_cege ._fbc )>>1)&0x01);
_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _adff =_ffcd .WriteBit (int (_cege ._fbc )&0x01);
_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_feggc =int (_cege .DefaultPixelValue );
if _adff =_ffcd .WriteBit (_feggc );_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_feggc =0;if _cege ._eeebg {_feggc =1;
};if _adff =_ffcd .WriteBit (_feggc );_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_feggc =0;if _cege .IsLossless {_feggc =1;};if _adff =_ffcd .WriteBit (_feggc );
_adff !=nil {return _ff .Wrap (_adff ,_acfc ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};type PatternDictionary struct{_cgfbc *_c .Reader ;
DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_ac .Bitmap ;GrayMax uint32 ;};func (_fadad *TextRegion )decodeStripT ()(_cgacd int64 ,_aeegd error ){if _fadad .IsHuffmanEncoded {if _fadad .SbHuffDT ==3{if _fadad ._afca ==nil {var _fecf int ;
if _fadad .SbHuffFS ==3{_fecf ++;};if _fadad .SbHuffDS ==3{_fecf ++;};_fadad ._afca ,_aeegd =_fadad .getUserTable (_fecf );if _aeegd !=nil {return 0,_aeegd ;};};_cgacd ,_aeegd =_fadad ._afca .Decode (_fadad ._egaf );if _aeegd !=nil {return 0,_aeegd ;};
}else {var _aege _bc .Tabler ;_aege ,_aeegd =_bc .GetStandardTable (11+int (_fadad .SbHuffDT ));if _aeegd !=nil {return 0,_aeegd ;};_cgacd ,_aeegd =_aege .Decode (_fadad ._egaf );if _aeegd !=nil {return 0,_aeegd ;};};}else {var _gaef int32 ;_gaef ,_aeegd =_fadad ._gefgc .DecodeInt (_fadad ._cbbe );
if _aeegd !=nil {return 0,_aeegd ;};_cgacd =int64 (_gaef );};_cgacd *=int64 (-_fadad .SbStrips );return _cgacd ,nil ;};func (_agg *PatternDictionary )readIsMMREncoded ()error {_geea ,_edfe :=_agg ._cgfbc .ReadBit ();if _edfe !=nil {return _edfe ;};if _geea !=0{_agg .IsMMREncoded =true ;
};return nil ;};func (_cgfc *PatternDictionary )computeSegmentDataStructure ()error {_cgfc .DataOffset =_cgfc ._cgfbc .AbsolutePosition ();_cgfc .DataHeaderLength =_cgfc .DataOffset -_cgfc .DataHeaderOffset ;_cgfc .DataLength =int64 (_cgfc ._cgfbc .AbsoluteLength ())-_cgfc .DataHeaderLength ;
return nil ;};func (_ddaa *TextRegion )Init (header *Header ,r *_c .Reader )error {_ddaa .Header =header ;_ddaa ._egaf =r ;_ddaa .RegionInfo =NewRegionSegment (_ddaa ._egaf );return _ddaa .parseHeader ();};func (_fgfe *TextRegion )Encode (w _c .BinaryWriter )(_ggeda int ,_gdgdg error ){const _dcec ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _ggeda ,_gdgdg =_fgfe .RegionInfo .Encode (w );_gdgdg !=nil {return _ggeda ,_ff .Wrap (_gdgdg ,_dcec ,"");};var _bgc int ;if _bgc ,_gdgdg =_fgfe .encodeFlags (w );_gdgdg !=nil {return _ggeda ,_ff .Wrap (_gdgdg ,_dcec ,"");};_ggeda +=_bgc ;if _bgc ,_gdgdg =_fgfe .encodeSymbols (w );
_gdgdg !=nil {return _ggeda ,_ff .Wrap (_gdgdg ,_dcec ,"");};_ggeda +=_bgc ;return _ggeda ,nil ;};func (_edg *Header )readReferredToSegmentNumbers (_ddcc *_c .Reader ,_fbfb int )([]int ,error ){const _adbd ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_bdc :=make ([]int ,_fbfb );if _fbfb > 0{_edg .RTSegments =make ([]*Header ,_fbfb );var (_dff uint64 ;_bedg error ;);for _ggga :=0;_ggga < _fbfb ;_ggga ++{_dff ,_bedg =_ddcc .ReadBits (byte (_edg .referenceSize ())<<3);if _bedg !=nil {return nil ,_ff .Wrapf (_bedg ,_adbd ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_ggga );
};_bdc [_ggga ]=int (_dff &_d .MaxInt32 );};};return _bdc ,nil ;};func NewHeader (d Documenter ,r *_c .Reader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_bcedg :=&Header {Reader :r };if _dcd :=_bcedg .parse (d ,r ,offset ,organizationType );
_dcd !=nil {return nil ,_ff .Wrap (_dcd ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _bcedg ,nil ;};func (_debb *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _debb .SdHuffDecodeHeightSelection {case 0:_agdff ,_cac :=_bc .GetStandardTable (4);
if _cac !=nil {return 0,_cac ;};return _agdff .Decode (_debb ._cfg );case 1:_dgca ,_afeg :=_bc .GetStandardTable (5);if _afeg !=nil {return 0,_afeg ;};return _dgca .Decode (_debb ._cfg );case 3:if _debb ._bfeg ==nil {_bcf ,_cead :=_bc .GetStandardTable (0);
if _cead !=nil {return 0,_cead ;};_debb ._bfeg =_bcf ;};return _debb ._bfeg .Decode (_debb ._cfg );};return 0,nil ;};func (_bfaea *HalftoneRegion )computeSegmentDataStructure ()error {_bfaea .DataOffset =_bfaea ._cccg .AbsolutePosition ();_bfaea .DataHeaderLength =_bfaea .DataOffset -_bfaea .DataHeaderOffset ;
_bfaea .DataLength =int64 (_bfaea ._cccg .AbsoluteLength ())-_bfaea .DataHeaderLength ;return nil ;};func (_ffe *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _ffe .RegionSegment };func (_fggc *PageInformationSegment )Init (h *Header ,r *_c .Reader )(_ffbg error ){_fggc ._fdeg =r ;
if _ffbg =_fggc .parseHeader ();_ffbg !=nil {return _ff .Wrap (_ffbg ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");};return nil ;};type GenericRefinementRegion struct{_be templater ;
_abb templater ;_gfb *_c .Reader ;_fg *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_ac .Bitmap ;ReferenceBitmap *_ac .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_ad *_gf .Decoder ;
_gd *_gf .DecoderStats ;_eb bool ;_fc []bool ;};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_afgg *SymbolDictionary )setInSyms ()error {if _afgg .Header .RTSegments !=nil {return _afgg .retrieveImportSymbols ();};_afgg ._adef =make ([]*_ac .Bitmap ,0);
return nil ;};func (_gaa *PageInformationSegment )parseHeader ()(_gcg error ){_bg .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _cea ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _gcg !=nil {_cea +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_gcg .Error ();}else {_cea +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_bg .Log .Trace (_cea );}();if _gcg =_gaa .readWidthAndHeight ();
_gcg !=nil {return _gcg ;};if _gcg =_gaa .readResolution ();_gcg !=nil {return _gcg ;};_ ,_gcg =_gaa ._fdeg .ReadBit ();if _gcg !=nil {return _gcg ;};if _gcg =_gaa .readCombinationOperatorOverrideAllowed ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .readRequiresAuxiliaryBuffer ();
_gcg !=nil {return _gcg ;};if _gcg =_gaa .readCombinationOperator ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .readDefaultPixelValue ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .readContainsRefinement ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .readIsLossless ();
_gcg !=nil {return _gcg ;};if _gcg =_gaa .readIsStriped ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .readMaxStripeSize ();_gcg !=nil {return _gcg ;};if _gcg =_gaa .checkInput ();_gcg !=nil {return _gcg ;};_bg .Log .Trace ("\u0025\u0073",_gaa );return nil ;
};func (_ae *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_eca ,_ba ,_afc ,_ede ,_eae ,_dde ,_ca ,_da ,_bfd int )error {var (_eaf ,_abab ,_dcb ,_fdf ,_aae ,_acc int ;_ddae byte ;_aeb error ;);if _eca > 0{_ddae ,_aeb =_ae .RegionBitmap .GetByte (_ca -_afc );
if _aeb !=nil {return _aeb ;};_dcb =int (_ddae );};if _da > 0&&_da <=_ae .ReferenceBitmap .Height {_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd -_ede +_dde );if _aeb !=nil {return _aeb ;};_fdf =int (_ddae )<<4;};if _da >=0&&_da < _ae .ReferenceBitmap .Height {_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd +_dde );
if _aeb !=nil {return _aeb ;};_aae =int (_ddae )<<1;};if _da > -2&&_da < _ae .ReferenceBitmap .Height -1{_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd +_ede +_dde );if _aeb !=nil {return _aeb ;};_acc =int (_ddae );};_eaf =((_dcb >>5)&0x6)|((_acc >>2)&0x30)|(_aae &0x180)|(_fdf &0xc00);
var _afd int ;for _bad :=0;_bad < _eae ;_bad =_afd {var _eac int ;_afd =_bad +8;var _cae int ;if _cae =_ba -_bad ;_cae > 8{_cae =8;};_dg :=_afd < _ba ;_efg :=_afd < _ae .ReferenceBitmap .Width ;_gc :=_dde +1;if _eca > 0{_ddae =0;if _dg {_ddae ,_aeb =_ae .RegionBitmap .GetByte (_ca -_afc +1);
if _aeb !=nil {return _aeb ;};};_dcb =(_dcb <<8)|int (_ddae );};if _da > 0&&_da <=_ae .ReferenceBitmap .Height {var _bcg int ;if _efg {_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd -_ede +_gc );if _aeb !=nil {return _aeb ;};_bcg =int (_ddae )<<4;};_fdf =(_fdf <<8)|_bcg ;
};if _da >=0&&_da < _ae .ReferenceBitmap .Height {var _dbb int ;if _efg {_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd +_gc );if _aeb !=nil {return _aeb ;};_dbb =int (_ddae )<<1;};_aae =(_aae <<8)|_dbb ;};if _da > -2&&_da < (_ae .ReferenceBitmap .Height -1){_ddae =0;
if _efg {_ddae ,_aeb =_ae .ReferenceBitmap .GetByte (_bfd +_ede +_gc );if _aeb !=nil {return _aeb ;};};_acc =(_acc <<8)|int (_ddae );};for _dbe :=0;_dbe < _cae ;_dbe ++{var _gg int ;_fcc :=false ;_gdg :=(_eaf >>4)&0x1ff;if _gdg ==0x1ff{_fcc =true ;_gg =1;
}else if _gdg ==0x00{_fcc =true ;};if !_fcc {if _ae ._eb {_abab =_ae .overrideAtTemplate0 (_eaf ,_bad +_dbe ,_eca ,_eac ,_dbe );_ae ._gd .SetIndex (int32 (_abab ));}else {_ae ._gd .SetIndex (int32 (_eaf ));};_gg ,_aeb =_ae ._ad .DecodeBit (_ae ._gd );if _aeb !=nil {return _aeb ;
};};_cag :=uint (7-_dbe );_eac |=_gg <<_cag ;_eaf =((_eaf &0xdb6)<<1)|_gg |(_dcb >>_cag +5)&0x002|((_acc >>_cag +2)&0x010)|((_aae >>_cag )&0x080)|((_fdf >>_cag )&0x400);};_aeb =_ae .RegionBitmap .SetByte (_ca ,byte (_eac ));if _aeb !=nil {return _aeb ;
};_ca ++;_bfd ++;};return nil ;};func (_dedb *TextRegion )decodeRdh ()(int64 ,error ){const _ggac ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _dedb .IsHuffmanEncoded {if _dedb .SbHuffRDHeight ==3{if _dedb ._egfe ==nil {var (_ecgd int ;_bbgc error ;
);if _dedb .SbHuffFS ==3{_ecgd ++;};if _dedb .SbHuffDS ==3{_ecgd ++;};if _dedb .SbHuffDT ==3{_ecgd ++;};if _dedb .SbHuffRDWidth ==3{_ecgd ++;};_dedb ._egfe ,_bbgc =_dedb .getUserTable (_ecgd );if _bbgc !=nil {return 0,_ff .Wrap (_bbgc ,_ggac ,"");};};return _dedb ._egfe .Decode (_dedb ._egaf );
};_eccda ,_eebdg :=_bc .GetStandardTable (14+int (_dedb .SbHuffRDHeight ));if _eebdg !=nil {return 0,_ff .Wrap (_eebdg ,_ggac ,"");};return _eccda .Decode (_dedb ._egaf );};_adcc ,_gcba :=_dedb ._gefgc .DecodeInt (_dedb ._bbaa );if _gcba !=nil {return 0,_ff .Wrap (_gcba ,_ggac ,"");
};return int64 (_adcc ),nil ;};func (_abc *GenericRefinementRegion )parseHeader ()(_ffd error ){_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_efb :=_ee .Now ();defer func (){if _ffd ==nil {_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_ee .Since (_efb ).Nanoseconds ());
}else {_bg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_ffd );
};}();if _ffd =_abc .RegionInfo .parseHeader ();_ffd !=nil {return _ffd ;};_ ,_ffd =_abc ._gfb .ReadBits (6);if _ffd !=nil {return _ffd ;};_abc .IsTPGROn ,_ffd =_abc ._gfb .ReadBool ();if _ffd !=nil {return _ffd ;};var _adg int ;_adg ,_ffd =_abc ._gfb .ReadBit ();
if _ffd !=nil {return _ffd ;};_abc .TemplateID =int8 (_adg );switch _abc .TemplateID {case 0:_abc .Template =_abc ._be ;if _ffd =_abc .readAtPixels ();_ffd !=nil {return ;};case 1:_abc .Template =_abc ._abb ;};return nil ;};func (_bbbga *SymbolDictionary )setRefinementAtPixels ()error {if !_bbbga .UseRefinementAggregation ||_bbbga .SdrTemplate !=0{return nil ;
};if _aead :=_bbbga .readRefinementAtPixels (2);_aead !=nil {return _aead ;};return nil ;};func (_abad *HalftoneRegion )grayScaleDecoding (_begc int )([][]int ,error ){var (_faec []int8 ;_ebdg []int8 ;);if !_abad .IsMMREncoded {_faec =make ([]int8 ,4);
_ebdg =make ([]int8 ,4);if _abad .HTemplate <=1{_faec [0]=3;}else if _abad .HTemplate >=2{_faec [0]=2;};_ebdg [0]=-1;_faec [1]=-3;_ebdg [1]=-1;_faec [2]=2;_ebdg [2]=-2;_faec [3]=-2;_ebdg [3]=-2;};_ddcd :=make ([]*_ac .Bitmap ,_begc );_dacc :=NewGenericRegion (_abad ._cccg );
_dacc .setParametersMMR (_abad .IsMMREncoded ,_abad .DataOffset ,_abad .DataLength ,_abad .HGridHeight ,_abad .HGridWidth ,_abad .HTemplate ,false ,_abad .HSkipEnabled ,_faec ,_ebdg );_adfa :=_begc -1;var _cfcc error ;_ddcd [_adfa ],_cfcc =_dacc .GetRegionBitmap ();
if _cfcc !=nil {return nil ,_cfcc ;};for _adfa > 0{_adfa --;_dacc .Bitmap =nil ;_ddcd [_adfa ],_cfcc =_dacc .GetRegionBitmap ();if _cfcc !=nil {return nil ,_cfcc ;};if _cfcc =_abad .combineGrayscalePlanes (_ddcd ,_adfa );_cfcc !=nil {return nil ,_cfcc ;
};};return _abad .computeGrayScalePlanes (_ddcd ,_begc );};func (_fcbg *SymbolDictionary )setRetainedCodingContexts (_bge *SymbolDictionary ){_fcbg ._debf =_bge ._debf ;_fcbg .IsHuffmanEncoded =_bge .IsHuffmanEncoded ;_fcbg .UseRefinementAggregation =_bge .UseRefinementAggregation ;
_fcbg .SdTemplate =_bge .SdTemplate ;_fcbg .SdrTemplate =_bge .SdrTemplate ;_fcbg .SdATX =_bge .SdATX ;_fcbg .SdATY =_bge .SdATY ;_fcbg .SdrATX =_bge .SdrATX ;_fcbg .SdrATY =_bge .SdrATY ;_fcbg ._afcd =_bge ._afcd ;};func (_gddb *GenericRegion )overrideAtTemplate3 (_bfae ,_gdab ,_cfd ,_eefda ,_bfee int )int {_bfae &=0x3EF;
if _gddb .GBAtY [0]==0&&_gddb .GBAtX [0]>=-int8 (_bfee ){_bfae |=(_eefda >>uint (7-(int8 (_bfee )+_gddb .GBAtX [0]))&0x1)<<4;}else {_bfae |=int (_gddb .getPixel (_gdab +int (_gddb .GBAtX [0]),_cfd +int (_gddb .GBAtY [0])))<<4;};return _bfae ;};func (_ebcd *TableSegment )HtPS ()int32 {return _ebcd ._fddb };
func (_agfg *SymbolDictionary )getSbSymCodeLen ()int8 {_feggd :=int8 (_d .Ceil (_d .Log (float64 (_agfg ._ebdd +_agfg .NumberOfNewSymbols ))/_d .Log (2)));if _agfg .IsHuffmanEncoded &&_feggd < 1{return 1;};return _feggd ;};func (_dgbgf *TableSegment )Init (h *Header ,r *_c .Reader )error {_dgbgf ._ccbd =r ;
return _dgbgf .parseHeader ();};func (_gfee *TextRegion )decodeCurrentT ()(int64 ,error ){if _gfee .SbStrips !=1{if _gfee .IsHuffmanEncoded {_cefc ,_adcbb :=_gfee ._egaf .ReadBits (byte (_gfee .LogSBStrips ));return int64 (_cefc ),_adcbb ;};_agddc ,_gga :=_gfee ._gefgc .DecodeInt (_gfee ._acda );
if _gga !=nil {return 0,_gga ;};return int64 (_agddc ),nil ;};return 0,nil ;};func (_caga *PageInformationSegment )readDefaultPixelValue ()error {_gac ,_fegded :=_caga ._fdeg .ReadBit ();if _fegded !=nil {return _fegded ;};_caga .DefaultPixelValue =uint8 (_gac &0xf);
return nil ;};func NewRegionSegment (r *_c .Reader )*RegionSegment {return &RegionSegment {_dgfd :r }};func (_dgda *TextRegion )decodeRdx ()(int64 ,error ){const _aeeab ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _dgda .IsHuffmanEncoded {if _dgda .SbHuffRDX ==3{if _dgda ._cdede ==nil {var (_beea int ;
_ccaa error ;);if _dgda .SbHuffFS ==3{_beea ++;};if _dgda .SbHuffDS ==3{_beea ++;};if _dgda .SbHuffDT ==3{_beea ++;};if _dgda .SbHuffRDWidth ==3{_beea ++;};if _dgda .SbHuffRDHeight ==3{_beea ++;};_dgda ._cdede ,_ccaa =_dgda .getUserTable (_beea );if _ccaa !=nil {return 0,_ff .Wrap (_ccaa ,_aeeab ,"");
};};return _dgda ._cdede .Decode (_dgda ._egaf );};_daac ,_ffbd :=_bc .GetStandardTable (14+int (_dgda .SbHuffRDX ));if _ffbd !=nil {return 0,_ff .Wrap (_ffbd ,_aeeab ,"");};return _daac .Decode (_dgda ._egaf );};_dbddc ,_dfcbd :=_dgda ._gefgc .DecodeInt (_dgda ._bfcg );
if _dfcbd !=nil {return 0,_ff .Wrap (_dfcbd ,_aeeab ,"");};return int64 (_dbddc ),nil ;};func (_dcac *SymbolDictionary )decodeHeightClassCollectiveBitmap (_fgddd int64 ,_eccf ,_fcde uint32 )(*_ac .Bitmap ,error ){if _fgddd ==0{_afbbg :=_ac .New (int (_fcde ),int (_eccf ));
var (_adecc byte ;_dgcg error ;);for _dgff :=0;_dgff < len (_afbbg .Data );_dgff ++{_adecc ,_dgcg =_dcac ._cfg .ReadByte ();if _dgcg !=nil {return nil ,_dgcg ;};if _dgcg =_afbbg .SetByte (_dgff ,_adecc );_dgcg !=nil {return nil ,_dgcg ;};};return _afbbg ,nil ;
};if _dcac ._cbbab ==nil {_dcac ._cbbab =NewGenericRegion (_dcac ._cfg );};_dcac ._cbbab .setParameters (true ,_dcac ._cfg .AbsolutePosition (),_fgddd ,_eccf ,_fcde );_ddace ,_gabb :=_dcac ._cbbab .GetRegionBitmap ();if _gabb !=nil {return nil ,_gabb ;
};return _ddace ,nil ;};func (_cfba *Header )readSegmentNumber (_adc *_c .Reader )error {const _fcca ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";_bcdbf :=make ([]byte ,4);_ ,_aecf :=_adc .Read (_bcdbf );
if _aecf !=nil {return _ff .Wrap (_aecf ,_fcca ,"");};_cfba .SegmentNumber =_db .BigEndian .Uint32 (_bcdbf );return nil ;};func (_eddg *HalftoneRegion )computeY (_gfde ,_gcb int )int {return _eddg .shiftAndFill (int (_eddg .HGridY )+_gfde *int (_eddg .HRegionX )-_gcb *int (_eddg .HRegionY ));
};func (_faeg *Header )writeReferredToSegments (_ecdc _c .BinaryWriter )(_cffa int ,_gbcb error ){const _ddda ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";var (_gbb uint16 ;
_gae uint32 ;);_cfa :=_faeg .referenceSize ();_aeeb :=1;_dggg :=make ([]byte ,_cfa );for _ ,_ggef :=range _faeg .RTSNumbers {switch _cfa {case 4:_gae =uint32 (_ggef );_db .BigEndian .PutUint32 (_dggg ,_gae );_aeeb ,_gbcb =_ecdc .Write (_dggg );if _gbcb !=nil {return 0,_ff .Wrap (_gbcb ,_ddda ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");
};case 2:_gbb =uint16 (_ggef );_db .BigEndian .PutUint16 (_dggg ,_gbb );_aeeb ,_gbcb =_ecdc .Write (_dggg );if _gbcb !=nil {return 0,_ff .Wrap (_gbcb ,_ddda ,"\u0075\u0069\u006e\u0074\u0031\u0036");};default:if _gbcb =_ecdc .WriteByte (byte (_ggef ));_gbcb !=nil {return 0,_ff .Wrap (_gbcb ,_ddda ,"\u0075\u0069\u006et\u0038");
};};_cffa +=_aeeb ;};return _cffa ,nil ;};func (_ebea *GenericRegion )setOverrideFlag (_bae int ){_ebea .GBAtOverride [_bae ]=true ;_ebea ._aabf =true ;};func (_fecef *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _fdae ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";
if _fecef .SbHuffRSize ==0{_bcee ,_baac :=_bc .GetStandardTable (1);if _baac !=nil {return 0,_ff .Wrap (_baac ,_fdae ,"");};return _bcee .Decode (_fecef ._egaf );};if _fecef ._aebe ==nil {var (_eebff int ;_edce error ;);if _fecef .SbHuffFS ==3{_eebff ++;
};if _fecef .SbHuffDS ==3{_eebff ++;};if _fecef .SbHuffDT ==3{_eebff ++;};if _fecef .SbHuffRDWidth ==3{_eebff ++;};if _fecef .SbHuffRDHeight ==3{_eebff ++;};if _fecef .SbHuffRDX ==3{_eebff ++;};if _fecef .SbHuffRDY ==3{_eebff ++;};_fecef ._aebe ,_edce =_fecef .getUserTable (_eebff );
if _edce !=nil {return 0,_ff .Wrap (_edce ,_fdae ,"");};};_eggg ,_cbdc :=_fecef ._aebe .Decode (_fecef ._egaf );if _cbdc !=nil {return 0,_ff .Wrap (_cbdc ,_fdae ,"");};return _eggg ,nil ;};func (_ffb *GenericRegion )InitEncode (bm *_ac .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _acgf ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _ff .Error (_acgf ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _ff .Error (_acgf ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_ffb .Bitmap =bm ;_ffb .GBTemplate =byte (template );switch _ffb .GBTemplate {case 0:_ffb .GBAtX =[]int8 {3,-3,2,-2};_ffb .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_ffb .GBAtX =[]int8 {3};_ffb .GBAtY =[]int8 {-1};case 2,3:_ffb .GBAtX =[]int8 {2};_ffb .GBAtY =[]int8 {-1};
default:return _ff .Errorf (_acgf ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_ffb .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_ffb .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_adgb *GenericRegion )Encode (w _c .BinaryWriter )(_fgf int ,_bfc error ){const _bfcb ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";
if _adgb .Bitmap ==nil {return 0,_ff .Error (_bfcb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};_gge ,_bfc :=_adgb .RegionSegment .Encode (w );if _bfc !=nil {return 0,_ff .Wrap (_bfc ,_bfcb ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_fgf +=_gge ;if _bfc =w .SkipBits (4);_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");};var _ddbf int ;if _adgb .IsTPGDon {_ddbf =1;};if _bfc =w .WriteBit (_ddbf );
_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_ddbf =0;if _bfc =w .WriteBit (int (_adgb .GBTemplate >>1)&0x01);_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _bfc =w .WriteBit (int (_adgb .GBTemplate )&0x01);_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _adgb .UseMMR {_ddbf =1;};if _bfc =w .WriteBit (_ddbf );
_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_fgf ++;if _gge ,_bfc =_adgb .writeGBAtPixels (w );_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"");};_fgf +=_gge ;_ebae :=_ab .New ();
if _bfc =_ebae .EncodeBitmap (_adgb .Bitmap ,_adgb .IsTPGDon );_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"");};_ebae .Final ();var _ecb int64 ;if _ecb ,_bfc =_ebae .WriteTo (w );_bfc !=nil {return _fgf ,_ff .Wrap (_bfc ,_bfcb ,"");};_fgf +=int (_ecb );
return _fgf ,nil ;};func (_fgd *GenericRefinementRegion )decodeTypicalPredictedLine (_cd ,_cgf ,_gaf ,_eaac ,_bbb ,_fe int )error {_bdb :=_cd -int (_fgd .ReferenceDY );_ag :=_fgd .ReferenceBitmap .GetByteIndex (0,_bdb );_ebd :=_fgd .RegionBitmap .GetByteIndex (0,_cd );
var _abae error ;switch _fgd .TemplateID {case 0:_abae =_fgd .decodeTypicalPredictedLineTemplate0 (_cd ,_cgf ,_gaf ,_eaac ,_bbb ,_fe ,_ebd ,_bdb ,_ag );case 1:_abae =_fgd .decodeTypicalPredictedLineTemplate1 (_cd ,_cgf ,_gaf ,_eaac ,_bbb ,_fe ,_ebd ,_bdb ,_ag );
};return _abae ;};func (_dabe *TextRegion )getUserTable (_fced int )(_bc .Tabler ,error ){const _bgcc ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _bfagb int ;for _ ,_fdc :=range _dabe .Header .RTSegments {if _fdc .Type ==53{if _bfagb ==_fced {_bacb ,_accdb :=_fdc .GetSegmentData ();
if _accdb !=nil {return nil ,_accdb ;};_aadd ,_agga :=_bacb .(*TableSegment );if !_agga {_bg .Log .Debug (_g .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_fdc .SegmentNumber ));
return nil ,_ff .Error (_bgcc ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _bc .NewEncodedTable (_aadd );};_bfagb ++;};};return nil ,nil ;};type templater interface{form (_cbfg ,_dac ,_ead ,_ecc ,_cfb int16 )int16 ;setIndex (_agd *_gf .DecoderStats );};func (_egf *GenericRefinementRegion )decodeSLTP ()(int ,error ){_egf .Template .setIndex (_egf ._gd );
return _egf ._ad .DecodeBit (_egf ._gd );};func (_bbc *PageInformationSegment )readMaxStripeSize ()error {_faea ,_acbg :=_bbc ._fdeg .ReadBits (15);if _acbg !=nil {return _acbg ;};_bbc .MaxStripeSize =uint16 (_faea &_d .MaxUint16 );return nil ;};func (_gfcba *TextRegion )checkInput ()error {const _dcagd ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";
if !_gfcba .UseRefinement {if _gfcba .SbrTemplate !=0{_bg .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_gfcba .SbrTemplate =0;};};if _gfcba .SbHuffFS ==2||_gfcba .SbHuffRDWidth ==2||_gfcba .SbHuffRDHeight ==2||_gfcba .SbHuffRDX ==2||_gfcba .SbHuffRDY ==2{return _ff .Error (_dcagd ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_gfcba .UseRefinement {if _gfcba .SbHuffRSize !=0{_bg .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_gfcba .SbHuffRSize =0;};if _gfcba .SbHuffRDY !=0{_bg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_gfcba .SbHuffRDY =0;};if _gfcba .SbHuffRDX !=0{_bg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_gfcba .SbHuffRDX =0;};if _gfcba .SbHuffRDWidth !=0{_bg .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_gfcba .SbHuffRDWidth =0;};if _gfcba .SbHuffRDHeight !=0{_bg .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_gfcba .SbHuffRDHeight =0;};
};return nil ;};func (_dfc *GenericRegion )decodeTemplate0a (_fag ,_ecf ,_dca int ,_ebe ,_dbeb int )(_fdd error ){const _feg ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";var (_efee ,_fda int ;_ecad ,_fde int ;
_fceb byte ;_ega int ;);if _fag >=1{_fceb ,_fdd =_dfc .Bitmap .GetByte (_dbeb );if _fdd !=nil {return _ff .Wrap (_fdd ,_feg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ecad =int (_fceb );};if _fag >=2{_fceb ,_fdd =_dfc .Bitmap .GetByte (_dbeb -_dfc .Bitmap .RowStride );
if _fdd !=nil {return _ff .Wrap (_fdd ,_feg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_fde =int (_fceb )<<6;};_efee =(_ecad &0xf0)|(_fde &0x3800);for _cga :=0;_cga < _dca ;_cga =_ega {var (_fae byte ;_fefg int ;);_ega =_cga +8;if _egd :=_ecf -_cga ;
_egd > 8{_fefg =8;}else {_fefg =_egd ;};if _fag > 0{_ecad <<=8;if _ega < _ecf {_fceb ,_fdd =_dfc .Bitmap .GetByte (_dbeb +1);if _fdd !=nil {return _ff .Wrap (_fdd ,_feg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ecad |=int (_fceb );};};if _fag > 1{_dfcf :=_dbeb -_dfc .Bitmap .RowStride +1;
_fde <<=8;if _ega < _ecf {_fceb ,_fdd =_dfc .Bitmap .GetByte (_dfcf );if _fdd !=nil {return _ff .Wrap (_fdd ,_feg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_fde |=int (_fceb )<<6;}else {_fde |=0;};};for _ddc :=0;_ddc < _fefg ;_ddc ++{_edde :=uint (7-_ddc );
if _dfc ._aabf {_fda =_dfc .overrideAtTemplate0a (_efee ,_cga +_ddc ,_fag ,int (_fae ),_ddc ,int (_edde ));_dfc ._ccg .SetIndex (int32 (_fda ));}else {_dfc ._ccg .SetIndex (int32 (_efee ));};var _ggg int ;_ggg ,_fdd =_dfc ._eeea .DecodeBit (_dfc ._ccg );
if _fdd !=nil {return _ff .Wrap (_fdd ,_feg ,"");};_fae |=byte (_ggg )<<_edde ;_efee =((_efee &0x7bf7)<<1)|_ggg |((_ecad >>_edde )&0x10)|((_fde >>_edde )&0x800);};if _ece :=_dfc .Bitmap .SetByte (_ebe ,_fae );_ece !=nil {return _ff .Wrap (_ece ,_feg ,"");
};_ebe ++;_dbeb ++;};return nil ;};func (_gdeb *PatternDictionary )readGrayMax ()error {_cggg ,_geaf :=_gdeb ._cgfbc .ReadBits (32);if _geaf !=nil {return _geaf ;};_gdeb .GrayMax =uint32 (_cggg &_d .MaxUint32 );return nil ;};func (_dgfa *PatternDictionary )GetDictionary ()([]*_ac .Bitmap ,error ){if _dgfa .Patterns !=nil {return _dgfa .Patterns ,nil ;
};if !_dgfa .IsMMREncoded {_dgfa .setGbAtPixels ();};_cebg :=NewGenericRegion (_dgfa ._cgfbc );_cebg .setParametersMMR (_dgfa .IsMMREncoded ,_dgfa .DataOffset ,_dgfa .DataLength ,uint32 (_dgfa .HdpHeight ),(_dgfa .GrayMax +1)*uint32 (_dgfa .HdpWidth ),_dgfa .HDTemplate ,false ,false ,_dgfa .GBAtX ,_dgfa .GBAtY );
_afee ,_ebc :=_cebg .GetRegionBitmap ();if _ebc !=nil {return nil ,_ebc ;};if _ebc =_dgfa .extractPatterns (_afee );_ebc !=nil {return nil ,_ebc ;};return _dgfa .Patterns ,nil ;};func (_ccgg *TextRegion )decodeDfs ()(int64 ,error ){if _ccgg .IsHuffmanEncoded {if _ccgg .SbHuffFS ==3{if _ccgg ._fcff ==nil {var _gbbc error ;
_ccgg ._fcff ,_gbbc =_ccgg .getUserTable (0);if _gbbc !=nil {return 0,_gbbc ;};};return _ccgg ._fcff .Decode (_ccgg ._egaf );};_cdga ,_bfadd :=_bc .GetStandardTable (6+int (_ccgg .SbHuffFS ));if _bfadd !=nil {return 0,_bfadd ;};return _cdga .Decode (_ccgg ._egaf );
};_gdca ,_dgaf :=_ccgg ._gefgc .DecodeInt (_ccgg ._cgbg );if _dgaf !=nil {return 0,_dgaf ;};return int64 (_gdca ),nil ;};func (_fgeg *TextRegion )initSymbols ()error {const _cbbee ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";for _ ,_eeag :=range _fgeg .Header .RTSegments {if _eeag ==nil {return _ff .Error (_cbbee ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _eeag .Type ==0{_agda ,_becg :=_eeag .GetSegmentData ();if _becg !=nil {return _ff .Wrap (_becg ,_cbbee ,"");};_bacca ,_dega :=_agda .(*SymbolDictionary );if !_dega {return _ff .Error (_cbbee ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_bacca ._baa =_fgeg ._gegf ;_bace ,_becg :=_bacca .GetDictionary ();if _becg !=nil {return _ff .Wrap (_becg ,_cbbee ,"");};_fgeg .Symbols =append (_fgeg .Symbols ,_bace ...);};};_fgeg .NumberOfSymbols =uint32 (len (_fgeg .Symbols ));return nil ;};func (_feda *SymbolDictionary )encodeATFlags (_fggb _c .BinaryWriter )(_fbac int ,_badfb error ){const _eebb ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _feda .IsHuffmanEncoded ||_feda .SdTemplate !=0{return 0,nil ;};_fcdd :=4;if _feda .SdTemplate !=0{_fcdd =1;};for _addff :=0;_addff < _fcdd ;_addff ++{if _badfb =_fggb .WriteByte (byte (_feda .SdATX [_addff ]));_badfb !=nil {return _fbac ,_ff .Wrapf (_badfb ,_eebb ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_addff );
};_fbac ++;if _badfb =_fggb .WriteByte (byte (_feda .SdATY [_addff ]));_badfb !=nil {return _fbac ,_ff .Wrapf (_badfb ,_eebb ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_addff );};_fbac ++;};return _fbac ,nil ;};func (_bgf *GenericRegion )overrideAtTemplate1 (_ebag ,_bege ,_begb ,_gecd ,_adad int )int {_ebag &=0x1FF7;
if _bgf .GBAtY [0]==0&&_bgf .GBAtX [0]>=-int8 (_adad ){_ebag |=(_gecd >>uint (7-(int8 (_adad )+_bgf .GBAtX [0]))&0x1)<<3;}else {_ebag |=int (_bgf .getPixel (_bege +int (_bgf .GBAtX [0]),_begb +int (_bgf .GBAtY [0])))<<3;};return _ebag ;};func (_cgcg *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_gegd :=range _cgcg .Header .RTSegments {if _gegd .Type ==0{_adffd ,_dcc :=_gegd .GetSegmentData ();
if _dcc !=nil {return _dcc ;};_ffffc ,_dbba :=_adffd .(*SymbolDictionary );if !_dbba {return _g .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_adffd );
};_babfe ,_dcc :=_ffffc .GetDictionary ();if _dcc !=nil {return _g .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_gegd .SegmentNumber ,_dcc .Error ());
};_cgcg ._adef =append (_cgcg ._adef ,_babfe ...);_cgcg ._ebdd +=_ffffc .NumberOfExportedSymbols ;};};return nil ;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;
HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader *_c .Reader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_bdee *TableSegment )HtOOB ()int32 {return _bdee ._cgaca };func (_acd *TableSegment )StreamReader ()*_c .Reader {return _acd ._ccbd };
func (_egba *PageInformationSegment )readResolution ()error {_febd ,_fffd :=_egba ._fdeg .ReadBits (32);if _fffd !=nil {return _fffd ;};_egba .ResolutionX =int (_febd &_d .MaxInt32 );_febd ,_fffd =_egba ._fdeg .ReadBits (32);if _fffd !=nil {return _fffd ;
};_egba .ResolutionY =int (_febd &_d .MaxInt32 );return nil ;};func (_begce *TextRegion )decodeRI ()(int64 ,error ){if !_begce .UseRefinement {return 0,nil ;};if _begce .IsHuffmanEncoded {_cdef ,_bgaf :=_begce ._egaf .ReadBit ();return int64 (_cdef ),_bgaf ;
};_dgbb ,_fbce :=_begce ._gefgc .DecodeInt (_begce ._dedf );return int64 (_dgbb ),_fbce ;};func (_ccca *SymbolDictionary )readRefinementAtPixels (_ebcbd int )error {_ccca .SdrATX =make ([]int8 ,_ebcbd );_ccca .SdrATY =make ([]int8 ,_ebcbd );var (_bagc byte ;
_gcc error ;);for _ggf :=0;_ggf < _ebcbd ;_ggf ++{_bagc ,_gcc =_ccca ._cfg .ReadByte ();if _gcc !=nil {return _gcc ;};_ccca .SdrATX [_ggf ]=int8 (_bagc );_bagc ,_gcc =_ccca ._cfg .ReadByte ();if _gcc !=nil {return _gcc ;};_ccca .SdrATY [_ggf ]=int8 (_bagc );
};return nil ;};func (_afgf *PageInformationSegment )readContainsRefinement ()error {_cbgb ,_dbgf :=_afgf ._fdeg .ReadBit ();if _dbgf !=nil {return _dbgf ;};if _cbgb ==1{_afgf ._eeebg =true ;};return nil ;};func (_fee *Header )writeSegmentDataLength (_bec _c .BinaryWriter )(_fdge int ,_egcd error ){_bfde :=make ([]byte ,4);
_db .BigEndian .PutUint32 (_bfde ,uint32 (_fee .SegmentDataLength ));if _fdge ,_egcd =_bec .Write (_bfde );_egcd !=nil {return 0,_ff .Wrap (_egcd ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");
};return _fdge ,nil ;};func (_dfge *SymbolDictionary )encodeFlags (_efbc _c .BinaryWriter )(_fbdb int ,_eeaa error ){const _ecdb ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _eeaa =_efbc .SkipBits (3);_eeaa !=nil {return 0,_ff .Wrap (_eeaa ,_ecdb ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");
};var _cbeeg int ;if _dfge .SdrTemplate > 0{_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_cbeeg =0;if _dfge .SdTemplate > 1{_cbeeg =1;
};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_cbeeg =0;if _dfge .SdTemplate ==1||_dfge .SdTemplate ==3{_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );
_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_cbeeg =0;if _dfge ._bbcf {_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_cbeeg =0;if _dfge ._gdcg {_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_cbeeg =0;if _dfge .SdHuffAggInstanceSelection {_cbeeg =1;
};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_cbeeg =int (_dfge .SdHuffBMSizeSelection );if _eeaa =_efbc .WriteBit (_cbeeg );
_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");};_cbeeg =0;if _dfge .SdHuffDecodeWidthSelection > 1{_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");
};_cbeeg =0;switch _dfge .SdHuffDecodeWidthSelection {case 1,3:_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_cbeeg =0;if _dfge .SdHuffDecodeHeightSelection > 1{_cbeeg =1;
};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_cbeeg =0;switch _dfge .SdHuffDecodeHeightSelection {case 1,3:_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );
_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_cbeeg =0;if _dfge .UseRefinementAggregation {_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");
};_cbeeg =0;if _dfge .IsHuffmanEncoded {_cbeeg =1;};if _eeaa =_efbc .WriteBit (_cbeeg );_eeaa !=nil {return _fbdb ,_ff .Wrap (_eeaa ,_ecdb ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_cecg *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _cecg .IsHuffmanEncoded {return _cecg .decodeHeightClassDeltaHeightWithHuffman ();
};_bcafb ,_caab :=_cecg ._debf .DecodeInt (_cecg ._fabc );if _caab !=nil {return 0,_caab ;};return int64 (_bcafb ),nil ;};func (_ffga *HalftoneRegion )Init (hd *Header ,r *_c .Reader )error {_ffga ._cccg =r ;_ffga ._bacc =hd ;_ffga .RegionSegment =NewRegionSegment (r );
return _ffga .parseHeader ();};func (_dffc *TextRegion )decodeIb (_bbegd ,_fbedd int64 )(*_ac .Bitmap ,error ){const _edag ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_decf error ;_gfbb *_ac .Bitmap ;);if _bbegd ==0{if int (_fbedd )> len (_dffc .Symbols )-1{return nil ,_ff .Error (_edag ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _dffc .Symbols [int (_fbedd )],nil ;};var _bgcd ,_bdage ,_dfdf ,_gade int64 ;_bgcd ,_decf =_dffc .decodeRdw ();if _decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"");};_bdage ,_decf =_dffc .decodeRdh ();if _decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"");
};_dfdf ,_decf =_dffc .decodeRdx ();if _decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"");};_gade ,_decf =_dffc .decodeRdy ();if _decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"");};if _dffc .IsHuffmanEncoded {if _ ,_decf =_dffc .decodeSymInRefSize ();
_decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"");};_dffc ._egaf .Align ();};_gegfe :=_dffc .Symbols [_fbedd ];_faagd :=uint32 (_gegfe .Width );_fabf :=uint32 (_gegfe .Height );_fcgb :=int32 (uint32 (_bgcd )>>1)+int32 (_dfdf );_dgdb :=int32 (uint32 (_bdage )>>1)+int32 (_gade );
if _dffc ._fbed ==nil {_dffc ._fbed =_edd (_dffc ._egaf ,nil );};_dffc ._fbed .setParameters (_dffc ._bfdd ,_dffc ._gefgc ,_dffc .SbrTemplate ,_faagd +uint32 (_bgcd ),_fabf +uint32 (_bdage ),_gegfe ,_fcgb ,_dgdb ,false ,_dffc .SbrATX ,_dffc .SbrATY );_gfbb ,_decf =_dffc ._fbed .GetRegionBitmap ();
if _decf !=nil {return nil ,_ff .Wrap (_decf ,_edag ,"\u0067\u0072\u0066");};if _dffc .IsHuffmanEncoded {_dffc ._egaf .Align ();};return _gfbb ,nil ;};func (_beae *GenericRegion )Init (h *Header ,r *_c .Reader )error {_beae .RegionSegment =NewRegionSegment (r );
_beae ._cc =r ;return _beae .parseHeader ();};func (_fcdf *PageInformationSegment )readIsLossless ()error {_aedb ,_egdf :=_fcdf ._fdeg .ReadBit ();if _egdf !=nil {return _egdf ;};if _aedb ==1{_fcdf .IsLossless =true ;};return nil ;};func (_bdbc *TextRegion )GetRegionInfo ()*RegionSegment {return _bdbc .RegionInfo };
func (_ddab *TextRegion )getSymbols ()error {if _ddab .Header .RTSegments !=nil {return _ddab .initSymbols ();};return nil ;};type EncodeInitializer interface{InitEncode ();};func (_abeg *PatternDictionary )Init (h *Header ,r *_c .Reader )error {_abeg ._cgfbc =r ;
return _abeg .parseHeader ();};func (_fbf *GenericRegion )decodeTemplate1 (_dcfa ,_bfb ,_bcgb int ,_bdba ,_gba int )(_cedd error ){const _adeb ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";var (_gcf ,_gbd int ;_dcab ,_ebab int ;
_gcff byte ;_beac ,_bfcd int ;);if _dcfa >=1{_gcff ,_cedd =_fbf .Bitmap .GetByte (_gba );if _cedd !=nil {return _ff .Wrap (_cedd ,_adeb ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_dcab =int (_gcff );};if _dcfa >=2{_gcff ,_cedd =_fbf .Bitmap .GetByte (_gba -_fbf .Bitmap .RowStride );
if _cedd !=nil {return _ff .Wrap (_cedd ,_adeb ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_ebab =int (_gcff )<<5;};_gcf =((_dcab >>1)&0x1f8)|((_ebab >>1)&0x1e00);for _ebad :=0;_ebad < _bcgb ;_ebad =_beac {var (_agf byte ;_ebf int ;);_beac =_ebad +8;
if _cbcf :=_bfb -_ebad ;_cbcf > 8{_ebf =8;}else {_ebf =_cbcf ;};if _dcfa > 0{_dcab <<=8;if _beac < _bfb {_gcff ,_cedd =_fbf .Bitmap .GetByte (_gba +1);if _cedd !=nil {return _ff .Wrap (_cedd ,_adeb ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};
_dcab |=int (_gcff );};};if _dcfa > 1{_ebab <<=8;if _beac < _bfb {_gcff ,_cedd =_fbf .Bitmap .GetByte (_gba -_fbf .Bitmap .RowStride +1);if _cedd !=nil {return _ff .Wrap (_cedd ,_adeb ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_ebab |=int (_gcff )<<5;
};};for _gdb :=0;_gdb < _ebf ;_gdb ++{if _fbf ._aabf {_gbd =_fbf .overrideAtTemplate1 (_gcf ,_ebad +_gdb ,_dcfa ,int (_agf ),_gdb );_fbf ._ccg .SetIndex (int32 (_gbd ));}else {_fbf ._ccg .SetIndex (int32 (_gcf ));};_bfcd ,_cedd =_fbf ._eeea .DecodeBit (_fbf ._ccg );
if _cedd !=nil {return _ff .Wrap (_cedd ,_adeb ,"");};_agf |=byte (_bfcd )<<uint (7-_gdb );_agdf :=uint (8-_gdb );_gcf =((_gcf &0xefb)<<1)|_bfcd |((_dcab >>_agdf )&0x8)|((_ebab >>_agdf )&0x200);};if _egbda :=_fbf .Bitmap .SetByte (_bdba ,_agf );_egbda !=nil {return _ff .Wrap (_egbda ,_adeb ,"");
};_bdba ++;_gba ++;};return nil ;};func (_fgb *SymbolDictionary )parseHeader ()(_gddbd error ){_bg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _gddbd !=nil {_bg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_gddbd );
}else {_bg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _gddbd =_fgb .readRegionFlags ();_gddbd !=nil {return _gddbd ;};if _gddbd =_fgb .setAtPixels ();_gddbd !=nil {return _gddbd ;};if _gddbd =_fgb .setRefinementAtPixels ();_gddbd !=nil {return _gddbd ;};if _gddbd =_fgb .readNumberOfExportedSymbols ();
_gddbd !=nil {return _gddbd ;};if _gddbd =_fgb .readNumberOfNewSymbols ();_gddbd !=nil {return _gddbd ;};if _gddbd =_fgb .setInSyms ();_gddbd !=nil {return _gddbd ;};if _fgb ._gdcg {_ffcg :=_fgb .Header .RTSegments ;for _gad :=len (_ffcg )-1;_gad >=0;_gad --{if _ffcg [_gad ].Type ==0{_cebga ,_eedgf :=_ffcg [_gad ].SegmentData .(*SymbolDictionary );
if !_eedgf {_gddbd =_g .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_ffcg [_gad ]);
return _gddbd ;};if _cebga ._gdcg {_fgb .setRetainedCodingContexts (_cebga );};break ;};};};if _gddbd =_fgb .checkInput ();_gddbd !=nil {return _gddbd ;};return nil ;};func (_cbdf *SymbolDictionary )readAtPixels (_ecab int )error {_cbdf .SdATX =make ([]int8 ,_ecab );
_cbdf .SdATY =make ([]int8 ,_ecab );var (_ceda byte ;_ecee error ;);for _bcgdf :=0;_bcgdf < _ecab ;_bcgdf ++{_ceda ,_ecee =_cbdf ._cfg .ReadByte ();if _ecee !=nil {return _ecee ;};_cbdf .SdATX [_bcgdf ]=int8 (_ceda );_ceda ,_ecee =_cbdf ._cfg .ReadByte ();
if _ecee !=nil {return _ecee ;};_cbdf .SdATY [_bcgdf ]=int8 (_ceda );};return nil ;};func (_dee *Header )readNumberOfReferredToSegments (_gfbdc *_c .Reader )(uint64 ,error ){const _ceb ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_fgfc ,_afbb :=_gfbdc .ReadBits (3);if _afbb !=nil {return 0,_ff .Wrap (_afbb ,_ceb ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_fgfc &=0xf;var _cdcc []byte ;if _fgfc <=4{_cdcc =make ([]byte ,5);for _dcea :=0;_dcea <=4;_dcea ++{_fefa ,_aeeg :=_gfbdc .ReadBit ();
if _aeeg !=nil {return 0,_ff .Wrap (_aeeg ,_ceb ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cdcc [_dcea ]=byte (_fefa );};}else {_fgfc ,_afbb =_gfbdc .ReadBits (29);if _afbb !=nil {return 0,_afbb ;};_fgfc &=_d .MaxInt32 ;
_faaf :=(_fgfc +8)>>3;_faaf <<=3;_cdcc =make ([]byte ,_faaf );var _gea uint64 ;for _gea =0;_gea < _faaf ;_gea ++{_edc ,_ace :=_gfbdc .ReadBit ();if _ace !=nil {return 0,_ff .Wrap (_ace ,_ceb ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};_cdcc [_gea ]=byte (_edc );};};return _fgfc ,nil ;};func (_deab *Header )writeFlags (_bcab _c .BinaryWriter )(_addf error ){const _gdga ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";_ecde :=byte (_deab .Type );
if _addf =_bcab .WriteByte (_ecde );_addf !=nil {return _ff .Wrap (_addf ,_gdga ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_deab .RetainFlag &&!_deab .PageAssociationFieldSize {return nil ;};if _addf =_bcab .SkipBits (-8);_addf !=nil {return _ff .Wrap (_addf ,_gdga ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _dacf int ;if _deab .RetainFlag {_dacf =1;};if _addf =_bcab .WriteBit (_dacf );_addf !=nil {return _ff .Wrap (_addf ,_gdga ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_dacf =0;if _deab .PageAssociationFieldSize {_dacf =1;
};if _addf =_bcab .WriteBit (_dacf );_addf !=nil {return _ff .Wrap (_addf ,_gdga ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_bcab .FinishByte ();return nil ;};func (_ggeb *TextRegion )GetRegionBitmap ()(*_ac .Bitmap ,error ){if _ggeb .RegionBitmap !=nil {return _ggeb .RegionBitmap ,nil ;
};if !_ggeb .IsHuffmanEncoded {if _dfab :=_ggeb .setCodingStatistics ();_dfab !=nil {return nil ,_dfab ;};};if _egded :=_ggeb .createRegionBitmap ();_egded !=nil {return nil ,_egded ;};if _aaff :=_ggeb .decodeSymbolInstances ();_aaff !=nil {return nil ,_aaff ;
};return _ggeb .RegionBitmap ,nil ;};func (_cabc *TableSegment )HtLow ()int32 {return _cabc ._edgg };func (_cgca *TextRegion )blit (_abed *_ac .Bitmap ,_ebca int64 )error {if _cgca .IsTransposed ==0&&(_cgca .ReferenceCorner ==2||_cgca .ReferenceCorner ==3){_cgca ._degg +=int64 (_abed .Width -1);
}else if _cgca .IsTransposed ==1&&(_cgca .ReferenceCorner ==0||_cgca .ReferenceCorner ==2){_cgca ._degg +=int64 (_abed .Height -1);};_bfcc :=_cgca ._degg ;if _cgca .IsTransposed ==1{_bfcc ,_ebca =_ebca ,_bfcc ;};switch _cgca .ReferenceCorner {case 0:_ebca -=int64 (_abed .Height -1);
case 2:_ebca -=int64 (_abed .Height -1);_bfcc -=int64 (_abed .Width -1);case 3:_bfcc -=int64 (_abed .Width -1);};_fcfc :=_ac .Blit (_abed ,_cgca .RegionBitmap ,int (_bfcc ),int (_ebca ),_cgca .CombinationOperator );if _fcfc !=nil {return _fcfc ;};if _cgca .IsTransposed ==0&&(_cgca .ReferenceCorner ==0||_cgca .ReferenceCorner ==1){_cgca ._degg +=int64 (_abed .Width -1);
};if _cgca .IsTransposed ==1&&(_cgca .ReferenceCorner ==1||_cgca .ReferenceCorner ==3){_cgca ._degg +=int64 (_abed .Height -1);};return nil ;};func (_gdbge *TextRegion )readAmountOfSymbolInstances ()error {_fgdc ,_ggae :=_gdbge ._egaf .ReadBits (32);if _ggae !=nil {return _ggae ;
};_gdbge .NumberOfSymbolInstances =uint32 (_fgdc &_d .MaxUint32 );_ffbgd :=_gdbge .RegionInfo .BitmapWidth *_gdbge .RegionInfo .BitmapHeight ;if _ffbgd < _gdbge .NumberOfSymbolInstances {_bg .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_ffbgd ,_gdbge .NumberOfSymbolInstances );
_gdbge .NumberOfSymbolInstances =_ffbgd ;};return nil ;};func (_ccbe *TextRegion )readUseRefinement ()error {if !_ccbe .UseRefinement ||_ccbe .SbrTemplate !=0{return nil ;};var (_cdbe byte ;_cdca error ;);_ccbe .SbrATX =make ([]int8 ,2);_ccbe .SbrATY =make ([]int8 ,2);
_cdbe ,_cdca =_ccbe ._egaf .ReadByte ();if _cdca !=nil {return _cdca ;};_ccbe .SbrATX [0]=int8 (_cdbe );_cdbe ,_cdca =_ccbe ._egaf .ReadByte ();if _cdca !=nil {return _cdca ;};_ccbe .SbrATY [0]=int8 (_cdbe );_cdbe ,_cdca =_ccbe ._egaf .ReadByte ();if _cdca !=nil {return _cdca ;
};_ccbe .SbrATX [1]=int8 (_cdbe );_cdbe ,_cdca =_ccbe ._egaf .ReadByte ();if _cdca !=nil {return _cdca ;};_ccbe .SbrATY [1]=int8 (_cdbe );return nil ;};func (_feadd *Header )subInputReader ()(*_c .Reader ,error ){_ccfb :=int (_feadd .SegmentDataLength );
if _feadd .SegmentDataLength ==_d .MaxInt32 {_ccfb =-1;};return _feadd .Reader .NewPartialReader (int (_feadd .SegmentDataStartOffset ),_ccfb ,false );};func (_decb *RegionSegment )readCombinationOperator ()error {_gfcg ,_fbff :=_decb ._dgfd .ReadBits (3);
if _fbff !=nil {return _fbff ;};_decb .CombinaionOperator =_ac .CombinationOperator (_gfcg &0xF);return nil ;};func (_efa *GenericRegion )decodeTemplate0b (_afa ,_ccf ,_eebe int ,_gbga ,_bdaf int )(_ddbb error ){const _cdfd ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_cbb ,_egbd int ;_dfd ,_geb int ;_geg byte ;_eefb int ;);if _afa >=1{_geg ,_ddbb =_efa .Bitmap .GetByte (_bdaf );if _ddbb !=nil {return _ff .Wrap (_ddbb ,_cdfd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_dfd =int (_geg );};if _afa >=2{_geg ,_ddbb =_efa .Bitmap .GetByte (_bdaf -_efa .Bitmap .RowStride );
if _ddbb !=nil {return _ff .Wrap (_ddbb ,_cdfd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_geb =int (_geg )<<6;};_cbb =(_dfd &0xf0)|(_geb &0x3800);for _gebb :=0;_gebb < _eebe ;_gebb =_eefb {var (_egbb byte ;_fgagg int ;);_eefb =_gebb +8;if _caf :=_ccf -_gebb ;
_caf > 8{_fgagg =8;}else {_fgagg =_caf ;};if _afa > 0{_dfd <<=8;if _eefb < _ccf {_geg ,_ddbb =_efa .Bitmap .GetByte (_bdaf +1);if _ddbb !=nil {return _ff .Wrap (_ddbb ,_cdfd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_dfd |=int (_geg );};};
if _afa > 1{_geb <<=8;if _eefb < _ccf {_geg ,_ddbb =_efa .Bitmap .GetByte (_bdaf -_efa .Bitmap .RowStride +1);if _ddbb !=nil {return _ff .Wrap (_ddbb ,_cdfd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_geb |=int (_geg )<<6;};};for _ggdd :=0;
_ggdd < _fgagg ;_ggdd ++{_afg :=uint (7-_ggdd );if _efa ._aabf {_egbd =_efa .overrideAtTemplate0b (_cbb ,_gebb +_ggdd ,_afa ,int (_egbb ),_ggdd ,int (_afg ));_efa ._ccg .SetIndex (int32 (_egbd ));}else {_efa ._ccg .SetIndex (int32 (_cbb ));};var _ecaf int ;
_ecaf ,_ddbb =_efa ._eeea .DecodeBit (_efa ._ccg );if _ddbb !=nil {return _ff .Wrap (_ddbb ,_cdfd ,"");};_egbb |=byte (_ecaf <<_afg );_cbb =((_cbb &0x7bf7)<<1)|_ecaf |((_dfd >>_afg )&0x10)|((_geb >>_afg )&0x800);};if _afdd :=_efa .Bitmap .SetByte (_gbga ,_egbb );
_afdd !=nil {return _ff .Wrap (_afdd ,_cdfd ,"");};_gbga ++;_bdaf ++;};return nil ;};func (_efca *HalftoneRegion )checkInput ()error {if _efca .IsMMREncoded {if _efca .HTemplate !=0{_bg .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_efca .HTemplate );
};if _efca .HSkipEnabled {_bg .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_efca .HSkipEnabled );
};};return nil ;};func (_aafeb *SymbolDictionary )decodeNewSymbols (_gbca ,_cfga uint32 ,_degf *_ac .Bitmap ,_gfa ,_gfgb int32 )error {if _aafeb ._ddgf ==nil {_aafeb ._ddgf =_edd (_aafeb ._cfg ,nil );if _aafeb ._debf ==nil {var _agdea error ;_aafeb ._debf ,_agdea =_gf .New (_aafeb ._cfg );
if _agdea !=nil {return _agdea ;};};if _aafeb ._afcd ==nil {_aafeb ._afcd =_gf .NewStats (65536,1);};};_aafeb ._ddgf .setParameters (_aafeb ._afcd ,_aafeb ._debf ,_aafeb .SdrTemplate ,_gbca ,_cfga ,_degf ,_gfa ,_gfgb ,false ,_aafeb .SdrATX ,_aafeb .SdrATY );
return _aafeb .addSymbol (_aafeb ._ddgf );};func (_faafg *SymbolDictionary )getUserTable (_gdgb int )(_bc .Tabler ,error ){var _dfcaa int ;for _ ,_gfbg :=range _faafg .Header .RTSegments {if _gfbg .Type ==53{if _dfcaa ==_gdgb {_dbga ,_aecg :=_gfbg .GetSegmentData ();
if _aecg !=nil {return nil ,_aecg ;};_cca :=_dbga .(_bc .BasicTabler );return _bc .NewEncodedTable (_cca );};_dfcaa ++;};};return nil ,nil ;};var _ templater =&template1 {};func (_dec *GenericRegion )Size ()int {return _dec .RegionSegment .Size ()+1+2*len (_dec .GBAtX )};
func (_ceba *SymbolDictionary )readRegionFlags ()error {var (_accc uint64 ;_gcegb int ;);_ ,_eaff :=_ceba ._cfg .ReadBits (3);if _eaff !=nil {return _eaff ;};_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;};_ceba .SdrTemplate =int8 (_gcegb );
_accc ,_eaff =_ceba ._cfg .ReadBits (2);if _eaff !=nil {return _eaff ;};_ceba .SdTemplate =int8 (_accc &0xf);_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;};if _gcegb ==1{_ceba ._bbcf =true ;};_gcegb ,_eaff =_ceba ._cfg .ReadBit ();
if _eaff !=nil {return _eaff ;};if _gcegb ==1{_ceba ._gdcg =true ;};_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;};if _gcegb ==1{_ceba .SdHuffAggInstanceSelection =true ;};_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;
};_ceba .SdHuffBMSizeSelection =int8 (_gcegb );_accc ,_eaff =_ceba ._cfg .ReadBits (2);if _eaff !=nil {return _eaff ;};_ceba .SdHuffDecodeWidthSelection =int8 (_accc &0xf);_accc ,_eaff =_ceba ._cfg .ReadBits (2);if _eaff !=nil {return _eaff ;};_ceba .SdHuffDecodeHeightSelection =int8 (_accc &0xf);
_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;};if _gcegb ==1{_ceba .UseRefinementAggregation =true ;};_gcegb ,_eaff =_ceba ._cfg .ReadBit ();if _eaff !=nil {return _eaff ;};if _gcegb ==1{_ceba .IsHuffmanEncoded =true ;};return nil ;
};func (_dfcb *PatternDictionary )checkInput ()error {if _dfcb .HdpHeight < 1||_dfcb .HdpWidth < 1{return _ea .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _dfcb .IsMMREncoded {if _dfcb .HDTemplate !=0{_bg .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};type EndOfStripe struct{_deb *_c .Reader ;_df int ;};func (_gbdg *Header )parse (_aea Documenter ,_acba *_c .Reader ,_dbbc int64 ,_gbc OrganizationType )(_ffc error ){const _gage ="\u0070\u0061\u0072s\u0065";_bg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _ffc !=nil {_bg .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ffc );}else {_bg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
};}();_ ,_ffc =_acba .Seek (_dbbc ,_a .SeekStart );if _ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _ffc =_gbdg .readSegmentNumber (_acba );_ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");
};if _ffc =_gbdg .readHeaderFlags ();_ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");};var _cdd uint64 ;_cdd ,_ffc =_gbdg .readNumberOfReferredToSegments (_acba );if _ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");};_gbdg .RTSNumbers ,_ffc =_gbdg .readReferredToSegmentNumbers (_acba ,int (_cdd ));
if _ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");};_ffc =_gbdg .readSegmentPageAssociation (_aea ,_acba ,_cdd ,_gbdg .RTSNumbers ...);if _ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");};if _gbdg .Type !=TEndOfFile {if _ffc =_gbdg .readSegmentDataLength (_acba );
_ffc !=nil {return _ff .Wrap (_ffc ,_gage ,"");};};_gbdg .readDataStartOffset (_acba ,_gbc );_gbdg .readHeaderLength (_acba ,_dbbc );_bg .Log .Trace ("\u0025\u0073",_gbdg );return nil ;};func (_aa *EndOfStripe )Init (h *Header ,r *_c .Reader )error {_aa ._deb =r ;
return _aa .parseHeader ()};func (_adfb *PageInformationSegment )readCombinationOperator ()error {_gedf ,_dbed :=_adfb ._fdeg .ReadBits (2);if _dbed !=nil {return _dbed ;};_adfb ._fbc =_ac .CombinationOperator (int (_gedf ));return nil ;};func (_dbbd *PageInformationSegment )readWidthAndHeight ()error {_ceac ,_cgac :=_dbbd ._fdeg .ReadBits (32);
if _cgac !=nil {return _cgac ;};_dbbd .PageBMWidth =int (_ceac &_d .MaxInt32 );_ceac ,_cgac =_dbbd ._fdeg .ReadBits (32);if _cgac !=nil {return _cgac ;};_dbbd .PageBMHeight =int (_ceac &_d .MaxInt32 );return nil ;};func (_faa *template1 )form (_fga ,_eagb ,_bdaa ,_ceg ,_bea int16 )int16 {return ((_fga &0x02)<<8)|(_eagb <<6)|((_bdaa &0x03)<<4)|(_ceg <<1)|_bea ;
};func (_accb *GenericRegion )decodeTemplate2 (_ebdc ,_fab ,_cfc int ,_bffe ,_fcb int )(_ffa error ){const _ebgd ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";var (_ddaf ,_fefe int ;_bfe ,_ecfb int ;_afe byte ;_egfg ,_bce int ;
);if _ebdc >=1{_afe ,_ffa =_accb .Bitmap .GetByte (_fcb );if _ffa !=nil {return _ff .Wrap (_ffa ,_ebgd ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");};_bfe =int (_afe );};if _ebdc >=2{_afe ,_ffa =_accb .Bitmap .GetByte (_fcb -_accb .Bitmap .RowStride );
if _ffa !=nil {return _ff .Wrap (_ffa ,_ebgd ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_ecfb =int (_afe )<<4;};_ddaf =(_bfe >>3&0x7c)|(_ecfb >>3&0x380);for _abbd :=0;_abbd < _cfc ;_abbd =_egfg {var (_ecafa byte ;
_cge int ;);_egfg =_abbd +8;if _dacg :=_fab -_abbd ;_dacg > 8{_cge =8;}else {_cge =_dacg ;};if _ebdc > 0{_bfe <<=8;if _egfg < _fab {_afe ,_ffa =_accb .Bitmap .GetByte (_fcb +1);if _ffa !=nil {return _ff .Wrap (_ffa ,_ebgd ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");
};_bfe |=int (_afe );};};if _ebdc > 1{_ecfb <<=8;if _egfg < _fab {_afe ,_ffa =_accb .Bitmap .GetByte (_fcb -_accb .Bitmap .RowStride +1);if _ffa !=nil {return _ff .Wrap (_ffa ,_ebgd ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");
};_ecfb |=int (_afe )<<4;};};for _egfb :=0;_egfb < _cge ;_egfb ++{_caggb :=uint (10-_egfb );if _accb ._aabf {_fefe =_accb .overrideAtTemplate2 (_ddaf ,_abbd +_egfb ,_ebdc ,int (_ecafa ),_egfb );_accb ._ccg .SetIndex (int32 (_fefe ));}else {_accb ._ccg .SetIndex (int32 (_ddaf ));
};_bce ,_ffa =_accb ._eeea .DecodeBit (_accb ._ccg );if _ffa !=nil {return _ff .Wrap (_ffa ,_ebgd ,"");};_ecafa |=byte (_bce <<uint (7-_egfb ));_ddaf =((_ddaf &0x1bd)<<1)|_bce |((_bfe >>_caggb )&0x4)|((_ecfb >>_caggb )&0x80);};if _fgdd :=_accb .Bitmap .SetByte (_bffe ,_ecafa );
_fgdd !=nil {return _ff .Wrap (_fgdd ,_ebgd ,"");};_bffe ++;_fcb ++;};return nil ;};func (_bfag *SymbolDictionary )InitEncode (symbols *_ac .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _bcdg ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_bfag .SdATX =[]int8 {3,-3,2,-2};_bfag .SdATY =[]int8 {-1,-1,-2,-2};_bfag ._aeda =symbols ;_bfag ._abaa =make ([]int ,len (symbolList ));copy (_bfag ._abaa ,symbolList );if len (_bfag ._abaa )!=_bfag ._aeda .Size (){return _ff .Error (_bcdg ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_bfag .NumberOfNewSymbols =uint32 (symbols .Size ());_bfag .NumberOfExportedSymbols =uint32 (symbols .Size ());_bfag ._bcge =symbolMap ;_bfag ._gegaf =unborderSymbols ;return nil ;};type Regioner interface{GetRegionBitmap ()(*_ac .Bitmap ,error );GetRegionInfo ()*RegionSegment ;
};func (_dded *SymbolDictionary )encodeRefinementATFlags (_cgfg _c .BinaryWriter )(_adag int ,_fge error ){const _gdgaf ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_dded .UseRefinementAggregation ||_dded .SdrTemplate !=0{return 0,nil ;};for _eabg :=0;_eabg < 2;_eabg ++{if _fge =_cgfg .WriteByte (byte (_dded .SdrATX [_eabg ]));_fge !=nil {return _adag ,_ff .Wrapf (_fge ,_gdgaf ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_eabg );
};_adag ++;if _fge =_cgfg .WriteByte (byte (_dded .SdrATY [_eabg ]));_fge !=nil {return _adag ,_ff .Wrapf (_fge ,_gdgaf ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_eabg );};_adag ++;};return _adag ,nil ;};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_ac .Bitmap ,error );};func (_cgdc *SymbolDictionary )setExportedSymbols (_ddbe []int ){for _agdgb :=uint32 (0);_agdgb < _cgdc ._ebdd +_cgdc .NumberOfNewSymbols ;_agdgb ++{if _ddbe [_agdgb ]==1{var _ccbf *_ac .Bitmap ;if _agdgb < _cgdc ._ebdd {_ccbf =_cgdc ._adef [_agdgb ];
}else {_ccbf =_cgdc ._geab [_agdgb -_cgdc ._ebdd ];};_bg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_ccbf );
_cgdc ._fabd =append (_cgdc ._fabd ,_ccbf );};};};func (_abee *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _abee ._eefdaa ==nil {var (_cddeg int ;_babf error ;);if _abee .SdHuffDecodeHeightSelection ==3{_cddeg ++;};if _abee .SdHuffDecodeWidthSelection ==3{_cddeg ++;
};_abee ._eefdaa ,_babf =_abee .getUserTable (_cddeg );if _babf !=nil {return 0,_babf ;};};return _abee ._eefdaa .Decode (_abee ._cfg );};func (_ade *GenericRefinementRegion )readAtPixels ()error {_ade .GrAtX =make ([]int8 ,2);_ade .GrAtY =make ([]int8 ,2);
_gbgd ,_adec :=_ade ._gfb .ReadByte ();if _adec !=nil {return _adec ;};_ade .GrAtX [0]=int8 (_gbgd );_gbgd ,_adec =_ade ._gfb .ReadByte ();if _adec !=nil {return _adec ;};_ade .GrAtY [0]=int8 (_gbgd );_gbgd ,_adec =_ade ._gfb .ReadByte ();if _adec !=nil {return _adec ;
};_ade .GrAtX [1]=int8 (_gbgd );_gbgd ,_adec =_ade ._gfb .ReadByte ();if _adec !=nil {return _adec ;};_ade .GrAtY [1]=int8 (_gbgd );return nil ;};func (_babb *PageInformationSegment )CombinationOperator ()_ac .CombinationOperator {return _babb ._fbc };
func (_bced *GenericRegion )overrideAtTemplate0b (_ggb ,_ddac ,_dea ,_beg ,_cagb ,_afgb int )int {if _bced .GBAtOverride [0]{_ggb &=0xFFFD;if _bced .GBAtY [0]==0&&_bced .GBAtX [0]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [0]&0x1))<<1;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [0]),_dea +int (_bced .GBAtY [0])))<<1;};};if _bced .GBAtOverride [1]{_ggb &=0xDFFF;if _bced .GBAtY [1]==0&&_bced .GBAtX [1]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [1]&0x1))<<13;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [1]),_dea +int (_bced .GBAtY [1])))<<13;};};if _bced .GBAtOverride [2]{_ggb &=0xFDFF;if _bced .GBAtY [2]==0&&_bced .GBAtX [2]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [2]&0x1))<<9;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [2]),_dea +int (_bced .GBAtY [2])))<<9;};};if _bced .GBAtOverride [3]{_ggb &=0xBFFF;if _bced .GBAtY [3]==0&&_bced .GBAtX [3]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [3]&0x1))<<14;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [3]),_dea +int (_bced .GBAtY [3])))<<14;};};if _bced .GBAtOverride [4]{_ggb &=0xEFFF;if _bced .GBAtY [4]==0&&_bced .GBAtX [4]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [4]&0x1))<<12;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [4]),_dea +int (_bced .GBAtY [4])))<<12;};};if _bced .GBAtOverride [5]{_ggb &=0xFFDF;if _bced .GBAtY [5]==0&&_bced .GBAtX [5]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [5]&0x1))<<5;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [5]),_dea +int (_bced .GBAtY [5])))<<5;};};if _bced .GBAtOverride [6]{_ggb &=0xFFFB;if _bced .GBAtY [6]==0&&_bced .GBAtX [6]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [6]&0x1))<<2;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [6]),_dea +int (_bced .GBAtY [6])))<<2;};};if _bced .GBAtOverride [7]{_ggb &=0xFFF7;if _bced .GBAtY [7]==0&&_bced .GBAtX [7]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [7]&0x1))<<3;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [7]),_dea +int (_bced .GBAtY [7])))<<3;};};if _bced .GBAtOverride [8]{_ggb &=0xF7FF;if _bced .GBAtY [8]==0&&_bced .GBAtX [8]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [8]&0x1))<<11;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [8]),_dea +int (_bced .GBAtY [8])))<<11;};};if _bced .GBAtOverride [9]{_ggb &=0xFFEF;if _bced .GBAtY [9]==0&&_bced .GBAtX [9]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [9]&0x1))<<4;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [9]),_dea +int (_bced .GBAtY [9])))<<4;};};if _bced .GBAtOverride [10]{_ggb &=0x7FFF;if _bced .GBAtY [10]==0&&_bced .GBAtX [10]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [10]&0x1))<<15;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [10]),_dea +int (_bced .GBAtY [10])))<<15;};};if _bced .GBAtOverride [11]{_ggb &=0xFDFF;if _bced .GBAtY [11]==0&&_bced .GBAtX [11]>=-int8 (_cagb ){_ggb |=(_beg >>uint (int8 (_afgb )-_bced .GBAtX [11]&0x1))<<10;
}else {_ggb |=int (_bced .getPixel (_ddac +int (_bced .GBAtX [11]),_dea +int (_bced .GBAtY [11])))<<10;};};return _ggb ;};func (_dddef *SymbolDictionary )setSymbolsArray ()error {if _dddef ._adef ==nil {if _fcbe :=_dddef .retrieveImportSymbols ();_fcbe !=nil {return _fcbe ;
};};if _dddef ._fbfbc ==nil {_dddef ._fbfbc =append (_dddef ._fbfbc ,_dddef ._adef ...);};return nil ;};func (_cfbg *GenericRegion )writeGBAtPixels (_dga _c .BinaryWriter )(_gdbg int ,_agc error ){const _ggbd ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";
if _cfbg .UseMMR {return 0,nil ;};_abcg :=1;if _cfbg .GBTemplate ==0{_abcg =4;}else if _cfbg .UseExtTemplates {_abcg =12;};if len (_cfbg .GBAtX )!=_abcg {return 0,_ff .Errorf (_ggbd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_cfbg .GBAtY )!=_abcg {return 0,_ff .Errorf (_ggbd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _efcb :=0;_efcb < _abcg ;_efcb ++{if _agc =_dga .WriteByte (byte (_cfbg .GBAtX [_efcb ]));_agc !=nil {return _gdbg ,_ff .Wrap (_agc ,_ggbd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_gdbg ++;if _agc =_dga .WriteByte (byte (_cfbg .GBAtY [_efcb ]));
_agc !=nil {return _gdbg ,_ff .Wrap (_agc ,_ggbd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_gdbg ++;};return _gdbg ,nil ;};func (_ffce *Header )readHeaderFlags ()error {const _bab ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";
_ggba ,_adcb :=_ffce .Reader .ReadBit ();if _adcb !=nil {return _ff .Wrap (_adcb ,_bab ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _ggba !=0{_ffce .RetainFlag =true ;};_ggba ,_adcb =_ffce .Reader .ReadBit ();if _adcb !=nil {return _ff .Wrap (_adcb ,_bab ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _ggba !=0{_ffce .PageAssociationFieldSize =true ;};_gdff ,_adcb :=_ffce .Reader .ReadBits (6);if _adcb !=nil {return _ff .Wrap (_adcb ,_bab ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_ffce .Type =Type (int (_gdff ));
return nil ;};func (_fd *GenericRefinementRegion )decodeOptimized (_fb ,_ddg ,_gda ,_abac ,_ddge ,_ga ,_abbf int )error {var (_gfe error ;_beb int ;_dfe int ;);_dfb :=_fb -int (_fd .ReferenceDY );if _dc :=int (-_fd .ReferenceDX );_dc > 0{_beb =_dc ;};_bb :=_fd .ReferenceBitmap .GetByteIndex (_beb ,_dfb );
if _fd .ReferenceDX > 0{_dfe =int (_fd .ReferenceDX );};_afb :=_fd .RegionBitmap .GetByteIndex (_dfe ,_fb );switch _fd .TemplateID {case 0:_gfe =_fd .decodeTemplate (_fb ,_ddg ,_gda ,_abac ,_ddge ,_ga ,_abbf ,_afb ,_dfb ,_bb ,_fd ._be );case 1:_gfe =_fd .decodeTemplate (_fb ,_ddg ,_gda ,_abac ,_ddge ,_ga ,_abbf ,_afb ,_dfb ,_bb ,_fd ._abb );
};return _gfe ;};var _ SegmentEncoder =&RegionSegment {};func (_fagg *TextRegion )readHuffmanFlags ()error {var (_cgcgb int ;_dbgd uint64 ;_bcfg error ;);_ ,_bcfg =_fagg ._egaf .ReadBit ();if _bcfg !=nil {return _bcfg ;};_cgcgb ,_bcfg =_fagg ._egaf .ReadBit ();
if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffRSize =int8 (_cgcgb );_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffRDY =int8 (_dbgd )&0xf;_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffRDX =int8 (_dbgd )&0xf;
_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffRDHeight =int8 (_dbgd )&0xf;_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffRDWidth =int8 (_dbgd )&0xf;_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);
if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffDT =int8 (_dbgd )&0xf;_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffDS =int8 (_dbgd )&0xf;_dbgd ,_bcfg =_fagg ._egaf .ReadBits (2);if _bcfg !=nil {return _bcfg ;};_fagg .SbHuffFS =int8 (_dbgd )&0xf;
return nil ;};func (_gagd *TextRegion )decodeSymbolInstances ()error {_cbgf ,_gffe :=_gagd .decodeStripT ();if _gffe !=nil {return _gffe ;};var (_eddgf int64 ;_eeg uint32 ;);for _eeg < _gagd .NumberOfSymbolInstances {_gafae ,_cccd :=_gagd .decodeDT ();
if _cccd !=nil {return _cccd ;};_cbgf +=_gafae ;var _bagdf int64 ;_fbaa :=true ;_gagd ._degg =0;for {if _fbaa {_bagdf ,_cccd =_gagd .decodeDfs ();if _cccd !=nil {return _cccd ;};_eddgf +=_bagdf ;_gagd ._degg =_eddgf ;_fbaa =false ;}else {_cfeda ,_fgfb :=_gagd .decodeIds ();
if _de .Is (_fgfb ,_cb .ErrOOB ){break ;};if _fgfb !=nil {return _fgfb ;};if _eeg >=_gagd .NumberOfSymbolInstances {break ;};_gagd ._degg +=_cfeda +int64 (_gagd .SbDsOffset );};_dbdc ,_ffffcg :=_gagd .decodeCurrentT ();if _ffffcg !=nil {return _ffffcg ;
};_egae :=_cbgf +_dbdc ;_dgef ,_ffffcg :=_gagd .decodeID ();if _ffffcg !=nil {return _ffffcg ;};_gbdd ,_ffffcg :=_gagd .decodeRI ();if _ffffcg !=nil {return _ffffcg ;};_feceg ,_ffffcg :=_gagd .decodeIb (_gbdd ,_dgef );if _ffffcg !=nil {return _ffffcg ;
};if _ffffcg =_gagd .blit (_feceg ,_egae );_ffffcg !=nil {return _ffffcg ;};_eeg ++;};};return nil ;};func (_eebeb *PatternDictionary )readTemplate ()error {_degc ,_cdged :=_eebeb ._cgfbc .ReadBits (2);if _cdged !=nil {return _cdged ;};_eebeb .HDTemplate =byte (_degc );
return nil ;};func (_egcg *Header )readDataStartOffset (_eeeg *_c .Reader ,_gef OrganizationType ){if _gef ==OSequential {_egcg .SegmentDataStartOffset =uint64 (_eeeg .AbsolutePosition ());};};func (_cfbef *SymbolDictionary )setAtPixels ()error {if _cfbef .IsHuffmanEncoded {return nil ;
};_adca :=1;if _cfbef .SdTemplate ==0{_adca =4;};if _gafaf :=_cfbef .readAtPixels (_adca );_gafaf !=nil {return _gafaf ;};return nil ;};func (_dggd *TextRegion )createRegionBitmap ()error {_dggd .RegionBitmap =_ac .New (int (_dggd .RegionInfo .BitmapWidth ),int (_dggd .RegionInfo .BitmapHeight ));
if _dggd .DefaultPixel !=0{_dggd .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_eddef *TextRegion )decodeIds ()(int64 ,error ){const _eaef ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _eddef .IsHuffmanEncoded {if _eddef .SbHuffDS ==3{if _eddef ._acfgc ==nil {_gedfa :=0;
if _eddef .SbHuffFS ==3{_gedfa ++;};var _eaeb error ;_eddef ._acfgc ,_eaeb =_eddef .getUserTable (_gedfa );if _eaeb !=nil {return 0,_ff .Wrap (_eaeb ,_eaef ,"");};};return _eddef ._acfgc .Decode (_eddef ._egaf );};_dcgb ,_abbfd :=_bc .GetStandardTable (8+int (_eddef .SbHuffDS ));
if _abbfd !=nil {return 0,_ff .Wrap (_abbfd ,_eaef ,"");};return _dcgb .Decode (_eddef ._egaf );};_fage ,_bgbf :=_eddef ._gefgc .DecodeInt (_eddef ._ffed );if _bgbf !=nil {return 0,_ff .Wrap (_bgbf ,_eaef ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_fage ),nil ;
};func (_cded *HalftoneRegion )parseHeader ()error {if _ccb :=_cded .RegionSegment .parseHeader ();_ccb !=nil {return _ccb ;};_adebf ,_bbbgc :=_cded ._cccg .ReadBit ();if _bbbgc !=nil {return _bbbgc ;};_cded .HDefaultPixel =int8 (_adebf );_dcg ,_bbbgc :=_cded ._cccg .ReadBits (3);
if _bbbgc !=nil {return _bbbgc ;};_cded .CombinationOperator =_ac .CombinationOperator (_dcg &0xf);_adebf ,_bbbgc =_cded ._cccg .ReadBit ();if _bbbgc !=nil {return _bbbgc ;};if _adebf ==1{_cded .HSkipEnabled =true ;};_dcg ,_bbbgc =_cded ._cccg .ReadBits (2);
if _bbbgc !=nil {return _bbbgc ;};_cded .HTemplate =byte (_dcg &0xf);_adebf ,_bbbgc =_cded ._cccg .ReadBit ();if _bbbgc !=nil {return _bbbgc ;};if _adebf ==1{_cded .IsMMREncoded =true ;};_dcg ,_bbbgc =_cded ._cccg .ReadBits (32);if _bbbgc !=nil {return _bbbgc ;
};_cded .HGridWidth =uint32 (_dcg &_d .MaxUint32 );_dcg ,_bbbgc =_cded ._cccg .ReadBits (32);if _bbbgc !=nil {return _bbbgc ;};_cded .HGridHeight =uint32 (_dcg &_d .MaxUint32 );_dcg ,_bbbgc =_cded ._cccg .ReadBits (32);if _bbbgc !=nil {return _bbbgc ;};
_cded .HGridX =int32 (_dcg &_d .MaxInt32 );_dcg ,_bbbgc =_cded ._cccg .ReadBits (32);if _bbbgc !=nil {return _bbbgc ;};_cded .HGridY =int32 (_dcg &_d .MaxInt32 );_dcg ,_bbbgc =_cded ._cccg .ReadBits (16);if _bbbgc !=nil {return _bbbgc ;};_cded .HRegionX =uint16 (_dcg &_d .MaxUint16 );
_dcg ,_bbbgc =_cded ._cccg .ReadBits (16);if _bbbgc !=nil {return _bbbgc ;};_cded .HRegionY =uint16 (_dcg &_d .MaxUint16 );if _bbbgc =_cded .computeSegmentDataStructure ();_bbbgc !=nil {return _bbbgc ;};return _cded .checkInput ();};func (_eddeg *TableSegment )parseHeader ()error {var (_accd int ;
_ffcdf uint64 ;_bdef error ;);_accd ,_bdef =_eddeg ._ccbd .ReadBit ();if _bdef !=nil {return _bdef ;};if _accd ==1{return _g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_accd );
};if _ffcdf ,_bdef =_eddeg ._ccbd .ReadBits (3);_bdef !=nil {return _bdef ;};_eddeg ._ddegf =(int32 (_ffcdf )+1)&0xf;if _ffcdf ,_bdef =_eddeg ._ccbd .ReadBits (3);_bdef !=nil {return _bdef ;};_eddeg ._fddb =(int32 (_ffcdf )+1)&0xf;if _ffcdf ,_bdef =_eddeg ._ccbd .ReadBits (32);
_bdef !=nil {return _bdef ;};_eddeg ._edgg =int32 (_ffcdf &_d .MaxInt32 );if _ffcdf ,_bdef =_eddeg ._ccbd .ReadBits (32);_bdef !=nil {return _bdef ;};_eddeg ._dcag =int32 (_ffcdf &_d .MaxInt32 );return nil ;};func (_fffdf *RegionSegment )String ()string {_cab :=&_b .Builder {};
_cab .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");_cab .WriteString (_g .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_fffdf .BitmapWidth ,_fffdf .BitmapHeight ));
_cab .WriteString (_g .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_fffdf .XLocation ,_fffdf .YLocation ));_cab .WriteString (_g .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_fffdf .CombinaionOperator ));
return _cab .String ();};type HalftoneRegion struct{_cccg *_c .Reader ;_bacc *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _ac .CombinationOperator ;
HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_ac .Bitmap ;Patterns []*_ac .Bitmap ;};func (_cfcaf *SymbolDictionary )Init (h *Header ,r *_c .Reader )error {_cfcaf .Header =h ;
_cfcaf ._cfg =r ;return _cfcaf .parseHeader ();};func (_bebef *PageInformationSegment )String ()string {_cbba :=&_b .Builder {};_cbba .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");
_cbba .WriteString (_g .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_bebef .PageBMHeight ));_cbba .WriteString (_g .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_bebef .PageBMWidth ));
_cbba .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_bebef .ResolutionX ));_cbba .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_bebef .ResolutionY ));
_cbba .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_bebef ._fbc ));_cbba .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_bebef ._cdac ));
_cbba .WriteString (_g .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_bebef .IsLossless ));_cbba .WriteString (_g .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_bebef ._eaadb ));
_cbba .WriteString (_g .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_bebef ._eeebg ));_cbba .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_bebef .IsStripe ));
_cbba .WriteString (_g .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_bebef .MaxStripeSize ));return _cbba .String ();};func (_dbaa *Header )writeReferredToCount (_eafe _c .BinaryWriter )(_cefb int ,_edec error ){const _fccg ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_dbaa .RTSNumbers =make ([]int ,len (_dbaa .RTSegments ));for _afba ,_cad :=range _dbaa .RTSegments {_dbaa .RTSNumbers [_afba ]=int (_cad .SegmentNumber );};if len (_dbaa .RTSNumbers )<=4{var _fcebe byte ;if len (_dbaa .RetainBits )>=1{_fcebe =_dbaa .RetainBits [0];
};_fcebe |=byte (len (_dbaa .RTSNumbers ))<<5;if _edec =_eafe .WriteByte (_fcebe );_edec !=nil {return 0,_ff .Wrap (_edec ,_fccg ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_badf :=uint32 (len (_dbaa .RTSNumbers ));
_cbeea :=make ([]byte ,4+_dd .Ceil (len (_dbaa .RTSNumbers )+1,8));_badf |=0x7<<29;_db .BigEndian .PutUint32 (_cbeea ,_badf );copy (_cbeea [1:],_dbaa .RetainBits );_cefb ,_edec =_eafe .Write (_cbeea );if _edec !=nil {return 0,_ff .Wrap (_edec ,_fccg ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _cefb ,nil ;};func (_aef *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_aef .SdHuffAggInstanceSelection {_ebdf ,_eeca :=_bc .GetStandardTable (1);if _eeca !=nil {return 0,_eeca ;};return _ebdf .Decode (_aef ._cfg );};if _aef ._decca ==nil {var (_eead int ;
_accf error ;);if _aef .SdHuffDecodeHeightSelection ==3{_eead ++;};if _aef .SdHuffDecodeWidthSelection ==3{_eead ++;};if _aef .SdHuffBMSizeSelection ==3{_eead ++;};_aef ._decca ,_accf =_aef .getUserTable (_eead );if _accf !=nil {return 0,_accf ;};};return _aef ._decca .Decode (_aef ._cfg );
};func NewGenericRegion (r *_c .Reader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_cc :r };};func (_bbdg *SymbolDictionary )decodeHeightClassBitmap (_dceg *_ac .Bitmap ,_fece int64 ,_aaec int ,_febg []int )error {for _bagd :=_fece ;
_bagd < int64 (_bbdg ._cfab );_bagd ++{var _agde int ;for _dfcc :=_fece ;_dfcc <=_bagd -1;_dfcc ++{_agde +=_febg [_dfcc ];};_gabc :=_f .Rect (_agde ,0,_agde +_febg [_bagd ],_aaec );_eebd ,_fegc :=_ac .Extract (_gabc ,_dceg );if _fegc !=nil {return _fegc ;
};_bbdg ._geab [_bagd ]=_eebd ;_bbdg ._fbfbc =append (_bbdg ._fbfbc ,_eebd );};return nil ;};func (_ged *Header )writeSegmentPageAssociation (_aed _c .BinaryWriter )(_eaad int ,_aafe error ){const _ebaa ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _ged .pageSize ()!=4{if _aafe =_aed .WriteByte (byte (_ged .PageAssociation ));_aafe !=nil {return 0,_ff .Wrap (_aafe ,_ebaa ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_egbea :=make ([]byte ,4);
_db .BigEndian .PutUint32 (_egbea ,uint32 (_ged .PageAssociation ));if _eaad ,_aafe =_aed .Write (_egbea );_aafe !=nil {return 0,_ff .Wrap (_aafe ,_ebaa ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _eaad ,nil ;
};func (_baccb *SymbolDictionary )GetDictionary ()([]*_ac .Bitmap ,error ){_bg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_bg .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_bg .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_baccb ._fabd ,_baccb ._geab );
}();if _baccb ._fabd ==nil {var _bdaafb error ;if _baccb .UseRefinementAggregation {_baccb ._aacc =_baccb .getSbSymCodeLen ();};if !_baccb .IsHuffmanEncoded {if _bdaafb =_baccb .setCodingStatistics ();_bdaafb !=nil {return nil ,_bdaafb ;};};_baccb ._geab =make ([]*_ac .Bitmap ,_baccb .NumberOfNewSymbols );
var _beed []int ;if _baccb .IsHuffmanEncoded &&!_baccb .UseRefinementAggregation {_beed =make ([]int ,_baccb .NumberOfNewSymbols );};if _bdaafb =_baccb .setSymbolsArray ();_bdaafb !=nil {return nil ,_bdaafb ;};var _eddd ,_eceg int64 ;_baccb ._cfab =0;for _baccb ._cfab < _baccb .NumberOfNewSymbols {_eceg ,_bdaafb =_baccb .decodeHeightClassDeltaHeight ();
if _bdaafb !=nil {return nil ,_bdaafb ;};_eddd +=_eceg ;var _afcg ,_edab uint32 ;_egag :=int64 (_baccb ._cfab );for {var _gbeb int64 ;_gbeb ,_bdaafb =_baccb .decodeDifferenceWidth ();if _de .Is (_bdaafb ,_cb .ErrOOB ){break ;};if _bdaafb !=nil {return nil ,_bdaafb ;
};if _baccb ._cfab >=_baccb .NumberOfNewSymbols {break ;};_afcg +=uint32 (_gbeb );_edab +=_afcg ;if !_baccb .IsHuffmanEncoded ||_baccb .UseRefinementAggregation {if !_baccb .UseRefinementAggregation {_bdaafb =_baccb .decodeDirectlyThroughGenericRegion (_afcg ,uint32 (_eddd ));
if _bdaafb !=nil {return nil ,_bdaafb ;};}else {_bdaafb =_baccb .decodeAggregate (_afcg ,uint32 (_eddd ));if _bdaafb !=nil {return nil ,_bdaafb ;};};}else if _baccb .IsHuffmanEncoded &&!_baccb .UseRefinementAggregation {_beed [_baccb ._cfab ]=int (_afcg );
};_baccb ._cfab ++;};if _baccb .IsHuffmanEncoded &&!_baccb .UseRefinementAggregation {var _gafc int64 ;if _baccb .SdHuffBMSizeSelection ==0{var _dfag _bc .Tabler ;_dfag ,_bdaafb =_bc .GetStandardTable (1);if _bdaafb !=nil {return nil ,_bdaafb ;};_gafc ,_bdaafb =_dfag .Decode (_baccb ._cfg );
if _bdaafb !=nil {return nil ,_bdaafb ;};}else {_gafc ,_bdaafb =_baccb .huffDecodeBmSize ();if _bdaafb !=nil {return nil ,_bdaafb ;};};_baccb ._cfg .Align ();var _acbgf *_ac .Bitmap ;_acbgf ,_bdaafb =_baccb .decodeHeightClassCollectiveBitmap (_gafc ,uint32 (_eddd ),_edab );
if _bdaafb !=nil {return nil ,_bdaafb ;};_bdaafb =_baccb .decodeHeightClassBitmap (_acbgf ,_egag ,int (_eddd ),_beed );if _bdaafb !=nil {return nil ,_bdaafb ;};};};_cbec ,_bdaafb :=_baccb .getToExportFlags ();if _bdaafb !=nil {return nil ,_bdaafb ;};_baccb .setExportedSymbols (_cbec );
};return _baccb ._fabd ,nil ;};func (_geca *GenericRegion )parseHeader ()(_gfc error ){_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _gfc !=nil {_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_gfc );
}else {_bg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_aaba int ;_bde uint64 ;);if _gfc =_geca .RegionSegment .parseHeader ();_gfc !=nil {return _gfc ;};if _ ,_gfc =_geca ._cc .ReadBits (3);_gfc !=nil {return _gfc ;};_aaba ,_gfc =_geca ._cc .ReadBit ();if _gfc !=nil {return _gfc ;};if _aaba ==1{_geca .UseExtTemplates =true ;
};_aaba ,_gfc =_geca ._cc .ReadBit ();if _gfc !=nil {return _gfc ;};if _aaba ==1{_geca .IsTPGDon =true ;};_bde ,_gfc =_geca ._cc .ReadBits (2);if _gfc !=nil {return _gfc ;};_geca .GBTemplate =byte (_bde &0xf);_aaba ,_gfc =_geca ._cc .ReadBit ();if _gfc !=nil {return _gfc ;
};if _aaba ==1{_geca .IsMMREncoded =true ;};if !_geca .IsMMREncoded {_bfa :=1;if _geca .GBTemplate ==0{_bfa =4;if _geca .UseExtTemplates {_bfa =12;};};if _gfc =_geca .readGBAtPixels (_bfa );_gfc !=nil {return _gfc ;};};if _gfc =_geca .computeSegmentDataStructure ();
_gfc !=nil {return _gfc ;};_bg .Log .Trace ("\u0025\u0073",_geca );return nil ;};func (_ddd *GenericRegion )overrideAtTemplate0a (_cda ,_efd ,_egec ,_dcaba ,_dab ,_ffgb int )int {if _ddd .GBAtOverride [0]{_cda &=0xFFEF;if _ddd .GBAtY [0]==0&&_ddd .GBAtX [0]>=-int8 (_dab ){_cda |=(_dcaba >>uint (int8 (_ffgb )-_ddd .GBAtX [0]&0x1))<<4;
}else {_cda |=int (_ddd .getPixel (_efd +int (_ddd .GBAtX [0]),_egec +int (_ddd .GBAtY [0])))<<4;};};if _ddd .GBAtOverride [1]{_cda &=0xFBFF;if _ddd .GBAtY [1]==0&&_ddd .GBAtX [1]>=-int8 (_dab ){_cda |=(_dcaba >>uint (int8 (_ffgb )-_ddd .GBAtX [1]&0x1))<<10;
}else {_cda |=int (_ddd .getPixel (_efd +int (_ddd .GBAtX [1]),_egec +int (_ddd .GBAtY [1])))<<10;};};if _ddd .GBAtOverride [2]{_cda &=0xF7FF;if _ddd .GBAtY [2]==0&&_ddd .GBAtX [2]>=-int8 (_dab ){_cda |=(_dcaba >>uint (int8 (_ffgb )-_ddd .GBAtX [2]&0x1))<<11;
}else {_cda |=int (_ddd .getPixel (_efd +int (_ddd .GBAtX [2]),_egec +int (_ddd .GBAtY [2])))<<11;};};if _ddd .GBAtOverride [3]{_cda &=0x7FFF;if _ddd .GBAtY [3]==0&&_ddd .GBAtX [3]>=-int8 (_dab ){_cda |=(_dcaba >>uint (int8 (_ffgb )-_ddd .GBAtX [3]&0x1))<<15;
}else {_cda |=int (_ddd .getPixel (_efd +int (_ddd .GBAtX [3]),_egec +int (_ddd .GBAtY [3])))<<15;};};return _cda ;};func (_cbcb *GenericRegion )overrideAtTemplate2 (_dgd ,_fbg ,_fbae ,_aeg ,_dfca int )int {_dgd &=0x3FB;if _cbcb .GBAtY [0]==0&&_cbcb .GBAtX [0]>=-int8 (_dfca ){_dgd |=(_aeg >>uint (7-(int8 (_dfca )+_cbcb .GBAtX [0]))&0x1)<<2;
}else {_dgd |=int (_cbcb .getPixel (_fbg +int (_cbcb .GBAtX [0]),_fbae +int (_cbcb .GBAtY [0])))<<2;};return _dgd ;};func (_bdbd *HalftoneRegion )computeX (_dad ,_adaa int )int {return _bdbd .shiftAndFill (int (_bdbd .HGridX )+_dad *int (_bdbd .HRegionY )+_adaa *int (_bdbd .HRegionX ));
};func (_fdfb *GenericRegion )getPixel (_egbe ,_dbdd int )int8 {if _egbe < 0||_egbe >=_fdfb .Bitmap .Width {return 0;};if _dbdd < 0||_dbdd >=_fdfb .Bitmap .Height {return 0;};if _fdfb .Bitmap .GetPixel (_egbe ,_dbdd ){return 1;};return 0;};func (_bebb *Header )readSegmentDataLength (_fegg *_c .Reader )(_bbd error ){_bebb .SegmentDataLength ,_bbd =_fegg .ReadBits (32);
if _bbd !=nil {return _bbd ;};_bebb .SegmentDataLength &=_d .MaxInt32 ;return nil ;};type OrganizationType uint8 ;func (_fdbg *Header )readHeaderLength (_acgfg *_c .Reader ,_fead int64 ){_fdbg .HeaderLength =_acgfg .AbsolutePosition ()-_fead ;};func (_eedg *HalftoneRegion )GetPatterns ()([]*_ac .Bitmap ,error ){var (_gdaf []*_ac .Bitmap ;
_dbc error ;);for _ ,_eccc :=range _eedg ._bacc .RTSegments {var _eaege Segmenter ;_eaege ,_dbc =_eccc .GetSegmentData ();if _dbc !=nil {_bg .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_dbc );
return nil ,_dbc ;};_bed ,_cdbg :=_eaege .(*PatternDictionary );if !_cdbg {_dbc =_g .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_eaege );
return nil ,_dbc ;};var _cgfbb []*_ac .Bitmap ;_cgfbb ,_dbc =_bed .GetDictionary ();if _dbc !=nil {_bg .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dbc );
return nil ,_dbc ;};_gdaf =append (_gdaf ,_cgfbb ...);};return _gdaf ,nil ;};func (_aafeg *TextRegion )String ()string {_faca :=&_b .Builder {};_faca .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");_faca .WriteString (_aafeg .RegionInfo .String ()+"\u000a");
_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_aafeg .SbrTemplate ));_faca .WriteString (_g .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_aafeg .SbDsOffset ));
_faca .WriteString (_g .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_aafeg .DefaultPixel ));_faca .WriteString (_g .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_aafeg .CombinationOperator ));
_faca .WriteString (_g .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_aafeg .IsTransposed ));_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_aafeg .ReferenceCorner ));
_faca .WriteString (_g .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_aafeg .UseRefinement ));_faca .WriteString (_g .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_aafeg .IsHuffmanEncoded ));
if _aafeg .IsHuffmanEncoded {_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_aafeg .SbHuffRSize ));_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_aafeg .SbHuffRDY ));
_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_aafeg .SbHuffRDX ));_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_aafeg .SbHuffRDHeight ));
_faca .WriteString (_g .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_aafeg .SbHuffRDWidth ));_faca .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_aafeg .SbHuffDT ));
_faca .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_aafeg .SbHuffDS ));_faca .WriteString (_g .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_aafeg .SbHuffFS ));
};_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_aafeg .SbrATX ));_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_aafeg .SbrATY ));
_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_aafeg .NumberOfSymbolInstances ));_faca .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_aafeg .SbrATX ));
return _faca .String ();};func (_ge *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_dcbe ,_egb ,_bbbg ,_gfg ,_eeb ,_eed ,_cgd ,_gdd ,_gfbd int )(_dfa error ){var (_fea ,_ecd int ;_cdf ,_baf int ;_aec ,_edee int ;_dgc byte ;);if _dcbe > 0{_dgc ,_dfa =_ge .RegionBitmap .GetByte (_cgd -_bbbg );
if _dfa !=nil {return ;};_cdf =int (_dgc );};if _gdd > 0&&_gdd <=_ge .ReferenceBitmap .Height {_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd -_gfg +_eed );if _dfa !=nil {return ;};_baf =int (_dgc )<<2;};if _gdd >=0&&_gdd < _ge .ReferenceBitmap .Height {_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd +_eed );
if _dfa !=nil {return ;};_aec =int (_dgc );};if _gdd > -2&&_gdd < _ge .ReferenceBitmap .Height -1{_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd +_gfg +_eed );if _dfa !=nil {return ;};_edee =int (_dgc );};_fea =((_cdf >>5)&0x6)|((_edee >>2)&0x30)|(_aec &0xc0)|(_baf &0x200);
_ecd =((_edee >>2)&0x70)|(_aec &0xc0)|(_baf &0x700);var _eab int ;for _gb :=0;_gb < _eeb ;_gb =_eab {var (_cdb int ;_bgg int ;);_eab =_gb +8;if _cdb =_egb -_gb ;_cdb > 8{_cdb =8;};_acg :=_eab < _egb ;_cdc :=_eab < _ge .ReferenceBitmap .Width ;_aag :=_eed +1;
if _dcbe > 0{_dgc =0;if _acg {_dgc ,_dfa =_ge .RegionBitmap .GetByte (_cgd -_bbbg +1);if _dfa !=nil {return ;};};_cdf =(_cdf <<8)|int (_dgc );};if _gdd > 0&&_gdd <=_ge .ReferenceBitmap .Height {var _fbe int ;if _cdc {_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd -_gfg +_aag );
if _dfa !=nil {return ;};_fbe =int (_dgc )<<2;};_baf =(_baf <<8)|_fbe ;};if _gdd >=0&&_gdd < _ge .ReferenceBitmap .Height {_dgc =0;if _cdc {_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd +_aag );if _dfa !=nil {return ;};};_aec =(_aec <<8)|int (_dgc );
};if _gdd > -2&&_gdd < (_ge .ReferenceBitmap .Height -1){_dgc =0;if _cdc {_dgc ,_dfa =_ge .ReferenceBitmap .GetByte (_gfbd +_gfg +_aag );if _dfa !=nil {return ;};};_edee =(_edee <<8)|int (_dgc );};for _feb :=0;_feb < _cdb ;_feb ++{var _egc int ;_ddgd :=(_ecd >>4)&0x1ff;
switch _ddgd {case 0x1ff:_egc =1;case 0x00:_egc =0;default:_ge ._gd .SetIndex (int32 (_fea ));_egc ,_dfa =_ge ._ad .DecodeBit (_ge ._gd );if _dfa !=nil {return ;};};_ce :=uint (7-_feb );_bgg |=_egc <<_ce ;_fea =((_fea &0x0d6)<<1)|_egc |(_cdf >>_ce +5)&0x002|((_edee >>_ce +2)&0x010)|((_aec >>_ce )&0x040)|((_baf >>_ce )&0x200);
_ecd =((_ecd &0xdb)<<1)|((_edee >>_ce +2)&0x010)|((_aec >>_ce )&0x080)|((_baf >>_ce )&0x400);};_dfa =_ge .RegionBitmap .SetByte (_cgd ,byte (_bgg ));if _dfa !=nil {return ;};_cgd ++;_gfbd ++;};return nil ;};func (_gbbfa *PatternDictionary )setGbAtPixels (){if _gbbfa .HDTemplate ==0{_gbbfa .GBAtX =make ([]int8 ,4);
_gbbfa .GBAtY =make ([]int8 ,4);_gbbfa .GBAtX [0]=-int8 (_gbbfa .HdpWidth );_gbbfa .GBAtY [0]=0;_gbbfa .GBAtX [1]=-3;_gbbfa .GBAtY [1]=-1;_gbbfa .GBAtX [2]=2;_gbbfa .GBAtY [2]=-2;_gbbfa .GBAtX [3]=-2;_gbbfa .GBAtY [3]=-2;}else {_gbbfa .GBAtX =[]int8 {-int8 (_gbbfa .HdpWidth )};
_gbbfa .GBAtY =[]int8 {0};};};func (_bgbg *GenericRegion )GetRegionInfo ()*RegionSegment {return _bgbg .RegionSegment };func (_fgda *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_ac .Points ,symbols *_ac .Bitmaps ,classIDs *_dd .IntSlice ,boxes *_ac .Boxes ,width ,height ,symBits int ){_fgda .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_fgda ._aeea =globalSymbolsMap ;_fgda ._agea =localSymbolsMap ;_fgda ._agab =comps ;_fgda ._fbfg =inLL ;_fgda ._fgeab =symbols ;_fgda ._gfae =classIDs ;_fgda ._bcage =boxes ;_fgda ._agaf =symBits ;};func (_bdag *HalftoneRegion )shiftAndFill (_gecf int )int {_gecf >>=8;
if _gecf < 0{_eceb :=int (_d .Log (float64 (_adba (_gecf )))/_d .Log (2));_cdeb :=31-_eceb ;for _abda :=1;_abda < _cdeb ;_abda ++{_gecf |=1<<uint (31-_abda );};};return _gecf ;};func (_gbgdg *SymbolDictionary )decodeRefinedSymbol (_ffee ,_afff uint32 )error {var (_febdf int ;
_gebf ,_dgdf int32 ;);if _gbgdg .IsHuffmanEncoded {_afage ,_dge :=_gbgdg ._cfg .ReadBits (byte (_gbgdg ._aacc ));if _dge !=nil {return _dge ;};_febdf =int (_afage );_fcg ,_dge :=_bc .GetStandardTable (15);if _dge !=nil {return _dge ;};_gfbea ,_dge :=_fcg .Decode (_gbgdg ._cfg );
if _dge !=nil {return _dge ;};_gebf =int32 (_gfbea );_gfbea ,_dge =_fcg .Decode (_gbgdg ._cfg );if _dge !=nil {return _dge ;};_dgdf =int32 (_gfbea );_fcg ,_dge =_bc .GetStandardTable (1);if _dge !=nil {return _dge ;};if _ ,_dge =_fcg .Decode (_gbgdg ._cfg );
_dge !=nil {return _dge ;};_gbgdg ._cfg .Align ();}else {_bfeb ,_cdgg :=_gbgdg ._debf .DecodeIAID (uint64 (_gbgdg ._aacc ),_gbgdg ._baa );if _cdgg !=nil {return _cdgg ;};_febdf =int (_bfeb );_gebf ,_cdgg =_gbgdg ._debf .DecodeInt (_gbgdg ._efcfc );if _cdgg !=nil {return _cdgg ;
};_dgdf ,_cdgg =_gbgdg ._debf .DecodeInt (_gbgdg ._aabg );if _cdgg !=nil {return _cdgg ;};};if _baba :=_gbgdg .setSymbolsArray ();_baba !=nil {return _baba ;};_bcgd :=_gbgdg ._fbfbc [_febdf ];if _dfaga :=_gbgdg .decodeNewSymbols (_ffee ,_afff ,_bcgd ,_gebf ,_dgdf );
_dfaga !=nil {return _dfaga ;};if _gbgdg .IsHuffmanEncoded {_gbgdg ._cfg .Align ();};return nil ;};func (_fad *GenericRegion )setParametersMMR (_fagb bool ,_eea ,_cagbg int64 ,_bfg ,_dcfad uint32 ,_cbeee byte ,_ddgc ,_cafc bool ,_eeec ,_fcef []int8 ){_fad .DataOffset =_eea ;
_fad .DataLength =_cagbg ;_fad .RegionSegment =&RegionSegment {};_fad .RegionSegment .BitmapHeight =_bfg ;_fad .RegionSegment .BitmapWidth =_dcfad ;_fad .GBTemplate =_cbeee ;_fad .IsMMREncoded =_fagb ;_fad .IsTPGDon =_ddgc ;_fad .GBAtX =_eeec ;_fad .GBAtY =_fcef ;
};func (_gbfe *GenericRegion )computeSegmentDataStructure ()error {_gbfe .DataOffset =_gbfe ._cc .AbsolutePosition ();_gbfe .DataHeaderLength =_gbfe .DataOffset -_gbfe .DataHeaderOffset ;_gbfe .DataLength =int64 (_gbfe ._cc .AbsoluteLength ())-_gbfe .DataHeaderLength ;
return nil ;};func (_bdeb *TextRegion )setParameters (_gcfe *_gf .Decoder ,_cfce ,_cffde bool ,_ffeg ,_gcga uint32 ,_cdgb uint32 ,_adde int8 ,_ffbcb uint32 ,_agfa int8 ,_eadc _ac .CombinationOperator ,_bgff int8 ,_ebcbb int16 ,_baed ,_caff ,_abaec ,_fgad ,_aebff ,_eff ,_eagf ,_gcafd ,_fbeg ,_cbgba int8 ,_cefd ,_baacg []int8 ,_cdcb []*_ac .Bitmap ,_cdfg int8 ){_bdeb ._gefgc =_gcfe ;
_bdeb .IsHuffmanEncoded =_cfce ;_bdeb .UseRefinement =_cffde ;_bdeb .RegionInfo .BitmapWidth =_ffeg ;_bdeb .RegionInfo .BitmapHeight =_gcga ;_bdeb .NumberOfSymbolInstances =_cdgb ;_bdeb .SbStrips =_adde ;_bdeb .NumberOfSymbols =_ffbcb ;_bdeb .DefaultPixel =_agfa ;
_bdeb .CombinationOperator =_eadc ;_bdeb .IsTransposed =_bgff ;_bdeb .ReferenceCorner =_ebcbb ;_bdeb .SbDsOffset =_baed ;_bdeb .SbHuffFS =_caff ;_bdeb .SbHuffDS =_abaec ;_bdeb .SbHuffDT =_fgad ;_bdeb .SbHuffRDWidth =_aebff ;_bdeb .SbHuffRDHeight =_eff ;
_bdeb .SbHuffRSize =_fbeg ;_bdeb .SbHuffRDX =_eagf ;_bdeb .SbHuffRDY =_gcafd ;_bdeb .SbrTemplate =_cbgba ;_bdeb .SbrATX =_cefd ;_bdeb .SbrATY =_baacg ;_bdeb .Symbols =_cdcb ;_bdeb ._fgbc =_cdfg ;};func (_cgdcd *TextRegion )parseHeader ()error {var _daad error ;
_bg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");defer func (){if _daad !=nil {_bg .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_daad );
}else {_bg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _daad =_cgdcd .RegionInfo .parseHeader ();
_daad !=nil {return _daad ;};if _daad =_cgdcd .readRegionFlags ();_daad !=nil {return _daad ;};if _cgdcd .IsHuffmanEncoded {if _daad =_cgdcd .readHuffmanFlags ();_daad !=nil {return _daad ;};};if _daad =_cgdcd .readUseRefinement ();_daad !=nil {return _daad ;
};if _daad =_cgdcd .readAmountOfSymbolInstances ();_daad !=nil {return _daad ;};if _daad =_cgdcd .getSymbols ();_daad !=nil {return _daad ;};if _daad =_cgdcd .computeSymbolCodeLength ();_daad !=nil {return _daad ;};if _daad =_cgdcd .checkInput ();_daad !=nil {return _daad ;
};_bg .Log .Trace ("\u0025\u0073",_cgdcd .String ());return nil ;};func (_bfad *PageInformationSegment )Encode (w _c .BinaryWriter )(_cadf int ,_cdde error ){const _gggd ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_cgfbd :=make ([]byte ,4);_db .BigEndian .PutUint32 (_cgfbd ,uint32 (_bfad .PageBMWidth ));_cadf ,_cdde =w .Write (_cgfbd );if _cdde !=nil {return _cadf ,_ff .Wrap (_cdde ,_gggd ,"\u0077\u0069\u0064t\u0068");};_db .BigEndian .PutUint32 (_cgfbd ,uint32 (_bfad .PageBMHeight ));
var _ggbg int ;_ggbg ,_cdde =w .Write (_cgfbd );if _cdde !=nil {return _ggbg +_cadf ,_ff .Wrap (_cdde ,_gggd ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_cadf +=_ggbg ;_db .BigEndian .PutUint32 (_cgfbd ,uint32 (_bfad .ResolutionX ));_ggbg ,_cdde =w .Write (_cgfbd );
if _cdde !=nil {return _ggbg +_cadf ,_ff .Wrap (_cdde ,_gggd ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_cadf +=_ggbg ;_db .BigEndian .PutUint32 (_cgfbd ,uint32 (_bfad .ResolutionY ));if _ggbg ,_cdde =w .Write (_cgfbd );_cdde !=nil {return _ggbg +_cadf ,_ff .Wrap (_cdde ,_gggd ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_cadf +=_ggbg ;if _cdde =_bfad .encodeFlags (w );_cdde !=nil {return _cadf ,_ff .Wrap (_cdde ,_gggd ,"");};_cadf ++;if _ggbg ,_cdde =_bfad .encodeStripingInformation (w );_cdde !=nil {return _cadf ,_ff .Wrap (_cdde ,_gggd ,"");};_cadf +=_ggbg ;return _cadf ,nil ;
};func (_ecge *Header )readSegmentPageAssociation (_bbe Documenter ,_agca *_c .Reader ,_cbg uint64 ,_cagba ...int )(_ebed error ){const _aded ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_ecge .PageAssociationFieldSize {_ccd ,_aecb :=_agca .ReadBits (8);if _aecb !=nil {return _ff .Wrap (_aecb ,_aded ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_ecge .PageAssociation =int (_ccd &0xFF);}else {_agdd ,_aacf :=_agca .ReadBits (32);
if _aacf !=nil {return _ff .Wrap (_aacf ,_aded ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_ecge .PageAssociation =int (_agdd &_d .MaxInt32 );};if _cbg ==0{return nil ;};if _ecge .PageAssociation !=0{_aecc ,_bcga :=_bbe .GetPage (_ecge .PageAssociation );
if _bcga !=nil {return _ff .Wrap (_bcga ,_aded ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _fagf int ;for _efbb :=uint64 (0);_efbb < _cbg ;_efbb ++{_fagf =_cagba [_efbb ];
_ecge .RTSegments [_efbb ],_bcga =_aecc .GetSegment (_fagf );if _bcga !=nil {var _add error ;_ecge .RTSegments [_efbb ],_add =_bbe .GetGlobalSegment (_fagf );if _add !=nil {return _ff .Wrapf (_bcga ,_aded ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_ecge .PageAssociation );
};};};return nil ;};for _faag :=uint64 (0);_faag < _cbg ;_faag ++{_ecge .RTSegments [_faag ],_ebed =_bbe .GetGlobalSegment (_cagba [_faag ]);if _ebed !=nil {return _ff .Wrapf (_ebed ,_aded ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_cagba [_faag ]);
};};return nil ;};type TextRegion struct{_egaf *_c .Reader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _ac .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;
IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_degg int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;
RegionBitmap *_ac .Bitmap ;Symbols []*_ac .Bitmap ;_gefgc *_gf .Decoder ;_fbed *GenericRefinementRegion ;_cbbe *_gf .DecoderStats ;_cgbg *_gf .DecoderStats ;_ffed *_gf .DecoderStats ;_acda *_gf .DecoderStats ;_dedf *_gf .DecoderStats ;_cfeb *_gf .DecoderStats ;
_bbaa *_gf .DecoderStats ;_gegf *_gf .DecoderStats ;_bfcg *_gf .DecoderStats ;_ebfg *_gf .DecoderStats ;_bfdd *_gf .DecoderStats ;_fgbc int8 ;_eefdd *_bc .FixedSizeTable ;Header *Header ;_fcff _bc .Tabler ;_acfgc _bc .Tabler ;_afca _bc .Tabler ;_ebef _bc .Tabler ;
_egfe _bc .Tabler ;_cdede _bc .Tabler ;_aged _bc .Tabler ;_aebe _bc .Tabler ;_aeea ,_agea map[int ]int ;_agab []int ;_fbfg *_ac .Points ;_fgeab *_ac .Bitmaps ;_gfae *_dd .IntSlice ;_addd ,_agaf int ;_bcage *_ac .Boxes ;};func (_adbb *TextRegion )encodeSymbols (_eabc _c .BinaryWriter )(_abaab int ,_cdae error ){const _fgge ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_gadd :=make ([]byte ,4);_db .BigEndian .PutUint32 (_gadd ,_adbb .NumberOfSymbols );if _abaab ,_cdae =_eabc .Write (_gadd );_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_cgaa ,_cdae :=_ac .NewClassedPoints (_adbb ._fbfg ,_adbb ._agab );if _cdae !=nil {return 0,_ff .Wrap (_cdae ,_fgge ,"");};var _gdgafc ,_dfbe int ;_fffb :=_ab .New ();_fffb .Init ();if _cdae =_fffb .EncodeInteger (_ab .IADT ,0);_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_gege ,_cdae :=_cgaa .GroupByY ();if _cdae !=nil {return 0,_ff .Wrap (_cdae ,_fgge ,"");};for _ ,_dabf :=range _gege {_deaf :=int (_dabf .YAtIndex (0));_acbab :=_deaf -_gdgafc ;if _cdae =_fffb .EncodeInteger (_ab .IADT ,_acbab );_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"");
};var _fagfd int ;for _gefca ,_dgae :=range _dabf .IntSlice {switch _gefca {case 0:_cbcc :=int (_dabf .XAtIndex (_gefca ))-_dfbe ;if _cdae =_fffb .EncodeInteger (_ab .IAFS ,_cbcc );_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"");};_dfbe +=_cbcc ;
_fagfd =_dfbe ;default:_aeede :=int (_dabf .XAtIndex (_gefca ))-_fagfd ;if _cdae =_fffb .EncodeInteger (_ab .IADS ,_aeede );_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"");};_fagfd +=_aeede ;};_aaeb ,_dbcd :=_adbb ._gfae .Get (_dgae );if _dbcd !=nil {return _abaab ,_ff .Wrap (_dbcd ,_fgge ,"");
};_egfbe ,_beda :=_adbb ._aeea [_aaeb ];if !_beda {_egfbe ,_beda =_adbb ._agea [_aaeb ];if !_beda {return _abaab ,_ff .Errorf (_fgge ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_aaeb );
};};if _dbcd =_fffb .EncodeIAID (_adbb ._agaf ,_egfbe );_dbcd !=nil {return _abaab ,_ff .Wrap (_dbcd ,_fgge ,"");};};if _cdae =_fffb .EncodeOOB (_ab .IADS );_cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"");};};_fffb .Final ();_abca ,_cdae :=_fffb .WriteTo (_eabc );
if _cdae !=nil {return _abaab ,_ff .Wrap (_cdae ,_fgge ,"");};_abaab +=int (_abca );return _abaab ,nil ;};func (_acfe *GenericRegion )decodeSLTP ()(int ,error ){switch _acfe .GBTemplate {case 0:_acfe ._ccg .SetIndex (0x9B25);case 1:_acfe ._ccg .SetIndex (0x795);
case 2:_acfe ._ccg .SetIndex (0xE5);case 3:_acfe ._ccg .SetIndex (0x195);};return _acfe ._eeea .DecodeBit (_acfe ._ccg );};func (_ebcb *PatternDictionary )extractPatterns (_edff *_ac .Bitmap )error {var _bdbf int ;_ecfd :=make ([]*_ac .Bitmap ,_ebcb .GrayMax +1);
for _bdbf <=int (_ebcb .GrayMax ){_ebgbc :=int (_ebcb .HdpWidth )*_bdbf ;_abba :=_f .Rect (_ebgbc ,0,_ebgbc +int (_ebcb .HdpWidth ),int (_ebcb .HdpHeight ));_beeb ,_bgag :=_ac .Extract (_abba ,_edff );if _bgag !=nil {return _bgag ;};_ecfd [_bdbf ]=_beeb ;
_bdbf ++;};_ebcb .Patterns =_ecfd ;return nil ;};func (_bccd *HalftoneRegion )renderPattern (_caa [][]int )(_eabd error ){var _bebe ,_abff int ;for _afbg :=0;_afbg < int (_bccd .HGridHeight );_afbg ++{for _ecg :=0;_ecg < int (_bccd .HGridWidth );_ecg ++{_bebe =_bccd .computeX (_afbg ,_ecg );
_abff =_bccd .computeY (_afbg ,_ecg );_gdfa :=_bccd .Patterns [_caa [_afbg ][_ecg ]];if _eabd =_ac .Blit (_gdfa ,_bccd .HalftoneRegionBitmap ,_bebe +int (_bccd .HGridX ),_abff +int (_bccd .HGridY ),_bccd .CombinationOperator );_eabd !=nil {return _eabd ;
};};};return nil ;};func (_deac *TextRegion )setCodingStatistics ()error {if _deac ._cbbe ==nil {_deac ._cbbe =_gf .NewStats (512,1);};if _deac ._cgbg ==nil {_deac ._cgbg =_gf .NewStats (512,1);};if _deac ._ffed ==nil {_deac ._ffed =_gf .NewStats (512,1);
};if _deac ._acda ==nil {_deac ._acda =_gf .NewStats (512,1);};if _deac ._dedf ==nil {_deac ._dedf =_gf .NewStats (512,1);};if _deac ._cfeb ==nil {_deac ._cfeb =_gf .NewStats (512,1);};if _deac ._bbaa ==nil {_deac ._bbaa =_gf .NewStats (512,1);};if _deac ._gegf ==nil {_deac ._gegf =_gf .NewStats (1<<uint (_deac ._fgbc ),1);
};if _deac ._bfcg ==nil {_deac ._bfcg =_gf .NewStats (512,1);};if _deac ._ebfg ==nil {_deac ._ebfg =_gf .NewStats (512,1);};if _deac ._gefgc ==nil {var _bgcf error ;_deac ._gefgc ,_bgcf =_gf .New (_deac ._egaf );if _bgcf !=nil {return _bgcf ;};};return nil ;
};func (_gggda *SymbolDictionary )setCodingStatistics ()error {if _gggda ._gbed ==nil {_gggda ._gbed =_gf .NewStats (512,1);};if _gggda ._fabc ==nil {_gggda ._fabc =_gf .NewStats (512,1);};if _gggda ._ebgf ==nil {_gggda ._ebgf =_gf .NewStats (512,1);};
if _gggda ._abegg ==nil {_gggda ._abegg =_gf .NewStats (512,1);};if _gggda ._gacd ==nil {_gggda ._gacd =_gf .NewStats (512,1);};if _gggda .UseRefinementAggregation &&_gggda ._baa ==nil {_gggda ._baa =_gf .NewStats (1<<uint (_gggda ._aacc ),1);_gggda ._efcfc =_gf .NewStats (512,1);
_gggda ._aabg =_gf .NewStats (512,1);};if _gggda ._afcd ==nil {_gggda ._afcd =_gf .NewStats (65536,1);};if _gggda ._debf ==nil {var _cggc error ;_gggda ._debf ,_cggc =_gf .New (_gggda ._cfg );if _cggc !=nil {return _cggc ;};};return nil ;};func (_eccd *GenericRegion )copyLineAbove (_efe int )error {_fdbc :=_efe *_eccd .Bitmap .RowStride ;
_cde :=_fdbc -_eccd .Bitmap .RowStride ;for _ecce :=0;_ecce < _eccd .Bitmap .RowStride ;_ecce ++{_abge ,_aac :=_eccd .Bitmap .GetByte (_cde );if _aac !=nil {return _aac ;};_cde ++;if _aac =_eccd .Bitmap .SetByte (_fdbc ,_abge );_aac !=nil {return _aac ;
};_fdbc ++;};return nil ;};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;
TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;
TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_abcc *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_efcab ,_bag :=_abcc ._fdeg .ReadBit ();
if _bag !=nil {return _bag ;};if _efcab ==1{_abcc ._cdac =true ;};return nil ;};func (_agdg *GenericRegion )readGBAtPixels (_acfa int )error {const _bcc ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_agdg .GBAtX =make ([]int8 ,_acfa );
_agdg .GBAtY =make ([]int8 ,_acfa );for _aegc :=0;_aegc < _acfa ;_aegc ++{_ddeg ,_ddbfe :=_agdg ._cc .ReadByte ();if _ddbfe !=nil {return _ff .Wrapf (_ddbfe ,_bcc ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_aegc );};_agdg .GBAtX [_aegc ]=int8 (_ddeg );
_ddeg ,_ddbfe =_agdg ._cc .ReadByte ();if _ddbfe !=nil {return _ff .Wrapf (_ddbfe ,_bcc ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_aegc );};_agdg .GBAtY [_aegc ]=int8 (_ddeg );};return nil ;};func (_ef *GenericRefinementRegion )Init (header *Header ,r *_c .Reader )error {_ef ._fg =header ;
_ef ._gfb =r ;_ef .RegionInfo =NewRegionSegment (r );return _ef .parseHeader ();};func (_ebb *GenericRefinementRegion )GetRegionBitmap ()(*_ac .Bitmap ,error ){var _eba error ;_bg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _eba !=nil {_bg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_eba );
}else {_bg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _ebb .RegionBitmap !=nil {return _ebb .RegionBitmap ,nil ;};_bcd :=0;if _ebb .ReferenceBitmap ==nil {_ebb .ReferenceBitmap ,_eba =_ebb .getGrReference ();if _eba !=nil {return nil ,_eba ;};};if _ebb ._ad ==nil {_ebb ._ad ,_eba =_gf .New (_ebb ._gfb );
if _eba !=nil {return nil ,_eba ;};};if _ebb ._gd ==nil {_ebb ._gd =_gf .NewStats (8192,1);};_ebb .RegionBitmap =_ac .New (int (_ebb .RegionInfo .BitmapWidth ),int (_ebb .RegionInfo .BitmapHeight ));if _ebb .TemplateID ==0{if _eba =_ebb .updateOverride ();
_eba !=nil {return nil ,_eba ;};};_cg :=(_ebb .RegionBitmap .Width +7)&-8;var _bf int ;if _ebb .IsTPGROn {_bf =int (-_ebb .ReferenceDY )*_ebb .ReferenceBitmap .RowStride ;};_eg :=_bf +1;for _eaa :=0;_eaa < _ebb .RegionBitmap .Height ;_eaa ++{if _ebb .IsTPGROn {_dda ,_ed :=_ebb .decodeSLTP ();
if _ed !=nil {return nil ,_ed ;};_bcd ^=_dda ;};if _bcd ==0{_eba =_ebb .decodeOptimized (_eaa ,_ebb .RegionBitmap .Width ,_ebb .RegionBitmap .RowStride ,_ebb .ReferenceBitmap .RowStride ,_cg ,_bf ,_eg );if _eba !=nil {return nil ,_eba ;};}else {_eba =_ebb .decodeTypicalPredictedLine (_eaa ,_ebb .RegionBitmap .Width ,_ebb .RegionBitmap .RowStride ,_ebb .ReferenceBitmap .RowStride ,_cg ,_bf );
if _eba !=nil {return nil ,_eba ;};};};return _ebb .RegionBitmap ,nil ;};type PageInformationSegment struct{_fdeg *_c .Reader ;PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_cdac bool ;_fbc _ac .CombinationOperator ;_eaadb bool ;
DefaultPixelValue uint8 ;_eeebg bool ;IsLossless bool ;IsStripe bool ;MaxStripeSize uint16 ;};func (_abd *HalftoneRegion )combineGrayscalePlanes (_edf []*_ac .Bitmap ,_gfdb int )error {_cce :=0;for _fdfc :=0;_fdfc < _edf [_gfdb ].Height ;_fdfc ++{for _bbag :=0;
_bbag < _edf [_gfdb ].Width ;_bbag +=8{_efeb ,_adf :=_edf [_gfdb +1].GetByte (_cce );if _adf !=nil {return _adf ;};_ceca ,_adf :=_edf [_gfdb ].GetByte (_cce );if _adf !=nil {return _adf ;};_adf =_edf [_gfdb ].SetByte (_cce ,_ac .CombineBytes (_ceca ,_efeb ,_ac .CmbOpXor ));
if _adf !=nil {return _adf ;};_cce ++;};};return nil ;};func (_dgb *template0 )form (_fa ,_bda ,_gag ,_gbe ,_fgdf int16 )int16 {return (_fa <<10)|(_bda <<7)|(_gag <<4)|(_gbe <<1)|_fgdf ;};func (_dfg *PageInformationSegment )encodeStripingInformation (_bcag _c .BinaryWriter )(_ddca int ,_gged error ){const _cafb ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_dfg .IsStripe {if _ddca ,_gged =_bcag .Write ([]byte {0x00,0x00});_gged !=nil {return 0,_ff .Wrap (_gged ,_cafb ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _ddca ,nil ;};_egcf :=make ([]byte ,2);_db .BigEndian .PutUint16 (_egcf ,_dfg .MaxStripeSize |1<<15);
if _ddca ,_gged =_bcag .Write (_egcf );_gged !=nil {return 0,_ff .Wrapf (_gged ,_cafb ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_dfg .MaxStripeSize );};return _ddca ,nil ;};type SegmentEncoder interface{Encode (_gbbf _c .BinaryWriter )(_aece int ,_dfdb error );
};func (_fedd *template1 )setIndex (_eec *_gf .DecoderStats ){_eec .SetIndex (0x080)};func _edd (_fbee *_c .Reader ,_gfbe *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_gfb :_fbee ,RegionInfo :NewRegionSegment (_fbee ),_fg :_gfbe ,_be :&template0 {},_abb :&template1 {}};
};func (_ddb *GenericRefinementRegion )decodeTemplate (_fef ,_bafg ,_ded ,_cbf ,_bac ,_afda ,_ada ,_gbg ,_gdc ,_cgc int ,_cgfb templater )(_gec error ){var (_bca ,_cdg ,_eef ,_fed ,_cbd int16 ;_gafa ,_cgfbe ,_eag ,_fce int ;_debc byte ;);if _gdc >=1&&(_gdc -1)< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -_cbf );
if _gec !=nil {return ;};_gafa =int (_debc );};if _gdc >=0&&(_gdc )< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc );if _gec !=nil {return ;};_cgfbe =int (_debc );};if _gdc >=-1&&(_gdc +1)< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc +_cbf );
if _gec !=nil {return ;};_eag =int (_debc );};_cgc ++;if _fef >=1{_debc ,_gec =_ddb .RegionBitmap .GetByte (_gbg -_ded );if _gec !=nil {return ;};_fce =int (_debc );};_gbg ++;_cdgf :=_ddb .ReferenceDX %8;_ffg :=6+_cdgf ;_fba :=_cgc %_cbf ;if _ffg >=0{if _ffg < 8{_bca =int16 (_gafa >>uint (_ffg ))&0x07;
};if _ffg < 8{_cdg =int16 (_cgfbe >>uint (_ffg ))&0x07;};if _ffg < 8{_eef =int16 (_eag >>uint (_ffg ))&0x07;};if _ffg ==6&&_fba > 1{if _gdc >=1&&(_gdc -1)< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -_cbf -2);if _gec !=nil {return _gec ;
};_bca |=int16 (_debc <<2)&0x04;};if _gdc >=0&&_gdc < _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -2);if _gec !=nil {return _gec ;};_cdg |=int16 (_debc <<2)&0x04;};if _gdc >=-1&&_gdc +1< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc +_cbf -2);
if _gec !=nil {return _gec ;};_eef |=int16 (_debc <<2)&0x04;};};if _ffg ==0{_gafa =0;_cgfbe =0;_eag =0;if _fba < _cbf -1{if _gdc >=1&&_gdc -1< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -_cbf );if _gec !=nil {return _gec ;
};_gafa =int (_debc );};if _gdc >=0&&_gdc < _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc );if _gec !=nil {return _gec ;};_cgfbe =int (_debc );};if _gdc >=-1&&_gdc +1< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc +_cbf );
if _gec !=nil {return _gec ;};_eag =int (_debc );};};_cgc ++;};}else {_bca =int16 (_gafa <<1)&0x07;_cdg =int16 (_cgfbe <<1)&0x07;_eef =int16 (_eag <<1)&0x07;_gafa =0;_cgfbe =0;_eag =0;if _fba < _cbf -1{if _gdc >=1&&_gdc -1< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -_cbf );
if _gec !=nil {return _gec ;};_gafa =int (_debc );};if _gdc >=0&&_gdc < _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc );if _gec !=nil {return _gec ;};_cgfbe =int (_debc );};if _gdc >=-1&&_gdc +1< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc +_cbf );
if _gec !=nil {return _gec ;};_eag =int (_debc );};_cgc ++;};_bca |=int16 ((_gafa >>7)&0x07);_cdg |=int16 ((_cgfbe >>7)&0x07);_eef |=int16 ((_eag >>7)&0x07);};_fed =int16 (_fce >>6);_cbd =0;_gbf :=(2-_cdgf )%8;_gafa <<=uint (_gbf );_cgfbe <<=uint (_gbf );
_eag <<=uint (_gbf );_fce <<=2;var _acf int ;for _adb :=0;_adb < _bafg ;_adb ++{_acff :=_adb &0x07;_ced :=_cgfb .form (_bca ,_cdg ,_eef ,_fed ,_cbd );if _ddb ._eb {_debc ,_gec =_ddb .RegionBitmap .GetByte (_ddb .RegionBitmap .GetByteIndex (_adb ,_fef ));
if _gec !=nil {return _gec ;};_ddb ._gd .SetIndex (int32 (_ddb .overrideAtTemplate0 (int (_ced ),_adb ,_fef ,int (_debc ),_acff )));}else {_ddb ._gd .SetIndex (int32 (_ced ));};_acf ,_gec =_ddb ._ad .DecodeBit (_ddb ._gd );if _gec !=nil {return _gec ;};
if _gec =_ddb .RegionBitmap .SetPixel (_adb ,_fef ,byte (_acf ));_gec !=nil {return _gec ;};_bca =((_bca <<1)|0x01&int16 (_gafa >>7))&0x07;_cdg =((_cdg <<1)|0x01&int16 (_cgfbe >>7))&0x07;_eef =((_eef <<1)|0x01&int16 (_eag >>7))&0x07;_fed =((_fed <<1)|0x01&int16 (_fce >>7))&0x07;
_cbd =int16 (_acf );if (_adb -int (_ddb .ReferenceDX ))%8==5{_gafa =0;_cgfbe =0;_eag =0;if ((_adb -int (_ddb .ReferenceDX ))/8)+1< _ddb .ReferenceBitmap .RowStride {if _gdc >=1&&(_gdc -1)< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc -_cbf );
if _gec !=nil {return _gec ;};_gafa =int (_debc );};if _gdc >=0&&_gdc < _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc );if _gec !=nil {return _gec ;};_cgfbe =int (_debc );};if _gdc >=-1&&(_gdc +1)< _ddb .ReferenceBitmap .Height {_debc ,_gec =_ddb .ReferenceBitmap .GetByte (_cgc +_cbf );
if _gec !=nil {return _gec ;};_eag =int (_debc );};};_cgc ++;}else {_gafa <<=1;_cgfbe <<=1;_eag <<=1;};if _acff ==5&&_fef >=1{if ((_adb >>3)+1)>=_ddb .RegionBitmap .RowStride {_fce =0;}else {_debc ,_gec =_ddb .RegionBitmap .GetByte (_gbg -_ded );if _gec !=nil {return _gec ;
};_fce =int (_debc );};_gbg ++;}else {_fce <<=1;};};return nil ;};func (_efcf *PageInformationSegment )Size ()int {return 19};var _ templater =&template0 {};func (_gefc *SymbolDictionary )decodeDirectlyThroughGenericRegion (_cggf ,_gbgag uint32 )error {if _gefc ._cbbab ==nil {_gefc ._cbbab =NewGenericRegion (_gefc ._cfg );
};_gefc ._cbbab .setParametersWithAt (false ,byte (_gefc .SdTemplate ),false ,false ,_gefc .SdATX ,_gefc .SdATY ,_cggf ,_gbgag ,_gefc ._afcd ,_gefc ._debf );return _gefc .addSymbol (_gefc ._cbbab );};func (_bfdg *TextRegion )setContexts (_geee *_gf .DecoderStats ,_bcac *_gf .DecoderStats ,_fabe *_gf .DecoderStats ,_bgbe *_gf .DecoderStats ,_gbag *_gf .DecoderStats ,_abeb *_gf .DecoderStats ,_ccab *_gf .DecoderStats ,_agedf *_gf .DecoderStats ,_bdbdf *_gf .DecoderStats ,_adddg *_gf .DecoderStats ){_bfdg ._cbbe =_bcac ;
_bfdg ._cgbg =_fabe ;_bfdg ._ffed =_bgbe ;_bfdg ._acda =_gbag ;_bfdg ._cfeb =_ccab ;_bfdg ._bbaa =_agedf ;_bfdg ._gegf =_abeb ;_bfdg ._bfcg =_bdbdf ;_bfdg ._ebfg =_adddg ;_bfdg ._bfdd =_geee ;};func (_bd *EndOfStripe )parseHeader ()error {_ec ,_aab :=_bd ._deb .ReadBits (32);
if _aab !=nil {return _aab ;};_bd ._df =int (_ec &_d .MaxInt32 );return nil ;};const (ORandom OrganizationType =iota ;OSequential ;);func (_abg *template0 )setIndex (_cbee *_gf .DecoderStats ){_cbee .SetIndex (0x100)};func (_ebba *RegionSegment )parseHeader ()error {const _gbce ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_bg .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");defer func (){_bg .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_caac ,_cegf :=_ebba ._dgfd .ReadBits (32);if _cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"\u0077\u0069\u0064t\u0068");};_ebba .BitmapWidth =uint32 (_caac &_d .MaxUint32 );_caac ,_cegf =_ebba ._dgfd .ReadBits (32);if _cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_ebba .BitmapHeight =uint32 (_caac &_d .MaxUint32 );_caac ,_cegf =_ebba ._dgfd .ReadBits (32);if _cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_ebba .XLocation =uint32 (_caac &_d .MaxUint32 );
_caac ,_cegf =_ebba ._dgfd .ReadBits (32);if _cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_ebba .YLocation =uint32 (_caac &_d .MaxUint32 );if _ ,_cegf =_ebba ._dgfd .ReadBits (5);_cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _cegf =_ebba .readCombinationOperator ();_cegf !=nil {return _ff .Wrap (_cegf ,_gbce ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_ffdf *GenericRefinementRegion )String ()string {_cagg :=&_b .Builder {};
_cagg .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_cagg .WriteString (_ffdf .RegionInfo .String ()+"\u000a");_cagg .WriteString (_g .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_ffdf .IsTPGROn ));
_cagg .WriteString (_g .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_ffdf .TemplateID ));_cagg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_ffdf .GrAtX ));
_cagg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_ffdf .GrAtY ));_cagg .WriteString (_g .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_ffdf .ReferenceDX ));
_cagg .WriteString (_g .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_ffdf .ReferenceDY ));return _cagg .String ();};func (_bcb *EndOfStripe )LineNumber ()int {return _bcb ._df };