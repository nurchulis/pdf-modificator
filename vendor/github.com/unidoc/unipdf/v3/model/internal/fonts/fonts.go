//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package fonts ;import (_ec "bytes";_eb "encoding/binary";_e "errors";_g "fmt";_ad "github.com/unidoc/unipdf/v3/common";_df "github.com/unidoc/unipdf/v3/core";_gg "github.com/unidoc/unipdf/v3/internal/cmap";_dc "github.com/unidoc/unipdf/v3/internal/textencoding";
_de "golang.org/x/xerrors";_fa "io";_c "os";_gf "regexp";_b "sort";_f "strings";_a "sync";);var _abb =&RuneCharSafeMap {_dg :map[rune ]CharMetrics {' ':{Wx :250},'!':{Wx :333},'#':{Wx :500},'%':{Wx :833},'&':{Wx :778},'(':{Wx :333},')':{Wx :333},'+':{Wx :549},',':{Wx :250},'.':{Wx :250},'/':{Wx :278},'0':{Wx :500},'1':{Wx :500},'2':{Wx :500},'3':{Wx :500},'4':{Wx :500},'5':{Wx :500},'6':{Wx :500},'7':{Wx :500},'8':{Wx :500},'9':{Wx :500},':':{Wx :278},';':{Wx :278},'<':{Wx :549},'=':{Wx :549},'>':{Wx :549},'?':{Wx :444},'[':{Wx :333},']':{Wx :333},'_':{Wx :500},'{':{Wx :480},'|':{Wx :200},'}':{Wx :480},'¬':{Wx :713},'°':{Wx :400},'±':{Wx :549},'µ':{Wx :576},'×':{Wx :549},'÷':{Wx :549},'ƒ':{Wx :500},'Α':{Wx :722},'Β':{Wx :667},'Γ':{Wx :603},'Ε':{Wx :611},'Ζ':{Wx :611},'Η':{Wx :722},'Θ':{Wx :741},'Ι':{Wx :333},'Κ':{Wx :722},'Λ':{Wx :686},'Μ':{Wx :889},'Ν':{Wx :722},'Ξ':{Wx :645},'Ο':{Wx :722},'Π':{Wx :768},'Ρ':{Wx :556},'Σ':{Wx :592},'Τ':{Wx :611},'Υ':{Wx :690},'Φ':{Wx :763},'Χ':{Wx :722},'Ψ':{Wx :795},'α':{Wx :631},'β':{Wx :549},'γ':{Wx :411},'δ':{Wx :494},'ε':{Wx :439},'ζ':{Wx :494},'η':{Wx :603},'θ':{Wx :521},'ι':{Wx :329},'κ':{Wx :549},'λ':{Wx :549},'ν':{Wx :521},'ξ':{Wx :493},'ο':{Wx :549},'π':{Wx :549},'ρ':{Wx :549},'ς':{Wx :439},'σ':{Wx :603},'τ':{Wx :439},'υ':{Wx :576},'φ':{Wx :521},'χ':{Wx :549},'ψ':{Wx :686},'ω':{Wx :686},'ϑ':{Wx :631},'ϒ':{Wx :620},'ϕ':{Wx :603},'ϖ':{Wx :713},'•':{Wx :460},'…':{Wx :1000},'′':{Wx :247},'″':{Wx :411},'⁄':{Wx :167},'€':{Wx :750},'ℑ':{Wx :686},'℘':{Wx :987},'ℜ':{Wx :795},'Ω':{Wx :768},'ℵ':{Wx :823},'←':{Wx :987},'↑':{Wx :603},'→':{Wx :987},'↓':{Wx :603},'↔':{Wx :1042},'↵':{Wx :658},'⇐':{Wx :987},'⇑':{Wx :603},'⇒':{Wx :987},'⇓':{Wx :603},'⇔':{Wx :1042},'∀':{Wx :713},'∂':{Wx :494},'∃':{Wx :549},'∅':{Wx :823},'∆':{Wx :612},'∇':{Wx :713},'∈':{Wx :713},'∉':{Wx :713},'∋':{Wx :439},'∏':{Wx :823},'∑':{Wx :713},'−':{Wx :549},'∗':{Wx :500},'√':{Wx :549},'∝':{Wx :713},'∞':{Wx :713},'∠':{Wx :768},'∧':{Wx :603},'∨':{Wx :603},'∩':{Wx :768},'∪':{Wx :768},'∫':{Wx :274},'∴':{Wx :863},'∼':{Wx :549},'≅':{Wx :549},'≈':{Wx :549},'≠':{Wx :549},'≡':{Wx :549},'≤':{Wx :549},'≥':{Wx :549},'⊂':{Wx :713},'⊃':{Wx :713},'⊄':{Wx :713},'⊆':{Wx :713},'⊇':{Wx :713},'⊕':{Wx :768},'⊗':{Wx :768},'⊥':{Wx :658},'⋅':{Wx :250},'⌠':{Wx :686},'⌡':{Wx :686},'〈':{Wx :329},'〉':{Wx :329},'◊':{Wx :494},'♠':{Wx :753},'♣':{Wx :753},'♥':{Wx :753},'♦':{Wx :753},'\uf6d9':{Wx :790},'\uf6da':{Wx :790},'\uf6db':{Wx :890},'\uf8e5':{Wx :500},'\uf8e6':{Wx :603},'\uf8e7':{Wx :1000},'\uf8e8':{Wx :790},'\uf8e9':{Wx :790},'\uf8ea':{Wx :786},'\uf8eb':{Wx :384},'\uf8ec':{Wx :384},'\uf8ed':{Wx :384},'\uf8ee':{Wx :384},'\uf8ef':{Wx :384},'\uf8f0':{Wx :384},'\uf8f1':{Wx :494},'\uf8f2':{Wx :494},'\uf8f3':{Wx :494},'\uf8f4':{Wx :494},'\uf8f5':{Wx :686},'\uf8f6':{Wx :384},'\uf8f7':{Wx :384},'\uf8f8':{Wx :384},'\uf8f9':{Wx :384},'\uf8fa':{Wx :384},'\uf8fb':{Wx :384},'\uf8fc':{Wx :494},'\uf8fd':{Wx :494},'\uf8fe':{Wx :494},'\uf8ff':{Wx :790}}};
func NewStdFontByName (name StdFontName )(StdFont ,bool ){_cg ,_ggc :=_cfb .read (name );if !_ggc {return StdFont {},false ;};return _cg (),true ;};var _cbg *RuneCharSafeMap ;func TtfParseFile (fileStr string )(TtfType ,error ){_gcgd ,_fgf :=_c .Open (fileStr );
if _fgf !=nil {return TtfType {},_fgf ;};defer _gcgd .Close ();return TtfParse (_gcgd );};func (_aff *ttfParser )ReadStr (length int )(string ,error ){_eab :=make ([]byte ,length );_gag ,_ccba :=_aff ._ccg .Read (_eab );if _ccba !=nil {return "",_ccba ;
}else if _gag !=length {return "",_g .Errorf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073",length );};return string (_eab ),nil ;};func (_bdafa *ttfParser )ParseHmtx ()error {if _dge :=_bdafa .Seek ("\u0068\u006d\u0074\u0078");
_dge !=nil {return _dge ;};_bdafa ._gad .Widths =make ([]uint16 ,0,8);for _eeeg :=uint16 (0);_eeeg < _bdafa ._dgfd ;_eeeg ++{_bdafa ._gad .Widths =append (_bdafa ._gad .Widths ,_bdafa .ReadUShort ());_bdafa .Skip (2);};if _bdafa ._dgfd < _bdafa ._fdc &&_bdafa ._dgfd > 0{_baed :=_bdafa ._gad .Widths [_bdafa ._dgfd -1];
for _feb :=_bdafa ._dgfd ;_feb < _bdafa ._fdc ;_feb ++{_bdafa ._gad .Widths =append (_bdafa ._gad .Widths ,_baed );};};return nil ;};func (_fdg *fontMap )write (_eg StdFontName ,_cd func ()StdFont ){_fdg .Lock ();defer _fdg .Unlock ();_fdg ._da [_eg ]=_cd ;
};func _cga (){const _def =600;_dbe =MakeRuneCharSafeMap (len (_cfc ));for _ ,_aec :=range _cfc {_dbe .Write (_aec ,CharMetrics {Wx :_def });};_bb =_dbe .Copy ();_cbg =_dbe .Copy ();_fgb =_dbe .Copy ();};const (CourierName =StdFontName ("\u0043o\u0075\u0072\u0069\u0065\u0072");
CourierBoldName =StdFontName ("\u0043\u006f\u0075r\u0069\u0065\u0072\u002d\u0042\u006f\u006c\u0064");CourierObliqueName =StdFontName ("\u0043o\u0075r\u0069\u0065\u0072\u002d\u004f\u0062\u006c\u0069\u0071\u0075\u0065");CourierBoldObliqueName =StdFontName ("\u0043\u006f\u0075\u0072ie\u0072\u002d\u0042\u006f\u006c\u0064\u004f\u0062\u006c\u0069\u0071\u0075\u0065");
);func (_cddg *TtfType )String ()string {return _g .Sprintf ("\u0046\u004fN\u0054\u005f\u0046\u0049\u004cE\u0032\u007b\u0025\u0023\u0071 \u0055\u006e\u0069\u0074\u0073\u0050\u0065\u0072\u0045\u006d\u003d\u0025\u0064\u0020\u0042\u006f\u006c\u0064\u003d\u0025\u0074\u0020\u0049\u0074\u0061\u006c\u0069\u0063\u0041\u006e\u0067\u006c\u0065\u003d\u0025\u0066\u0020"+"\u0043\u0061pH\u0065\u0069\u0067h\u0074\u003d\u0025\u0064 Ch\u0061rs\u003d\u0025\u0064\u0020\u0047\u006c\u0079ph\u004e\u0061\u006d\u0065\u0073\u003d\u0025d\u007d",_cddg .PostScriptName ,_cddg .UnitsPerEm ,_cddg .Bold ,_cddg .ItalicAngle ,_cddg .CapHeight ,len (_cddg .Chars ),len (_cddg .GlyphNames ));
};var _dag =[]int16 {611,889,611,611,611,611,611,611,611,611,611,611,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,611,722,722,722,722,333,333,333,333,333,333,333,333,444,667,667,556,556,611,556,556,833,667,667,667,667,667,722,944,722,722,722,722,722,722,722,722,611,722,611,611,611,611,500,500,500,500,500,556,556,556,611,722,722,722,722,722,722,722,722,722,611,833,611,556,556,556,556,556,556,556,500,500,500,500,333,500,667,500,500,778,500,500,422,541,500,920,500,500,278,275,400,400,389,389,333,275,350,444,444,333,444,444,333,500,333,333,250,250,760,500,500,500,500,544,500,400,333,675,500,333,278,444,444,444,444,444,444,444,500,889,444,889,500,444,675,500,333,389,278,500,500,500,500,500,167,500,500,500,500,333,675,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,444,444,278,278,300,278,675,549,675,471,278,722,333,675,500,675,500,500,500,500,500,549,500,500,500,500,500,500,667,333,500,500,500,500,750,750,300,276,310,500,500,500,523,333,333,476,833,250,250,1000,675,675,500,500,500,420,556,556,556,333,333,333,214,389,389,453,389,389,760,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,300,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,444,667,444,444,444,444,500,389,389,389,389,500};
func (_gb *RuneCharSafeMap )Copy ()*RuneCharSafeMap {_fd :=MakeRuneCharSafeMap (_gb .Length ());_gb .Range (func (_af rune ,_fdd CharMetrics )(_dd bool ){_fd ._dg [_af ]=_fdd ;return false });return _fd ;};func (_ee CharMetrics )String ()string {return _g .Sprintf ("<\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u003e",_ee .Wx ,_ee .Wy );
};func (_ceef *ttfParser )ParseHead ()error {if _gede :=_ceef .Seek ("\u0068\u0065\u0061\u0064");_gede !=nil {return _gede ;};_ceef .Skip (3*4);_add :=_ceef .ReadULong ();if _add !=0x5F0F3CF5{_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0049\u006e\u0063\u006fr\u0072e\u0063\u0074\u0020\u006d\u0061\u0067\u0069\u0063\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u002e\u0020\u0046\u006fn\u0074\u0020\u006d\u0061\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0069\u0073\u0070\u006c\u0061\u0079\u0020\u0063\u006f\u0072\u0072\u0065\u0063t\u006c\u0079\u002e\u0020\u0025\u0073",_ceef );
};_ceef .Skip (2);_ceef ._gad .UnitsPerEm =_ceef .ReadUShort ();_ceef .Skip (2*8);_ceef ._gad .Xmin =_ceef .ReadShort ();_ceef ._gad .Ymin =_ceef .ReadShort ();_ceef ._gad .Xmax =_ceef .ReadShort ();_ceef ._gad .Ymax =_ceef .ReadShort ();return nil ;};
func _fcc ()StdFont {_adc .Do (_bae );_gd :=Descriptor {Name :HelveticaBoldObliqueName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-174,-228,1114,962},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_gd ,_dbc );};type RuneCharSafeMap struct{_dg map[rune ]CharMetrics ;_gc _a .RWMutex ;};func NewStdFontWithEncoding (desc Descriptor ,metrics *RuneCharSafeMap ,encoder _dc .TextEncoder )StdFont {var _bf rune =0xA0;if _ ,_gbe :=metrics .Read (_bf );
!_gbe {_cda ,_ :=metrics .Read (0x20);metrics .Write (_bf ,_cda );};return StdFont {_ba :desc ,_aed :metrics ,_ggcd :encoder };};const (SymbolName =StdFontName ("\u0053\u0079\u006d\u0062\u006f\u006c");ZapfDingbatsName =StdFontName ("\u005a\u0061\u0070f\u0044\u0069\u006e\u0067\u0062\u0061\u0074\u0073");
);func IsStdFont (name StdFontName )bool {_ ,_eeee :=_cfb .read (name );return _eeee };func _abg ()StdFont {_adc .Do (_bae );_cdae :=Descriptor {Name :HelveticaName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0020,BBox :[4]float64 {-166,-225,1000,931},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};
return NewStdFont (_cdae ,_bdc );};func (_gfd StdFont )ToPdfObject ()_df .PdfObject {_egc :=_df .MakeDict ();_egc .Set ("\u0054\u0079\u0070\u0065",_df .MakeName ("\u0046\u006f\u006e\u0074"));_egc .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_df .MakeName ("\u0054\u0079\u0070e\u0031"));
_egc .Set ("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074",_df .MakeName (_gfd .Name ()));_egc .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_gfd ._ggcd .ToPdfObject ());return _df .MakeIndirectObject (_egc );};func _fde ()StdFont {_adc .Do (_bae );
_dda :=Descriptor {Name :HelveticaObliqueName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-170,-225,1116,931},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};return NewStdFont (_dda ,_dfd );
};func (_cae *ttfParser )ParseCmap ()error {var _fdce int64 ;if _cfe :=_cae .Seek ("\u0063\u006d\u0061\u0070");_cfe !=nil {return _cfe ;};_ad .Log .Trace ("\u0050a\u0072\u0073\u0065\u0043\u006d\u0061p");_cae .ReadUShort ();_ced :=int (_cae .ReadUShort ());
_dgef :=int64 (0);_efef :=int64 (0);_dae :=int64 (0);for _cfce :=0;_cfce < _ced ;_cfce ++{_gacg :=_cae .ReadUShort ();_gff :=_cae .ReadUShort ();_fdce =int64 (_cae .ReadULong ());if _gacg ==3&&_gff ==1{_efef =_fdce ;}else if _gacg ==3&&_gff ==10{_dae =_fdce ;
}else if _gacg ==1&&_gff ==0{_dgef =_fdce ;};};if _dgef !=0{if _ceea :=_cae .parseCmapVersion (_dgef );_ceea !=nil {return _ceea ;};};if _efef !=0{if _beg :=_cae .parseCmapSubtable31 (_efef );_beg !=nil {return _beg ;};};if _dae !=0{if _efgg :=_cae .parseCmapVersion (_dae );
_efgg !=nil {return _efgg ;};};if _efef ==0&&_dgef ==0&&_dae ==0{_ad .Log .Debug ("\u0074\u0074\u0066P\u0061\u0072\u0073\u0065\u0072\u002e\u0050\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u002e\u0020\u004e\u006f\u0020\u0033\u0031\u002c\u0020\u0031\u0030\u002c\u0020\u00331\u0030\u0020\u0074\u0061\u0062\u006c\u0065\u002e");
};return nil ;};var _agd =&RuneCharSafeMap {_dg :map[rune ]CharMetrics {' ':{Wx :278},'→':{Wx :838},'↔':{Wx :1016},'↕':{Wx :458},'①':{Wx :788},'②':{Wx :788},'③':{Wx :788},'④':{Wx :788},'⑤':{Wx :788},'⑥':{Wx :788},'⑦':{Wx :788},'⑧':{Wx :788},'⑨':{Wx :788},'⑩':{Wx :788},'■':{Wx :761},'▲':{Wx :892},'▼':{Wx :892},'◆':{Wx :788},'●':{Wx :791},'◗':{Wx :438},'★':{Wx :816},'☎':{Wx :719},'☛':{Wx :960},'☞':{Wx :939},'♠':{Wx :626},'♣':{Wx :776},'♥':{Wx :694},'♦':{Wx :595},'✁':{Wx :974},'✂':{Wx :961},'✃':{Wx :974},'✄':{Wx :980},'✆':{Wx :789},'✇':{Wx :790},'✈':{Wx :791},'✉':{Wx :690},'✌':{Wx :549},'✍':{Wx :855},'✎':{Wx :911},'✏':{Wx :933},'✐':{Wx :911},'✑':{Wx :945},'✒':{Wx :974},'✓':{Wx :755},'✔':{Wx :846},'✕':{Wx :762},'✖':{Wx :761},'✗':{Wx :571},'✘':{Wx :677},'✙':{Wx :763},'✚':{Wx :760},'✛':{Wx :759},'✜':{Wx :754},'✝':{Wx :494},'✞':{Wx :552},'✟':{Wx :537},'✠':{Wx :577},'✡':{Wx :692},'✢':{Wx :786},'✣':{Wx :788},'✤':{Wx :788},'✥':{Wx :790},'✦':{Wx :793},'✧':{Wx :794},'✩':{Wx :823},'✪':{Wx :789},'✫':{Wx :841},'✬':{Wx :823},'✭':{Wx :833},'✮':{Wx :816},'✯':{Wx :831},'✰':{Wx :923},'✱':{Wx :744},'✲':{Wx :723},'✳':{Wx :749},'✴':{Wx :790},'✵':{Wx :792},'✶':{Wx :695},'✷':{Wx :776},'✸':{Wx :768},'✹':{Wx :792},'✺':{Wx :759},'✻':{Wx :707},'✼':{Wx :708},'✽':{Wx :682},'✾':{Wx :701},'✿':{Wx :826},'❀':{Wx :815},'❁':{Wx :789},'❂':{Wx :789},'❃':{Wx :707},'❄':{Wx :687},'❅':{Wx :696},'❆':{Wx :689},'❇':{Wx :786},'❈':{Wx :787},'❉':{Wx :713},'❊':{Wx :791},'❋':{Wx :785},'❍':{Wx :873},'❏':{Wx :762},'❐':{Wx :762},'❑':{Wx :759},'❒':{Wx :759},'❖':{Wx :784},'❘':{Wx :138},'❙':{Wx :277},'❚':{Wx :415},'❛':{Wx :392},'❜':{Wx :392},'❝':{Wx :668},'❞':{Wx :668},'❡':{Wx :732},'❢':{Wx :544},'❣':{Wx :544},'❤':{Wx :910},'❥':{Wx :667},'❦':{Wx :760},'❧':{Wx :760},'❶':{Wx :788},'❷':{Wx :788},'❸':{Wx :788},'❹':{Wx :788},'❺':{Wx :788},'❻':{Wx :788},'❼':{Wx :788},'❽':{Wx :788},'❾':{Wx :788},'❿':{Wx :788},'➀':{Wx :788},'➁':{Wx :788},'➂':{Wx :788},'➃':{Wx :788},'➄':{Wx :788},'➅':{Wx :788},'➆':{Wx :788},'➇':{Wx :788},'➈':{Wx :788},'➉':{Wx :788},'➊':{Wx :788},'➋':{Wx :788},'➌':{Wx :788},'➍':{Wx :788},'➎':{Wx :788},'➏':{Wx :788},'➐':{Wx :788},'➑':{Wx :788},'➒':{Wx :788},'➓':{Wx :788},'➔':{Wx :894},'➘':{Wx :748},'➙':{Wx :924},'➚':{Wx :748},'➛':{Wx :918},'➜':{Wx :927},'➝':{Wx :928},'➞':{Wx :928},'➟':{Wx :834},'➠':{Wx :873},'➡':{Wx :828},'➢':{Wx :924},'➣':{Wx :924},'➤':{Wx :917},'➥':{Wx :930},'➦':{Wx :931},'➧':{Wx :463},'➨':{Wx :883},'➩':{Wx :836},'➪':{Wx :836},'➫':{Wx :867},'➬':{Wx :867},'➭':{Wx :696},'➮':{Wx :696},'➯':{Wx :874},'➱':{Wx :874},'➲':{Wx :760},'➳':{Wx :946},'➴':{Wx :771},'➵':{Wx :865},'➶':{Wx :771},'➷':{Wx :888},'➸':{Wx :967},'➹':{Wx :888},'➺':{Wx :831},'➻':{Wx :873},'➼':{Wx :927},'➽':{Wx :970},'➾':{Wx :918},'\uf8d7':{Wx :390},'\uf8d8':{Wx :390},'\uf8d9':{Wx :317},'\uf8da':{Wx :317},'\uf8db':{Wx :276},'\uf8dc':{Wx :276},'\uf8dd':{Wx :509},'\uf8de':{Wx :509},'\uf8df':{Wx :410},'\uf8e0':{Wx :410},'\uf8e1':{Wx :234},'\uf8e2':{Wx :234},'\uf8e3':{Wx :334},'\uf8e4':{Wx :334}}};
func (_eged *ttfParser )ReadSByte ()(_egg int8 ){_eb .Read (_eged ._ccg ,_eb .BigEndian ,&_egg );return _egg ;};func _cde ()StdFont {_adc .Do (_bae );_ef :=Descriptor {Name :HelveticaBoldName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-170,-228,1003,962},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_ef ,_bgg );};var _bdc *RuneCharSafeMap ;type CharMetrics struct{Wx float64 ;Wy float64 ;};func (_ggb *ttfParser )ParseMaxp ()error {if _gac :=_ggb .Seek ("\u006d\u0061\u0078\u0070");_gac !=nil {return _gac ;};_ggb .Skip (4);_ggb ._fdc =_ggb .ReadUShort ();
return nil ;};var _cfb =&fontMap {_da :make (map[StdFontName ]func ()StdFont )};var _ege *RuneCharSafeMap ;const (_dgg ="\u0054\u0069\u006de\u0073";TimesRomanName =StdFontName ("T\u0069\u006d\u0065\u0073\u002d\u0052\u006f\u006d\u0061\u006e");TimesBoldName =StdFontName ("\u0054\u0069\u006d\u0065\u0073\u002d\u0042\u006f\u006c\u0064");
TimesItalicName =StdFontName ("\u0054\u0069\u006de\u0073\u002d\u0049\u0074\u0061\u006c\u0069\u0063");TimesBoldItalicName =StdFontName ("\u0054\u0069m\u0065\u0073\u002dB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063"););func init (){RegisterStdFont (CourierName ,_bga ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u0043\u006f\u0075\u0072\u0069e\u0072\u004e\u0065\u0077","\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077");
RegisterStdFont (CourierBoldName ,_aef ,"\u0043o\u0075r\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (CourierObliqueName ,_ed ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0049t\u0061\u006c\u0069\u0063");
RegisterStdFont (CourierBoldObliqueName ,_ccd ,"C\u006f\u0075\u0072\u0069er\u004ee\u0077\u002c\u0042\u006f\u006cd\u0049\u0074\u0061\u006c\u0069\u0063");};var _bdaf =[]int16 {667,1000,667,667,667,667,667,667,667,667,667,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,500,667,667,556,556,556,556,556,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,667,556,556,469,584,389,1015,556,556,278,260,334,334,278,278,333,260,350,500,500,333,500,500,333,556,333,278,278,250,737,556,556,556,556,643,556,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,556,278,333,278,500,556,500,556,556,167,556,556,556,611,333,584,549,556,556,333,333,556,333,333,222,278,278,278,278,278,222,222,500,500,222,222,299,222,584,549,584,471,222,833,333,584,556,584,556,556,556,556,556,549,556,556,556,556,556,556,944,333,556,556,556,556,834,834,333,370,365,611,556,556,537,333,333,476,889,278,278,1000,584,584,556,556,611,355,333,333,333,222,222,222,191,333,333,453,333,333,737,333,500,500,500,500,500,556,278,556,556,278,278,556,600,278,317,278,556,556,834,333,333,1000,556,333,556,556,556,556,556,556,556,556,556,556,500,722,500,500,500,500,556,500,500,500,500,556};
const (FontWeightMedium FontWeight =iota ;FontWeightBold ;FontWeightRoman ;);func (_bea *ttfParser )Skip (n int ){_bea ._ccg .Seek (int64 (n ),_fa .SeekCurrent )};func (_gbcb *ttfParser )ParseName ()error {if _abge :=_gbcb .Seek ("\u006e\u0061\u006d\u0065");
_abge !=nil {return _abge ;};_efefb ,_ :=_gbcb ._ccg .Seek (0,_fa .SeekCurrent );_gbcb ._gad .PostScriptName ="";_gbcb .Skip (2);_ggce :=_gbcb .ReadUShort ();_aaea :=_gbcb .ReadUShort ();for _bge :=uint16 (0);_bge < _ggce &&_gbcb ._gad .PostScriptName =="";
_bge ++{_gbcb .Skip (3*2);_baeda :=_gbcb .ReadUShort ();_ebg :=_gbcb .ReadUShort ();_gee :=_gbcb .ReadUShort ();if _baeda ==6{_gbcb ._ccg .Seek (_efefb +int64 (_aaea )+int64 (_gee ),_fa .SeekStart );_cag ,_fbee :=_gbcb .ReadStr (int (_ebg ));if _fbee !=nil {return _fbee ;
};_cag =_f .Replace (_cag ,"\u0000","",-1);_eba ,_fbee :=_gf .Compile ("\u005b\u0028\u0029\u007b\u007d\u003c\u003e\u0020\u002f%\u005b\u005c\u005d\u005d");if _fbee !=nil {return _fbee ;};_gbcb ._gad .PostScriptName =_eba .ReplaceAllString (_cag ,"");};};
if _gbcb ._gad .PostScriptName ==""{_ad .Log .Debug ("\u0050a\u0072\u0073e\u004e\u0061\u006de\u003a\u0020\u0054\u0068\u0065\u0020\u006ea\u006d\u0065\u0020\u0050\u006f\u0073t\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u0077\u0061\u0073\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e");
};return nil ;};func _ccd ()StdFont {_bda .Do (_cga );_bfe :=Descriptor {Name :CourierBoldObliqueName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0061,BBox :[4]float64 {-57,-250,869,801},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_bfe ,_cbg );};func (_afd *RuneCharSafeMap )Range (f func (_cf rune ,_ag CharMetrics )(_cb bool )){_afd ._gc .RLock ();defer _afd ._gc .RUnlock ();for _fc ,_cba :=range _afd ._dg {if f (_fc ,_cba ){break ;};};};func _eeed ()StdFont {_ece :=_dc .NewZapfDingbatsEncoder ();
_efg :=Descriptor {Name :ZapfDingbatsName ,Family :string (ZapfDingbatsName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-1,-143,981,820},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :90,StemH :28};return NewStdFontWithEncoding (_efg ,_agd ,_ece );
};func (_afc *ttfParser )readByte ()(_aggb uint8 ){_eb .Read (_afc ._ccg ,_eb .BigEndian ,&_aggb );return _aggb ;};type TtfType struct{UnitsPerEm uint16 ;PostScriptName string ;Bold bool ;ItalicAngle float64 ;IsFixedPitch bool ;TypoAscender int16 ;TypoDescender int16 ;
UnderlinePosition int16 ;UnderlineThickness int16 ;Xmin ,Ymin ,Xmax ,Ymax int16 ;CapHeight int16 ;Widths []uint16 ;Chars map[rune ]GID ;GlyphNames []GlyphName ;};type StdFont struct{_ba Descriptor ;_aed *RuneCharSafeMap ;_ggcd _dc .TextEncoder ;};type Font interface{Encoder ()_dc .TextEncoder ;
GetRuneMetrics (_adf rune )(CharMetrics ,bool );};func init (){RegisterStdFont (HelveticaName ,_abg ,"\u0041\u0072\u0069a\u006c");RegisterStdFont (HelveticaBoldName ,_cde ,"\u0041\u0072\u0069\u0061\u006c\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (HelveticaObliqueName ,_fde ,"\u0041\u0072\u0069a\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063");
RegisterStdFont (HelveticaBoldObliqueName ,_fcc ,"\u0041\u0072i\u0061\u006c\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");};func (_gdd *TtfType )MakeToUnicode ()*_gg .CMap {_bbce :=make (map[_gg .CharCode ]rune );if len (_gdd .GlyphNames )==0{return _gg .NewToUnicodeCMap (_bbce );
};for _efd ,_adfa :=range _gdd .Chars {_efb :=_gg .CharCode (_efd );_bgc :=_gdd .GlyphNames [_adfa ];_gdb ,_abd :=_dc .GlyphToRune (_bgc );if !_abd {_ad .Log .Debug ("\u004e\u006f \u0072\u0075\u006e\u0065\u002e\u0020\u0063\u006f\u0064\u0065\u003d\u0030\u0078\u0025\u0030\u0034\u0078\u0020\u0067\u006c\u0079\u0070h=\u0025\u0071",_efd ,_bgc );
_gdb =_dc .MissingCodeRune ;};_bbce [_efb ]=_gdb ;};return _gg .NewToUnicodeCMap (_bbce );};var _aa =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,556,722,722,611,611,611,611,611,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,722,556,556,584,584,389,975,556,611,278,280,389,389,333,333,333,280,350,556,556,333,556,556,333,556,333,333,278,250,737,556,611,556,556,743,611,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,611,333,333,333,611,556,611,556,556,167,611,611,611,611,333,584,549,556,556,333,333,611,333,333,278,278,278,278,278,278,278,278,556,556,278,278,400,278,584,549,584,494,278,889,333,584,611,584,611,611,611,611,556,549,611,556,611,611,611,611,944,333,611,611,611,556,834,834,333,370,365,611,611,611,556,333,333,494,889,278,278,1000,584,584,611,611,611,474,500,500,500,278,278,278,238,389,389,549,389,389,737,333,556,556,556,556,556,556,333,556,556,278,278,556,600,333,389,333,611,556,834,333,333,1000,556,333,611,611,611,611,611,611,611,556,611,611,556,778,556,556,556,556,556,500,500,500,500,556};
func (_ecb *ttfParser )parseCmapVersion (_dee int64 )error {_ad .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006da\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a \u006f\u0066\u0066s\u0065t\u003d\u0025\u0064",_dee );if _ecb ._gad .Chars ==nil {_ecb ._gad .Chars =make (map[rune ]GID );
};_ecb ._ccg .Seek (int64 (_ecb ._dbg ["\u0063\u006d\u0061\u0070"])+_dee ,_fa .SeekStart );var _cdeg ,_deff uint32 ;_adee :=_ecb .ReadUShort ();if _adee < 8{_cdeg =uint32 (_ecb .ReadUShort ());_deff =uint32 (_ecb .ReadUShort ());}else {_ecb .ReadUShort ();
_cdeg =_ecb .ReadULong ();_deff =_ecb .ReadULong ();};_ad .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u0043m\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064 \u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067u\u0061g\u0065\u003d\u0025\u0064",_adee ,_cdeg ,_deff );
switch _adee {case 0:return _ecb .parseCmapFormat0 ();case 6:return _ecb .parseCmapFormat6 ();case 12:return _ecb .parseCmapFormat12 ();default:_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063m\u0061\u0070\u0020\u0066\u006f\u0072\u006da\u0074\u003d\u0025\u0064",_adee );
return nil ;};};func (_gce StdFont )GetMetricsTable ()*RuneCharSafeMap {return _gce ._aed };func _bae (){_bdc =MakeRuneCharSafeMap (len (_cfc ));_bgg =MakeRuneCharSafeMap (len (_cfc ));for _cdd ,_dga :=range _cfc {_bdc .Write (_dga ,CharMetrics {Wx :float64 (_bdaf [_cdd ])});
_bgg .Write (_dga ,CharMetrics {Wx :float64 (_aa [_cdd ])});};_dfd =_bdc .Copy ();_dbc =_bgg .Copy ();};func (_acd *ttfParser )Parse ()(TtfType ,error ){_gbb ,_age :=_acd .ReadStr (4);if _age !=nil {return TtfType {},_age ;};if _gbb =="\u004f\u0054\u0054\u004f"{return TtfType {},_de .Errorf ("\u0066\u006f\u006e\u0074s\u0020\u0062\u0061\u0073\u0065\u0064\u0020\u006f\u006e \u0050\u006f\u0073\u0074\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u006f\u0075\u0074\u006c\u0069\u006e\u0065s\u0020\u0061\u0072\u0065\u0020n\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0028\u0025\u0077\u0029",_df .ErrNotSupported );
};if _gbb !="\u0000\u0001\u0000\u0000"&&_gbb !="\u0074\u0072\u0075\u0065"{_ad .Log .Debug ("\u0055n\u0072\u0065c\u006f\u0067\u006ei\u007a\u0065\u0064\u0020\u0054\u0072\u0075e\u0054\u0079\u0070\u0065\u0020\u0066i\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u002e\u0020v\u0065\u0072\u0073\u0069\u006f\u006e\u003d\u0025\u0071",_gbb );
};_bcce :=int (_acd .ReadUShort ());_acd .Skip (3*2);_acd ._dbg =make (map[string ]uint32 );var _cgaf string ;for _gca :=0;_gca < _bcce ;_gca ++{_cgaf ,_age =_acd .ReadStr (4);if _age !=nil {return TtfType {},_age ;};_acd .Skip (4);_dac :=_acd .ReadULong ();
_acd .Skip (4);_acd ._dbg [_cgaf ]=_dac ;};_ad .Log .Trace (_bdd (_acd ._dbg ));if _age =_acd .ParseComponents ();_age !=nil {return TtfType {},_age ;};return _acd ._gad ,nil ;};var _dbc *RuneCharSafeMap ;func (_cgad *ttfParser )parseCmapFormat0 ()error {_bcd ,_eef :=_cgad .ReadStr (256);
if _eef !=nil {return _eef ;};_cfd :=[]byte (_bcd );_ad .Log .Trace ("\u0070a\u0072\u0073e\u0043\u006d\u0061p\u0046\u006f\u0072\u006d\u0061\u0074\u0030:\u0020\u0025\u0073\u000a\u0064\u0061t\u0061\u0053\u0074\u0072\u003d\u0025\u002b\u0071\u000a\u0064\u0061t\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d",_cgad ._gad .String (),_bcd ,_cfd );
for _ffe ,_egfc :=range _cfd {_cgad ._gad .Chars [rune (_ffe )]=GID (_egfc );};return nil ;};func NewStdFont (desc Descriptor ,metrics *RuneCharSafeMap )StdFont {return NewStdFontWithEncoding (desc ,metrics ,_dc .NewStandardEncoder ());};var _bggc =[]GlyphName {"\u002en\u006f\u0074\u0064\u0065\u0066","\u002e\u006e\u0075l\u006c","\u006e\u006fn\u006d\u0061\u0072k\u0069\u006e\u0067\u0072\u0065\u0074\u0075\u0072\u006e","\u0073\u0070\u0061c\u0065","\u0065\u0078\u0063\u006c\u0061\u006d","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c","\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u0069\u0067\u006e","\u0064\u006f\u006c\u006c\u0061\u0072","\u0070e\u0072\u0063\u0065\u006e\u0074","\u0061m\u0070\u0065\u0072\u0073\u0061\u006ed","q\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067\u006c\u0065","\u0070a\u0072\u0065\u006e\u006c\u0065\u0066t","\u0070\u0061\u0072\u0065\u006e\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0074\u0065\u0072\u0069\u0073\u006b","\u0070\u006c\u0075\u0073","\u0063\u006f\u006dm\u0061","\u0068\u0079\u0070\u0068\u0065\u006e","\u0070\u0065\u0072\u0069\u006f\u0064","\u0073\u006c\u0061s\u0068","\u007a\u0065\u0072\u006f","\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0063\u006f\u006co\u006e","\u0073e\u006d\u0069\u0063\u006f\u006c\u006fn","\u006c\u0065\u0073\u0073","\u0065\u0071\u0075a\u006c","\u0067r\u0065\u0061\u0074\u0065\u0072","\u0071\u0075\u0065\u0073\u0074\u0069\u006f\u006e","\u0061\u0074","\u0041","\u0042","\u0043","\u0044","\u0045","\u0046","\u0047","\u0048","\u0049","\u004a","\u004b","\u004c","\u004d","\u004e","\u004f","\u0050","\u0051","\u0052","\u0053","\u0054","\u0055","\u0056","\u0057","\u0058","\u0059","\u005a","b\u0072\u0061\u0063\u006b\u0065\u0074\u006c\u0065\u0066\u0074","\u0062a\u0063\u006b\u0073\u006c\u0061\u0073h","\u0062\u0072\u0061c\u006b\u0065\u0074\u0072\u0069\u0067\u0068\u0074","a\u0073\u0063\u0069\u0069\u0063\u0069\u0072\u0063\u0075\u006d","\u0075\u006e\u0064\u0065\u0072\u0073\u0063\u006f\u0072\u0065","\u0067\u0072\u0061v\u0065","\u0061","\u0062","\u0063","\u0064","\u0065","\u0066","\u0067","\u0068","\u0069","\u006a","\u006b","\u006c","\u006d","\u006e","\u006f","\u0070","\u0071","\u0072","\u0073","\u0074","\u0075","\u0076","\u0077","\u0078","\u0079","\u007a","\u0062r\u0061\u0063\u0065\u006c\u0065\u0066t","\u0062\u0061\u0072","\u0062\u0072\u0061\u0063\u0065\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0063\u0069\u0069\u0074\u0069\u006c\u0064\u0065","\u0041d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0041\u0072\u0069n\u0067","\u0043\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0045\u0061\u0063\u0075\u0074\u0065","\u004e\u0074\u0069\u006c\u0064\u0065","\u004fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u0055d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0061\u0063\u0075\u0074\u0065","\u0061\u0067\u0072\u0061\u0076\u0065","a\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0074\u0069\u006c\u0064\u0065","\u0061\u0072\u0069n\u0067","\u0063\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0065\u0061\u0063\u0075\u0074\u0065","\u0065\u0067\u0072\u0061\u0076\u0065","e\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0065d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0069\u0061\u0063\u0075\u0074\u0065","\u0069\u0067\u0072\u0061\u0076\u0065","i\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0069d\u0069\u0065\u0072\u0065\u0073\u0069s","\u006e\u0074\u0069\u006c\u0064\u0065","\u006f\u0061\u0063\u0075\u0074\u0065","\u006f\u0067\u0072\u0061\u0076\u0065","o\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u006fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u006f\u0074\u0069\u006c\u0064\u0065","\u0075\u0061\u0063\u0075\u0074\u0065","\u0075\u0067\u0072\u0061\u0076\u0065","u\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0075d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0064\u0061\u0067\u0067\u0065\u0072","\u0064\u0065\u0067\u0072\u0065\u0065","\u0063\u0065\u006e\u0074","\u0073\u0074\u0065\u0072\u006c\u0069\u006e\u0067","\u0073e\u0063\u0074\u0069\u006f\u006e","\u0062\u0075\u006c\u006c\u0065\u0074","\u0070a\u0072\u0061\u0067\u0072\u0061\u0070h","\u0067\u0065\u0072\u006d\u0061\u006e\u0064\u0062\u006c\u0073","\u0072\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0065\u0064","\u0063o\u0070\u0079\u0072\u0069\u0067\u0068t","\u0074r\u0061\u0064\u0065\u006d\u0061\u0072k","\u0061\u0063\u0075t\u0065","\u0064\u0069\u0065\u0072\u0065\u0073\u0069\u0073","\u006e\u006f\u0074\u0065\u0071\u0075\u0061\u006c","\u0041\u0045","\u004f\u0073\u006c\u0061\u0073\u0068","\u0069\u006e\u0066\u0069\u006e\u0069\u0074\u0079","\u0070l\u0075\u0073\u006d\u0069\u006e\u0075s","\u006ce\u0073\u0073\u0065\u0071\u0075\u0061l","\u0067\u0072\u0065a\u0074\u0065\u0072\u0065\u0071\u0075\u0061\u006c","\u0079\u0065\u006e","\u006d\u0075","p\u0061\u0072\u0074\u0069\u0061\u006c\u0064\u0069\u0066\u0066","\u0073u\u006d\u006d\u0061\u0074\u0069\u006fn","\u0070r\u006f\u0064\u0075\u0063\u0074","\u0070\u0069","\u0069\u006e\u0074\u0065\u0067\u0072\u0061\u006c","o\u0072\u0064\u0066\u0065\u006d\u0069\u006e\u0069\u006e\u0065","\u006f\u0072\u0064m\u0061\u0073\u0063\u0075\u006c\u0069\u006e\u0065","\u004f\u006d\u0065g\u0061","\u0061\u0065","\u006f\u0073\u006c\u0061\u0073\u0068","\u0071\u0075\u0065s\u0074\u0069\u006f\u006e\u0064\u006f\u0077\u006e","\u0065\u0078\u0063\u006c\u0061\u006d\u0064\u006f\u0077\u006e","\u006c\u006f\u0067\u0069\u0063\u0061\u006c\u006e\u006f\u0074","\u0072a\u0064\u0069\u0063\u0061\u006c","\u0066\u006c\u006f\u0072\u0069\u006e","a\u0070\u0070\u0072\u006f\u0078\u0065\u0071\u0075\u0061\u006c","\u0044\u0065\u006ct\u0061","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074r\u0069\u0067\u0068\u0074","\u0065\u006c\u006c\u0069\u0070\u0073\u0069\u0073","\u006e\u006fn\u0062\u0072\u0065a\u006b\u0069\u006e\u0067\u0073\u0070\u0061\u0063\u0065","\u0041\u0067\u0072\u0061\u0076\u0065","\u0041\u0074\u0069\u006c\u0064\u0065","\u004f\u0074\u0069\u006c\u0064\u0065","\u004f\u0045","\u006f\u0065","\u0065\u006e\u0064\u0061\u0073\u0068","\u0065\u006d\u0064\u0061\u0073\u0068","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u006c\u0065\u0066\u0074","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c\u0072\u0069\u0067\u0068\u0074","\u0071u\u006f\u0074\u0065\u006c\u0065\u0066t","\u0071\u0075\u006f\u0074\u0065\u0072\u0069\u0067\u0068\u0074","\u0064\u0069\u0076\u0069\u0064\u0065","\u006co\u007a\u0065\u006e\u0067\u0065","\u0079d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0059d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e","\u0063\u0075\u0072\u0072\u0065\u006e\u0063\u0079","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006c\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006cr\u0069\u0067\u0068\u0074","\u0066\u0069","\u0066\u006c","\u0064a\u0067\u0067\u0065\u0072\u0064\u0062l","\u0070\u0065\u0072\u0069\u006f\u0064\u0063\u0065\u006et\u0065\u0072\u0065\u0064","\u0071\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067l\u0062\u0061\u0073\u0065","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u0062\u0061\u0073\u0065","p\u0065\u0072\u0074\u0068\u006f\u0075\u0073\u0061\u006e\u0064","A\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","E\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0041\u0061\u0063\u0075\u0074\u0065","\u0045d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0045\u0067\u0072\u0061\u0076\u0065","\u0049\u0061\u0063\u0075\u0074\u0065","I\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0049d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0049\u0067\u0072\u0061\u0076\u0065","\u004f\u0061\u0063\u0075\u0074\u0065","O\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061\u0070\u0070l\u0065","\u004f\u0067\u0072\u0061\u0076\u0065","\u0055\u0061\u0063\u0075\u0074\u0065","U\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0055\u0067\u0072\u0061\u0076\u0065","\u0064\u006f\u0074\u006c\u0065\u0073\u0073\u0069","\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0074\u0069\u006cd\u0065","\u006d\u0061\u0063\u0072\u006f\u006e","\u0062\u0072\u0065v\u0065","\u0064o\u0074\u0061\u0063\u0063\u0065\u006et","\u0072\u0069\u006e\u0067","\u0063e\u0064\u0069\u006c\u006c\u0061","\u0068\u0075\u006eg\u0061\u0072\u0075\u006d\u006c\u0061\u0075\u0074","\u006f\u0067\u006f\u006e\u0065\u006b","\u0063\u0061\u0072o\u006e","\u004c\u0073\u006c\u0061\u0073\u0068","\u006c\u0073\u006c\u0061\u0073\u0068","\u0053\u0063\u0061\u0072\u006f\u006e","\u0073\u0063\u0061\u0072\u006f\u006e","\u005a\u0063\u0061\u0072\u006f\u006e","\u007a\u0063\u0061\u0072\u006f\u006e","\u0062r\u006f\u006b\u0065\u006e\u0062\u0061r","\u0045\u0074\u0068","\u0065\u0074\u0068","\u0059\u0061\u0063\u0075\u0074\u0065","\u0079\u0061\u0063\u0075\u0074\u0065","\u0054\u0068\u006fr\u006e","\u0074\u0068\u006fr\u006e","\u006d\u0069\u006eu\u0073","\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0079","o\u006e\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","t\u0077\u006f\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u0074\u0068\u0072\u0065\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u006fn\u0065\u0068\u0061\u006c\u0066","\u006f\u006e\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072","\u0074\u0068\u0072\u0065\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072\u0073","\u0066\u0072\u0061n\u0063","\u0047\u0062\u0072\u0065\u0076\u0065","\u0067\u0062\u0072\u0065\u0076\u0065","\u0049\u0064\u006f\u0074\u0061\u0063\u0063\u0065\u006e\u0074","\u0053\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0073\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0043\u0061\u0063\u0075\u0074\u0065","\u0063\u0061\u0063\u0075\u0074\u0065","\u0043\u0063\u0061\u0072\u006f\u006e","\u0063\u0063\u0061\u0072\u006f\u006e","\u0064\u0063\u0072\u006f\u0061\u0074"};
func (_ggfe *ttfParser )ParsePost ()error {if _aaf :=_ggfe .Seek ("\u0070\u006f\u0073\u0074");_aaf !=nil {return _aaf ;};_ded :=_ggfe .Read32Fixed ();_ggfe ._gad .ItalicAngle =_ggfe .Read32Fixed ();_ggfe ._gad .UnderlinePosition =_ggfe .ReadShort ();_ggfe ._gad .UnderlineThickness =_ggfe .ReadShort ();
_ggfe ._gad .IsFixedPitch =_ggfe .ReadULong ()!=0;_ggfe .ReadULong ();_ggfe .ReadULong ();_ggfe .ReadULong ();_ggfe .ReadULong ();_ad .Log .Trace ("\u0050a\u0072\u0073\u0065\u0050\u006f\u0073\u0074\u003a\u0020\u0066\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065\u003d\u0025\u0066",_ded );
switch _ded {case 1.0:_ggfe ._gad .GlyphNames =_bggc ;case 2.0:_dedg :=int (_ggfe .ReadUShort ());_ddg :=make ([]int ,_dedg );_ggfe ._gad .GlyphNames =make ([]GlyphName ,_dedg );_ebe :=-1;for _fefc :=0;_fefc < _dedg ;_fefc ++{_fad :=int (_ggfe .ReadUShort ());
_ddg [_fefc ]=_fad ;if _fad <=0x7fff&&_fad > _ebe {_ebe =_fad ;};};var _bdde []GlyphName ;if _ebe >=len (_bggc ){_bdde =make ([]GlyphName ,_ebe -len (_bggc )+1);for _cad :=0;_cad < _ebe -len (_bggc )+1;_cad ++{_bdgc :=int (_ggfe .readByte ());_ffg ,_cbc :=_ggfe .ReadStr (_bdgc );
if _cbc !=nil {return _cbc ;};_bdde [_cad ]=GlyphName (_ffg );};};for _dbcb :=0;_dbcb < _dedg ;_dbcb ++{_afg :=_ddg [_dbcb ];if _afg < len (_bggc ){_ggfe ._gad .GlyphNames [_dbcb ]=_bggc [_afg ];}else if _afg >=len (_bggc )&&_afg <=32767{_ggfe ._gad .GlyphNames [_dbcb ]=_bdde [_afg -len (_bggc )];
}else {_ggfe ._gad .GlyphNames [_dbcb ]="\u002e\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064";};};case 2.5:_dfeb :=make ([]int ,_ggfe ._fdc );for _egd :=0;_egd < len (_dfeb );_egd ++{_fge :=int (_ggfe .ReadSByte ());_dfeb [_egd ]=_egd +1+_fge ;
};_ggfe ._gad .GlyphNames =make ([]GlyphName ,len (_dfeb ));for _gcd :=0;_gcd < len (_ggfe ._gad .GlyphNames );_gcd ++{_dagb :=_bggc [_dfeb [_gcd ]];_ggfe ._gad .GlyphNames [_gcd ]=_dagb ;};case 3.0:_ad .Log .Debug ("\u004e\u006f\u0020\u0050\u006f\u0073t\u0053\u0063\u0072i\u0070\u0074\u0020n\u0061\u006d\u0065\u0020\u0069\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020is\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u002e");
default:_ad .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020f\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065=\u0025\u0066",_ded );};return nil ;};var _fgb *RuneCharSafeMap ;func MakeRuneCharSafeMap (length int )*RuneCharSafeMap {return &RuneCharSafeMap {_dg :make (map[rune ]CharMetrics ,length )};
};func init (){RegisterStdFont (SymbolName ,_dgf ,"\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063","S\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064","\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064\u0049t\u0061\u006c\u0069\u0063");
RegisterStdFont (ZapfDingbatsName ,_eeed );};var _bfa *RuneCharSafeMap ;func _gga ()StdFont {_afb .Do (_gbf );_dad :=Descriptor {Name :TimesBoldItalicName ,Family :_dgg ,Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-200,-218,996,921},ItalicAngle :-15,Ascent :683,Descent :-217,CapHeight :669,XHeight :462,StemV :121,StemH :42};
return NewStdFont (_dad ,_bfa );};var _bccc =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,611,778,778,778,778,389,389,389,389,389,389,389,389,500,778,778,667,667,667,667,667,944,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,611,778,722,722,722,722,556,556,556,556,556,667,667,667,611,722,722,722,722,722,722,722,722,722,722,1000,722,722,722,722,667,667,667,667,500,500,500,500,333,500,722,500,500,833,500,500,581,520,500,930,500,556,278,220,394,394,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,556,500,500,672,556,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,333,333,333,556,500,556,500,500,167,500,500,500,556,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,333,556,556,278,278,394,278,570,549,570,494,278,833,333,570,556,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,300,330,500,500,556,540,333,333,494,1000,250,250,1000,570,570,556,500,500,555,500,500,500,333,333,333,278,444,444,549,444,444,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,333,416,333,556,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,500,722,500,500,500,500,500,444,444,444,444,500};
func _geg ()StdFont {_afb .Do (_gbf );_ce :=Descriptor {Name :TimesItalicName ,Family :_dgg ,Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-169,-217,1010,883},ItalicAngle :-15.5,Ascent :683,Descent :-217,CapHeight :653,XHeight :441,StemV :76,StemH :32};
return NewStdFont (_ce ,_cgf );};type Descriptor struct{Name StdFontName ;Family string ;Weight FontWeight ;Flags uint ;BBox [4]float64 ;ItalicAngle float64 ;Ascent float64 ;Descent float64 ;CapHeight float64 ;XHeight float64 ;StemV float64 ;StemH float64 ;
};func init (){RegisterStdFont (TimesRomanName ,_bgd ,"\u0054\u0069\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e","\u0054\u0069\u006de\u0073");RegisterStdFont (TimesBoldName ,_bbg ,"\u0054i\u006de\u0073\u004e\u0065\u0077\u0052o\u006d\u0061n\u002c\u0042\u006f\u006c\u0064","\u0054\u0069\u006d\u0065\u0073\u002c\u0042\u006f\u006c\u0064");
RegisterStdFont (TimesItalicName ,_geg ,"T\u0069m\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006da\u006e\u002c\u0049\u0074al\u0069\u0063","\u0054\u0069\u006de\u0073\u002c\u0049\u0074\u0061\u006c\u0069\u0063");RegisterStdFont (TimesBoldItalicName ,_gga ,"\u0054i\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e,\u0042\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063","\u0054\u0069m\u0065\u0073\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");
};func (_bd *RuneCharSafeMap )Length ()int {_bd ._gc .RLock ();defer _bd ._gc .RUnlock ();return len (_bd ._dg );};func RegisterStdFont (name StdFontName ,fnc func ()StdFont ,aliases ...StdFontName ){if _ ,_ab :=_cfb .read (name );_ab {panic ("\u0066o\u006e\u0074\u0020\u0061l\u0072\u0065\u0061\u0064\u0079 \u0072e\u0067i\u0073\u0074\u0065\u0072\u0065\u0064\u003a "+string (name ));
};_cfb .write (name ,fnc );for _ ,_ae :=range aliases {RegisterStdFont (_ae ,fnc );};};type ttfParser struct{_gad TtfType ;_ccg _fa .ReadSeeker ;_dbg map[string ]uint32 ;_dgfd uint16 ;_fdc uint16 ;};func _dgf ()StdFont {_be :=_dc .NewSymbolEncoder ();_fcg :=Descriptor {Name :SymbolName ,Family :string (SymbolName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-180,-293,1090,1010},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :85,StemH :92};
return NewStdFontWithEncoding (_fcg ,_abb ,_be );};func (_bfdg *ttfParser )ParseOS2 ()error {if _fec :=_bfdg .Seek ("\u004f\u0053\u002f\u0032");_fec !=nil {return _fec ;};_dce :=_bfdg .ReadUShort ();_bfdg .Skip (4*2);_bfdg .Skip (11*2+10+4*4+4);_abda :=_bfdg .ReadUShort ();
_bfdg ._gad .Bold =(_abda &32)!=0;_bfdg .Skip (2*2);_bfdg ._gad .TypoAscender =_bfdg .ReadShort ();_bfdg ._gad .TypoDescender =_bfdg .ReadShort ();if _dce >=2{_bfdg .Skip (3*2+2*4+2);_bfdg ._gad .CapHeight =_bfdg .ReadShort ();}else {_bfdg ._gad .CapHeight =0;
};return nil ;};var _ Font =StdFont {};func (_daf *ttfParser )parseCmapSubtable10 (_cea int64 )error {if _daf ._gad .Chars ==nil {_daf ._gad .Chars =make (map[rune ]GID );};_daf ._ccg .Seek (int64 (_daf ._dbg ["\u0063\u006d\u0061\u0070"])+_cea ,_fa .SeekStart );
var _efgb ,_egec uint32 ;_acf :=_daf .ReadUShort ();if _acf < 8{_efgb =uint32 (_daf .ReadUShort ());_egec =uint32 (_daf .ReadUShort ());}else {_daf .ReadUShort ();_efgb =_daf .ReadULong ();_egec =_daf .ReadULong ();};_ad .Log .Trace ("\u0070\u0061r\u0073\u0065\u0043\u006d\u0061p\u0053\u0075\u0062\u0074\u0061b\u006c\u0065\u0031\u0030\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u003d\u0025\u0064",_acf ,_efgb ,_egec );
if _acf !=0{return _e .New ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006d\u0061p\u0020s\u0075\u0062\u0074\u0061\u0062\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cbfd ,_cbd :=_daf .ReadStr (256);if _cbd !=nil {return _cbd ;
};_gbfc :=[]byte (_cbfd );for _egf ,_ead :=range _gbfc {_daf ._gad .Chars [rune (_egf )]=GID (_ead );if _ead !=0{_g .Printf ("\u0009\u0030\u0078\u002502\u0078\u0020\u279e\u0020\u0030\u0078\u0025\u0030\u0032\u0078\u003d\u0025\u0063\u000a",_egf ,_ead ,rune (_ead ));
};};return nil ;};type GlyphName =_dc .GlyphName ;const (HelveticaName =StdFontName ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");HelveticaBoldName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061-\u0042\u006f\u006c\u0064");HelveticaObliqueName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061\u002d\u004f\u0062l\u0069\u0071\u0075\u0065");
HelveticaBoldObliqueName =StdFontName ("H\u0065\u006c\u0076\u0065ti\u0063a\u002d\u0042\u006f\u006c\u0064O\u0062\u006c\u0069\u0071\u0075\u0065"););var _dbe *RuneCharSafeMap ;type GID =_dc .GID ;func _bgd ()StdFont {_afb .Do (_gbf );_ddf :=Descriptor {Name :TimesRomanName ,Family :_dgg ,Weight :FontWeightRoman ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,898},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :662,XHeight :450,StemV :84,StemH :28};
return NewStdFont (_ddf ,_ege );};func (_afe *ttfParser )parseCmapFormat12 ()error {_dfe :=_afe .ReadULong ();_ad .Log .Trace ("\u0070\u0061\u0072se\u0043\u006d\u0061\u0070\u0046\u006f\u0072\u006d\u0061t\u00312\u003a \u0025s\u0020\u006e\u0075\u006d\u0047\u0072\u006f\u0075\u0070\u0073\u003d\u0025\u0064",_afe ._gad .String (),_dfe );
for _gfa :=uint32 (0);_gfa < _dfe ;_gfa ++{_gcae :=_afe .ReadULong ();_eega :=_afe .ReadULong ();_defe :=_afe .ReadULong ();if _gcae > 0x0010FFFF||(0xD800<=_gcae &&_gcae <=0xDFFF){return _e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");
};if _eega < _gcae ||_eega > 0x0010FFFF||(0xD800<=_eega &&_eega <=0xDFFF){return _e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");};for _gbc :=_gcae ;_gbc <=_eega ;
_gbc ++{if _gbc > 0x10FFFF{_ad .Log .Debug ("\u0046\u006fr\u006d\u0061\u0074\u0020\u0031\u0032\u0020\u0063\u006d\u0061\u0070\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0062\u0065\u0079\u006f\u006e\u0064\u0020\u0055\u0043\u0053\u002d\u0034");
};_afe ._gad .Chars [rune (_gbc )]=GID (_defe );_defe ++;};};return nil ;};var _dfd *RuneCharSafeMap ;func _gbf (){_ege =MakeRuneCharSafeMap (len (_cfc ));_ecc =MakeRuneCharSafeMap (len (_cfc ));_bfa =MakeRuneCharSafeMap (len (_cfc ));_cgf =MakeRuneCharSafeMap (len (_cfc ));
for _ga ,_fbb :=range _cfc {_ege .Write (_fbb ,CharMetrics {Wx :float64 (_dfdc [_ga ])});_ecc .Write (_fbb ,CharMetrics {Wx :float64 (_bccc [_ga ])});_bfa .Write (_fbb ,CharMetrics {Wx :float64 (_bff [_ga ])});_cgf .Write (_fbb ,CharMetrics {Wx :float64 (_dag [_ga ])});
};};var _afb _a .Once ;func (_bbe *ttfParser )Seek (tag string )error {_eegg ,_gcf :=_bbe ._dbg [tag ];if !_gcf {return _g .Errorf ("\u0074\u0061\u0062\u006ce \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0073",tag );};_bbe ._ccg .Seek (int64 (_eegg ),_fa .SeekStart );
return nil ;};func (_eed *ttfParser )parseCmapFormat6 ()error {_fdca :=int (_eed .ReadUShort ());_caec :=int (_eed .ReadUShort ());_ad .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u0046o\u0072\u006d\u0061\u0074\u0036\u003a\u0020%s\u0020\u0066\u0069\u0072s\u0074\u0043\u006f\u0064\u0065\u003d\u0025\u0064\u0020en\u0074\u0072y\u0043\u006f\u0075\u006e\u0074\u003d\u0025\u0064",_eed ._gad .String (),_fdca ,_caec );
for _aefe :=0;_aefe < _caec ;_aefe ++{_gef :=GID (_eed .ReadUShort ());_eed ._gad .Chars [rune (_aefe +_fdca )]=_gef ;};return nil ;};func (_ecfa *ttfParser )ReadUShort ()(_ecge uint16 ){_eb .Read (_ecfa ._ccg ,_eb .BigEndian ,&_ecge );return _ecge ;};
func _bdd (_bfd map[string ]uint32 )string {var _efe []string ;for _eeg :=range _bfd {_efe =append (_efe ,_eeg );};_b .Slice (_efe ,func (_deb ,_gfec int )bool {return _bfd [_efe [_deb ]]< _bfd [_efe [_gfec ]]});_faf :=[]string {_g .Sprintf ("\u0054\u0072\u0075\u0065Ty\u0070\u0065\u0020\u0074\u0061\u0062\u006c\u0065\u0073\u003a\u0020\u0025\u0064",len (_bfd ))};
for _ ,_gbfg :=range _efe {_faf =append (_faf ,_g .Sprintf ("\u0009%\u0071\u0020\u0025\u0035\u0064",_gbfg ,_bfd [_gbfg ]));};return _f .Join (_faf ,"\u000a");};func (_fefb *ttfParser )ReadShort ()(_baedaa int16 ){_eb .Read (_fefb ._ccg ,_eb .BigEndian ,&_baedaa );
return _baedaa ;};var _cfc =[]rune {'A','Æ','Á','Ă','Â','Ä','À','Ā','Ą','Å','Ã','B','C','Ć','Č','Ç','D','Ď','Đ','∆','E','É','Ě','Ê','Ë','Ė','È','Ē','Ę','Ð','€','F','G','Ğ','Ģ','H','I','Í','Î','Ï','İ','Ì','Ī','Į','J','K','Ķ','L','Ĺ','Ľ','Ļ','Ł','M','N','Ń','Ň','Ņ','Ñ','O','Œ','Ó','Ô','Ö','Ò','Ő','Ō','Ø','Õ','P','Q','R','Ŕ','Ř','Ŗ','S','Ś','Š','Ş','Ș','T','Ť','Ţ','Þ','U','Ú','Û','Ü','Ù','Ű','Ū','Ų','Ů','V','W','X','Y','Ý','Ÿ','Z','Ź','Ž','Ż','a','á','ă','â','´','ä','æ','à','ā','&','ą','å','^','~','*','@','ã','b','\\','|','{','}','[',']','˘','¦','•','c','ć','ˇ','č','ç','¸','¢','ˆ',':',',','\uf6c3','©','¤','d','†','‡','ď','đ','°','¨','÷','$','˙','ı','e','é','ě','ê','ë','ė','è','8','…','ē','—','–','ę','=','ð','!','¡','f','ﬁ','5','ﬂ','ƒ','4','⁄','g','ğ','ģ','ß','`','>','≥','«','»','‹','›','h','˝','-','i','í','î','ï','ì','ī','į','j','k','ķ','l','ĺ','ľ','ļ','<','≤','¬','◊','ł','m','¯','−','µ','×','n','ń','ň','ņ','9','≠','ñ','#','o','ó','ô','ö','œ','˛','ò','ő','ō','1','½','¼','¹','ª','º','ø','õ','p','¶','(',')','∂','%','.','·','‰','+','±','q','?','¿','"','„','“','”','‘','’','‚','\'','r','ŕ','√','ř','ŗ','®','˚','s','ś','š','ş','ș','§',';','7','6','/',' ','£','∑','t','ť','ţ','þ','3','¾','³','˜','™','2','²','u','ú','û','ü','ù','ű','ū','_','ų','ů','v','w','x','y','ý','ÿ','¥','z','ź','ž','ż','0'};
var _bff =[]int16 {667,944,667,667,667,667,667,667,667,667,667,667,667,667,667,667,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,667,722,722,722,778,389,389,389,389,389,389,389,389,500,667,667,611,611,611,611,611,889,722,722,722,722,722,722,944,722,722,722,722,722,722,722,722,611,722,667,667,667,667,556,556,556,556,556,611,611,611,611,722,722,722,722,722,722,722,722,722,667,889,667,611,611,611,611,611,611,611,500,500,500,500,333,500,722,500,500,778,500,500,570,570,500,832,500,500,278,220,348,348,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,500,500,500,608,500,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,389,389,333,556,500,556,500,500,167,500,500,500,500,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,278,500,500,278,278,382,278,570,549,606,494,278,778,333,606,576,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,266,300,500,500,500,500,333,333,494,833,250,250,1000,570,570,500,500,500,555,500,500,500,333,333,333,278,389,389,549,389,389,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,366,278,500,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,444,667,500,444,444,444,500,389,389,389,389,500};
var _bda _a .Once ;func _bga ()StdFont {_bda .Do (_cga );_ca :=Descriptor {Name :CourierName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0021,BBox :[4]float64 {-23,-250,715,805},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};
return NewStdFont (_ca ,_dbe );};type FontWeight int ;var _bgg *RuneCharSafeMap ;func _ed ()StdFont {_bda .Do (_cga );_fbc :=Descriptor {Name :CourierObliqueName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0061,BBox :[4]float64 {-27,-250,849,805},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};
return NewStdFont (_fbc ,_fgb );};func (_ggg *TtfType )MakeEncoder ()(_dc .SimpleEncoder ,error ){_abe :=make (map[_dc .CharCode ]GlyphName );for _edb :=_dc .CharCode (0);_edb <=256;_edb ++{_cbf :=rune (_edb );_ac ,_ggf :=_ggg .Chars [_cbf ];if !_ggf {continue ;
};var _afba GlyphName ;if int (_ac )>=0&&int (_ac )< len (_ggg .GlyphNames ){_afba =_ggg .GlyphNames [_ac ];}else {_ebd :=rune (_ac );if _aea ,_bbc :=_dc .RuneToGlyph (_ebd );_bbc {_afba =_aea ;};};if _afba !=""{_abe [_edb ]=_afba ;};};if len (_abe )==0{_ad .Log .Debug ("WA\u0052\u004eI\u004e\u0047\u003a\u0020\u005a\u0065\u0072\u006f\u0020l\u0065\u006e\u0067\u0074\u0068\u0020\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002e\u0020\u0074\u0074\u0066=\u0025s\u0020\u0043\u0068\u0061\u0072\u0073\u003d\u005b%\u00200\u0032\u0078]",_ggg ,_ggg .Chars );
};return _dc .NewCustomSimpleTextEncoder (_abe ,nil );};var _adc _a .Once ;func _bbg ()StdFont {_afb .Do (_gbf );_fcga :=Descriptor {Name :TimesBoldName ,Family :_dgg ,Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,935},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :676,XHeight :461,StemV :139,StemH :44};
return NewStdFont (_fcga ,_ecc );};func (_gfe StdFont )GetRuneMetrics (r rune )(CharMetrics ,bool ){_eaf ,_fdga :=_gfe ._aed .Read (r );return _eaf ,_fdga ;};func (_gae *ttfParser )parseCmapSubtable31 (_bed int64 )error {_bee :=make ([]rune ,0,8);_aae :=make ([]rune ,0,8);
_bdga :=make ([]int16 ,0,8);_bcb :=make ([]uint16 ,0,8);_gae ._gad .Chars =make (map[rune ]GID );_gae ._ccg .Seek (int64 (_gae ._dbg ["\u0063\u006d\u0061\u0070"])+_bed ,_fa .SeekStart );_adfc :=_gae .ReadUShort ();if _adfc !=4{return _de .Errorf ("u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0073\u0075\u0062t\u0061\u0062\u006c\u0065\u0020\u0066\u006fr\u006d\u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0028\u0025w\u0029",_adfc ,_df .ErrNotSupported );
};_gae .Skip (2*2);_ggfb :=int (_gae .ReadUShort ()/2);_gae .Skip (3*2);for _gdg :=0;_gdg < _ggfb ;_gdg ++{_aae =append (_aae ,rune (_gae .ReadUShort ()));};_gae .Skip (2);for _dab :=0;_dab < _ggfb ;_dab ++{_bee =append (_bee ,rune (_gae .ReadUShort ()));
};for _cdg :=0;_cdg < _ggfb ;_cdg ++{_bdga =append (_bdga ,_gae .ReadShort ());};_bfad ,_ :=_gae ._ccg .Seek (int64 (0),_fa .SeekCurrent );for _fgbd :=0;_fgbd < _ggfb ;_fgbd ++{_bcb =append (_bcb ,_gae .ReadUShort ());};for _cgc :=0;_cgc < _ggfb ;_cgc ++{_gda :=_bee [_cgc ];
_fcgd :=_aae [_cgc ];_bcg :=_bdga [_cgc ];_ccb :=_bcb [_cgc ];if _ccb > 0{_gae ._ccg .Seek (_bfad +2*int64 (_cgc )+int64 (_ccb ),_fa .SeekStart );};for _fef :=_gda ;_fef <=_fcgd ;_fef ++{if _fef ==0xFFFF{break ;};var _gege int32 ;if _ccb > 0{_gege =int32 (_gae .ReadUShort ());
if _gege > 0{_gege +=int32 (_bcg );};}else {_gege =_fef +int32 (_bcg );};if _gege >=65536{_gege -=65536;};if _gege > 0{_gae ._gad .Chars [_fef ]=GID (_gege );};};};return nil ;};func (_cbfg *ttfParser )ParseComponents ()error {if _ged :=_cbfg .ParseHead ();
_ged !=nil {return _ged ;};if _bgcg :=_cbfg .ParseHhea ();_bgcg !=nil {return _bgcg ;};if _dcb :=_cbfg .ParseMaxp ();_dcb !=nil {return _dcb ;};if _ecg :=_cbfg .ParseHmtx ();_ecg !=nil {return _ecg ;};if _ ,_ffd :=_cbfg ._dbg ["\u006e\u0061\u006d\u0065"];
_ffd {if _cdf :=_cbfg .ParseName ();_cdf !=nil {return _cdf ;};};if _ ,_gbg :=_cbfg ._dbg ["\u004f\u0053\u002f\u0032"];_gbg {if _bggb :=_cbfg .ParseOS2 ();_bggb !=nil {return _bggb ;};};if _ ,_dcd :=_cbfg ._dbg ["\u0070\u006f\u0073\u0074"];_dcd {if _bdg :=_cbfg .ParsePost ();
_bdg !=nil {return _bdg ;};};if _ ,_cdac :=_cbfg ._dbg ["\u0063\u006d\u0061\u0070"];_cdac {if _agg :=_cbfg .ParseCmap ();_agg !=nil {return _agg ;};};return nil ;};func _aef ()StdFont {_bda .Do (_cga );_bdf :=Descriptor {Name :CourierBoldName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0021,BBox :[4]float64 {-113,-250,749,801},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_bdf ,_bb );};var _cgf *RuneCharSafeMap ;func (_bdb StdFont )Descriptor ()Descriptor {return _bdb ._ba };func (_ade StdFont )Encoder ()_dc .TextEncoder {return _ade ._ggcd };func (_bg *RuneCharSafeMap )Read (b rune )(CharMetrics ,bool ){_bg ._gc .RLock ();
defer _bg ._gc .RUnlock ();_cc ,_eeb :=_bg ._dg [b ];return _cc ,_eeb ;};func (_edf *ttfParser )ReadULong ()(_cadg uint32 ){_eb .Read (_edf ._ccg ,_eb .BigEndian ,&_cadg );return _cadg ;};func (_ea *RuneCharSafeMap )Write (b rune ,r CharMetrics ){_ea ._gc .Lock ();
defer _ea ._gc .Unlock ();_ea ._dg [b ]=r ;};func (_fgg *ttfParser )ParseHhea ()error {if _gea :=_fgg .Seek ("\u0068\u0068\u0065\u0061");_gea !=nil {return _gea ;};_fgg .Skip (4+15*2);_fgg ._dgfd =_fgg .ReadUShort ();return nil ;};func (_fg *fontMap )read (_dfg StdFontName )(func ()StdFont ,bool ){_fg .Lock ();
defer _fg .Unlock ();_cce ,_dgb :=_fg ._da [_dfg ];return _cce ,_dgb ;};type StdFontName string ;func (_fb StdFont )Name ()string {return string (_fb ._ba .Name )};func (_dfc *ttfParser )Read32Fixed ()float64 {_cdfe :=float64 (_dfc .ReadShort ());_gaaf :=float64 (_dfc .ReadUShort ())/65536.0;
return _cdfe +_gaaf ;};var _bb *RuneCharSafeMap ;var _ecc *RuneCharSafeMap ;type fontMap struct{_a .Mutex ;_da map[StdFontName ]func ()StdFont ;};func NewFontFile2FromPdfObject (obj _df .PdfObject )(TtfType ,error ){obj =_df .TraceToDirectObject (obj );
_bdag ,_bfg :=obj .(*_df .PdfObjectStream );if !_bfg {_ad .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0032\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072e\u0061\u006d \u0028\u0025\u0054\u0029",obj );
return TtfType {},_df .ErrTypeError ;};_ff ,_cee :=_df .DecodeStream (_bdag );if _cee !=nil {return TtfType {},_cee ;};_dec :=ttfParser {_ccg :_ec .NewReader (_ff )};return _dec .Parse ();};func TtfParse (r _fa .ReadSeeker )(TtfType ,error ){_fbe :=&ttfParser {_ccg :r };
return _fbe .Parse ()};func (_ceg *TtfType )NewEncoder ()_dc .TextEncoder {return _dc .NewTrueTypeFontEncoder (_ceg .Chars )};var _dfdc =[]int16 {722,889,722,722,722,722,722,722,722,722,722,667,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,556,722,722,722,722,333,333,333,333,333,333,333,333,389,722,722,611,611,611,611,611,889,722,722,722,722,722,722,889,722,722,722,722,722,722,722,722,556,722,667,667,667,667,556,556,556,556,556,611,611,611,556,722,722,722,722,722,722,722,722,722,722,944,722,722,722,722,611,611,611,611,444,444,444,444,333,444,667,444,444,778,444,444,469,541,500,921,444,500,278,200,480,480,333,333,333,200,350,444,444,333,444,444,333,500,333,278,250,250,760,500,500,500,500,588,500,400,333,564,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,564,500,333,333,333,556,500,556,500,500,167,500,500,500,500,333,564,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,500,500,278,278,344,278,564,549,564,471,278,778,333,564,500,564,500,500,500,500,500,549,500,500,500,500,500,500,722,333,500,500,500,500,750,750,300,276,310,500,500,500,453,333,333,476,833,250,250,1000,564,564,500,444,444,408,444,444,444,333,333,333,180,333,333,453,333,333,760,333,389,389,389,389,389,500,278,500,500,278,250,500,600,278,326,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,500,722,500,500,500,500,500,444,444,444,444,500};
