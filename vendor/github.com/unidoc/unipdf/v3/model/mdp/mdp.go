//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_d "errors";_c "fmt";_fe "github.com/unidoc/unipdf/v3/core";);

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_cc *defaultDiffPolicy )ReviewFile (oldParser *_fe .PdfParser ,newParser *_fe .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_d .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_d .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_cc ._fc =NoRestrictions ;}else {_cc ._fc =params .DocMDPLevel ;};_g :=&DiffResults {};for _fbf :=oldParser .GetRevisionNumber ()+1;_fbf <=newParser .GetRevisionNumber ();_fbf ++{_e ,_bd :=newParser .GetRevision (_fbf -1);
if _bd !=nil {return nil ,_bd ;};_cd ,_bd :=newParser .GetRevision (_fbf );if _bd !=nil {return nil ,_bd ;};_ed ,_bd :=_cc .compareRevisions (_e ,_cd );if _bd !=nil {return nil ,_bd ;};_g .Warnings =append (_g .Warnings ,_ed .Warnings ...);_g .Errors =append (_g .Errors ,_ed .Errors ...);
};return _g ,nil ;};func (_ddf *defaultDiffPolicy )compareAnnots (_cde int ,_afe ,_dag []_fe .PdfObject )error {_gbg :=make (map[int64 ]*_fe .PdfObjectDictionary );for _ ,_bc :=range _afe {_bgag ,_fbb :=_fe .GetIndirect (_bc );if !_fbb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cddd ,_fbb :=_fe .GetDict (_bgag .PdfObject );if !_fbb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gbg [_bgag .ObjectNumber ]=_cddd ;
};for _ ,_ff :=range _dag {_dgf ,_bcd :=_fe .GetIndirect (_ff );if !_bcd {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_eeg ,_bcd :=_fe .GetDict (_dgf .PdfObject );
if !_bcd {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_edd ,_ :=_fe .GetStringVal (_eeg .Get ("\u0054"));_gab ,_ :=_fe .GetNameVal (_eeg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_afa :=_gbg [_dgf .ObjectNumber ];!_afa {switch _ddf ._fc {case NoRestrictions ,FillFormsAndAnnots :_ddf ._fb .addWarningWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gab ,_edd ));
default:_gc ,_cca :=_fe .GetDict (_dgf .PdfObject );if !_cca {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_ggf ,_cca :=_fe .GetNameVal (_gc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_cca {return _d .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _ggf =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ddf ._fc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ddf ._fb .addWarningWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gab ,_edd ));
default:_ddf ._fb .addErrorWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gab ,_edd ));};}else {_ddf ._fb .addErrorWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gab ,_edd ));
};};}else {delete (_gbg ,_dgf .ObjectNumber );if _ge ,_ebbd :=_ddf ._b [_dgf .ObjectNumber ];_ebbd {switch _ddf ._fc {case NoRestrictions ,FillFormsAndAnnots :_ddf ._fb .addWarningWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gab ,_edd ));
default:_eca ,_bba :=_fe .GetIndirect (_ge );if !_bba {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_ded ,_bba :=_fe .GetDict (_eca .PdfObject );if !_bba {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_fcc ,_bba :=_fe .GetNameVal (_ded .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_bba {return _d .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _fcc =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ddf ._fc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ddf ._fb .addWarningWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gab ,_edd ));
default:_ddf ._fb .addErrorWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gab ,_edd ));};}else {_ddf ._fb .addErrorWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gab ,_edd ));
};};};};};for _ ,_fac :=range _gbg {_cbd ,_ :=_fe .GetStringVal (_fac .Get ("\u0054"));_ebgg ,_ :=_fe .GetNameVal (_fac .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _ddf ._fc {case NoRestrictions ,FillFormsAndAnnots :_ddf ._fb .addWarningWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ebgg ,_cbd ));
default:_ddf ._fb .addErrorWithDescription (_cde ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ebgg ,_cbd ));};};return nil ;};func (_bga *defaultDiffPolicy )compareFields (_ce int ,_deeg ,_ad []_fe .PdfObject )error {_ee :=make (map[int64 ]*_fe .PdfObjectDictionary );
for _ ,_efg :=range _deeg {_af ,_gd :=_fe .GetIndirect (_efg );if !_gd {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_cee ,_gd :=_fe .GetDict (_af .PdfObject );
if !_gd {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ee [_af .ObjectNumber ]=_cee ;};for _ ,_ag :=range _ad {_fg ,_be :=_fe .GetIndirect (_ag );
if !_be {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gba ,_be :=_fe .GetDict (_fg .PdfObject );if !_be {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_gba .Get ("\u0054");if _ ,_deb :=_bga ._b [_fg .ObjectNumber ];_deb {switch _bga ._fc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bga ._fb .addWarningWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_bga ._fb .addErrorWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_daf :=_ee [_fg .ObjectNumber ];!_daf {switch _bga ._fc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bga ._fb .addWarningWithDescription (_ce ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_gba .Get ("\u0054")));
default:_bga ._fb .addErrorWithDescription (_ce ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_gba .Get ("\u0054")));};}else {delete (_ee ,_fg .ObjectNumber );if _ ,_dab :=_bga ._b [_fg .ObjectNumber ];
_dab {switch _bga ._fc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bga ._fb .addWarningWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_gba .Get ("\u0054")));
default:_bga ._fb .addErrorWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_gba .Get ("\u0054")));};};};if FT ,_fdc :=_fe .GetNameVal (_gba .Get ("\u0046\u0054"));_fdc {if FT =="\u0053\u0069\u0067"{if _dg ,_eaf :=_fe .GetIndirect (_gba .Get ("\u0056"));
_eaf {if _ ,_dba :=_bga ._b [_dg .ObjectNumber ];_dba {switch _bga ._fc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bga ._fb .addWarningWithDescription (_ce ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_bga ._fb .addErrorWithDescription (_ce ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_ebd :=range _ee {switch _bga ._fc {case NoRestrictions :_bga ._fb .addWarningWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ebd .Get ("\u0054")));default:_bga ._fb .addErrorWithDescription (_ce ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ebd .Get ("\u0054")));
};};return nil ;};func _bgb (_egc _fe .PdfObject )([]_fe .PdfObject ,error ){_gge :=make ([]_fe .PdfObject ,0);if _egc !=nil {_dc :=_egc ;if _eaa ,_bce :=_fe .GetIndirect (_egc );_bce {_dc =_eaa .PdfObject ;};if _facc ,_bcc :=_fe .GetArray (_dc );_bcc {_gge =_facc .Elements ();
}else {return nil ,_d .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _gge ,nil ;};

// String returns the state of the warning.
func (_ddbg *DiffResult )String ()string {return _c .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_ddbg .Description ,_ddbg .Revision );};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_fed *DiffResults )addWarning (_cgf *DiffResult ){if _fed .Warnings ==nil {_fed .Warnings =make ([]*DiffResult ,0);};_fed .Warnings =append (_fed .Warnings ,_cgf );};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;
FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_dae *DiffResults )addError (_fee *DiffResult ){if _dae .Errors ==nil {_dae .Errors =make ([]*DiffResult ,0);};_dae .Errors =append (_dae .Errors ,_fee );};type defaultDiffPolicy struct{_b map[int64 ]_fe .PdfObject ;
_fb *DiffResults ;_fc DocMDPPermission ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_efa *_fe .PdfParser ,_bbe *_fe .PdfParser ,_efc *MDPParameters )(*DiffResults ,error );};func (_bb *defaultDiffPolicy )comparePages (_fbc int ,_gg ,_cac *_fe .PdfIndirectObject )error {if _ ,_eafb :=_bb ._b [_cac .ObjectNumber ];_eafb {_bb ._fb .addErrorWithDescription (_fbc ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_dff ,_caf :=_fe .GetDict (_cac .PdfObject );_aad ,_bag :=_fe .GetDict (_gg .PdfObject );if !_caf ||!_bag {return _d .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_cg ,_caf :=_fe .GetArray (_dff .Get ("\u004b\u0069\u0064\u0073"));_faa ,_bag :=_fe .GetArray (_aad .Get ("\u004b\u0069\u0064\u0073"));if !_caf ||!_bag {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_bdg :=_cg .Len ();if _bdg > _faa .Len (){_bdg =_faa .Len ();};for _bdgb :=0;_bdgb < _bdg ;_bdgb ++{_dfe ,_fdf :=_fe .GetIndirect (_fe .ResolveReference (_faa .Get (_bdgb )));_cdd ,_fgg :=_fe .GetIndirect (_fe .ResolveReference (_cg .Get (_bdgb )));if !_fdf ||!_fgg {return _d .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _dfe .ObjectNumber !=_cdd .ObjectNumber {_bb ._fb .addErrorWithDescription (_fbc ,_c .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_bdgb ));};_fge ,_fdf :=_fe .GetDict (_cdd );_deeb ,_fgg :=_fe .GetDict (_dfe );
if !_fdf ||!_fgg {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_egda ,_fgb :=_bgb (_fge .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _fgb !=nil {return _fgb ;};_gbf ,_fgb :=_bgb (_deeb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _fgb !=nil {return _fgb ;};if _ccb :=_bb .compareAnnots (_fbc ,_gbf ,_egda );_ccb !=nil {return _ccb ;};};for _acb :=_bdg +1;_acb <=_cg .Len ();_acb ++{_bb ._fb .addErrorWithDescription (_fbc ,_c .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_acb ));
};for _dffb :=_bdg +1;_dffb <=_faa .Len ();_dffb ++{_bb ._fb .addErrorWithDescription (_fbc ,_c .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dffb ));};return nil ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_b :nil ,_fb :&DiffResults {},_fc :0};
};func (_de *defaultDiffPolicy )compareRevisions (_fd *_fe .PdfParser ,_ga *_fe .PdfParser )(*DiffResults ,error ){var _da error ;_de ._b ,_da =_ga .GetUpdatedObjects (_fd );if _da !=nil {return &DiffResults {},_da ;};if len (_de ._b )==0{return &DiffResults {},nil ;
};_db :=_ga .GetRevisionNumber ();_a ,_cb :=_fe .GetIndirect (_fe .ResolveReference (_fd .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ea ,_gaf :=_fe .GetIndirect (_fe .ResolveReference (_ga .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_cb ||!_gaf {return &DiffResults {},_d .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ec ,_cb :=_fe .GetDict (_fe .ResolveReference (_a .PdfObject ));_ab ,_gaf :=_fe .GetDict (_fe .ResolveReference (_ea .PdfObject ));if !_cb ||!_gaf {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _dd ,_eg :=_fe .GetIndirect (_ab .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_eg {_gb ,_bg :=_fe .GetDict (_dd );if !_bg {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_df :=make ([]_fe .PdfObject ,0);if _fa ,_dfd :=_fe .GetIndirect (_ec .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_dfd {if _eb ,_ebb :=_fe .GetDict (_fa );_ebb {if _dda ,_cf :=_fe .GetArray (_eb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_cf {_df =_dda .Elements ();};};};_ddb ,_bg :=_fe .GetArray (_gb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_bg {return &DiffResults {},_d .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _bdc :=_de .compareFields (_db ,_df ,_ddb .Elements ());_bdc !=nil {return &DiffResults {},_bdc ;};};_dee ,_dbc :=_fe .GetIndirect (_ab .Get ("\u0050\u0061\u0067e\u0073"));if !_dbc {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_ca ,_dbc :=_fe .GetIndirect (_ec .Get ("\u0050\u0061\u0067e\u0073"));if !_dbc {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _ef :=_de .comparePages (_db ,_ca ,_dee );_ef !=nil {return &DiffResults {},_ef ;};return _de ._fb ,nil ;};

// IsPermitted returns true if changes permitted.
func (_addb *DiffResults )IsPermitted ()bool {return len (_addb .Errors )==0};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_dgc *DiffResults )addWarningWithDescription (_fba int ,_bf string ){if _dgc .Warnings ==nil {_dgc .Warnings =make ([]*DiffResult ,0);};_dgc .Warnings =append (_dgc .Warnings ,&DiffResult {Revision :_fba ,Description :_bf });
};func (_daa *DiffResults )addErrorWithDescription (_gee int ,_add string ){if _daa .Errors ==nil {_daa .Errors =make ([]*DiffResult ,0);};_daa .Errors =append (_daa .Errors ,&DiffResult {Revision :_gee ,Description :_add });};