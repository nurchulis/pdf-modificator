//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_fc "bufio";_c "bytes";_ge "errors";_e "fmt";_ef "github.com/unidoc/unipdf/v3/common";_ea "github.com/unidoc/unipdf/v3/core";_f "io";_gg "math";);

// Append appends an object to the PSProgram.
func (_cd *PSProgram )Append (obj PSObject ){*_cd =append (*_cd ,obj )};func (_cebd *PSOperand )cvr (_gcc *PSStack )error {_egb ,_fga :=_gcc .Pop ();if _fga !=nil {return _fga ;};if _cgf ,_ggbd :=_egb .(*PSReal );_ggbd {_fga =_gcc .Push (MakeReal (_cgf .Val ));
}else if _abf ,_gae :=_egb .(*PSInteger );_gae {_fga =_gcc .Push (MakeReal (float64 (_abf .Val )));}else {return ErrTypeCheck ;};return _fga ;};func (_geb *PSInteger )DebugString ()string {return _e .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_geb .Val );
};func (_ffe *PSOperand )dup (_cge *PSStack )error {_abd ,_eda :=_cge .Pop ();if _eda !=nil {return _eda ;};_eda =_cge .Push (_abd );if _eda !=nil {return _eda ;};_eda =_cge .Push (_abd .Duplicate ());return _eda ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ggdg :=PSBoolean {};_ggdg .Val =val ;return &_ggdg };func (_fdfd *PSOperand )String ()string {return string (*_fdfd )};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_cgfc :=PSOperand (val );return &_cgfc };

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bbd *PSOperand )not (_fdbd *PSStack )error {_gbgb ,_gddf :=_fdbd .Pop ();if _gddf !=nil {return _gddf ;};if _bbe ,_gdgf :=_gbgb .(*PSBoolean );_gdgf {_gddf =_fdbd .Push (MakeBool (!_bbe .Val ));return _gddf ;}else if _gabad ,_bff :=_gbgb .(*PSInteger );
_bff {_gddf =_fdbd .Push (MakeInteger (^_gabad .Val ));return _gddf ;}else {return ErrTypeCheck ;};};

// PSParser is a basic Postscript parser.
type PSParser struct{_fdgb *_fc .Reader };

// Exec executes the operand `op` in the state specified by `stack`.
func (_ae *PSOperand )Exec (stack *PSStack )error {_bd :=ErrUnsupportedOperand ;switch *_ae {case "\u0061\u0062\u0073":_bd =_ae .abs (stack );case "\u0061\u0064\u0064":_bd =_ae .add (stack );case "\u0061\u006e\u0064":_bd =_ae .and (stack );case "\u0061\u0074\u0061\u006e":_bd =_ae .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bd =_ae .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bd =_ae .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bd =_ae .copy (stack );case "\u0063\u006f\u0073":_bd =_ae .cos (stack );
case "\u0063\u0076\u0069":_bd =_ae .cvi (stack );case "\u0063\u0076\u0072":_bd =_ae .cvr (stack );case "\u0064\u0069\u0076":_bd =_ae .div (stack );case "\u0064\u0075\u0070":_bd =_ae .dup (stack );case "\u0065\u0071":_bd =_ae .eq (stack );case "\u0065\u0078\u0063\u0068":_bd =_ae .exch (stack );
case "\u0065\u0078\u0070":_bd =_ae .exp (stack );case "\u0066\u006c\u006fo\u0072":_bd =_ae .floor (stack );case "\u0067\u0065":_bd =_ae .ge (stack );case "\u0067\u0074":_bd =_ae .gt (stack );case "\u0069\u0064\u0069\u0076":_bd =_ae .idiv (stack );case "\u0069\u0066":_bd =_ae .ifCondition (stack );
case "\u0069\u0066\u0065\u006c\u0073\u0065":_bd =_ae .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bd =_ae .index (stack );case "\u006c\u0065":_bd =_ae .le (stack );case "\u006c\u006f\u0067":_bd =_ae .log (stack );case "\u006c\u006e":_bd =_ae .ln (stack );
case "\u006c\u0074":_bd =_ae .lt (stack );case "\u006d\u006f\u0064":_bd =_ae .mod (stack );case "\u006d\u0075\u006c":_bd =_ae .mul (stack );case "\u006e\u0065":_bd =_ae .ne (stack );case "\u006e\u0065\u0067":_bd =_ae .neg (stack );case "\u006e\u006f\u0074":_bd =_ae .not (stack );
case "\u006f\u0072":_bd =_ae .or (stack );case "\u0070\u006f\u0070":_bd =_ae .pop (stack );case "\u0072\u006f\u0075n\u0064":_bd =_ae .round (stack );case "\u0072\u006f\u006c\u006c":_bd =_ae .roll (stack );case "\u0073\u0069\u006e":_bd =_ae .sin (stack );
case "\u0073\u0071\u0072\u0074":_bd =_ae .sqrt (stack );case "\u0073\u0075\u0062":_bd =_ae .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bd =_ae .truncate (stack );case "\u0078\u006f\u0072":_bd =_ae .xor (stack );};return _bd ;
};var ErrRangeCheck =_ge .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_afbc *PSParser )parseBool ()(*PSBoolean ,error ){_gbef ,_ddaa :=_afbc ._fdgb .Peek (4);if _ddaa !=nil {return MakeBool (false ),_ddaa ;
};if (len (_gbef )>=4)&&(string (_gbef [:4])=="\u0074\u0072\u0075\u0065"){_afbc ._fdgb .Discard (4);return MakeBool (true ),nil ;};_gbef ,_ddaa =_afbc ._fdgb .Peek (5);if _ddaa !=nil {return MakeBool (false ),_ddaa ;};if (len (_gbef )>=5)&&(string (_gbef [:5])=="\u0066\u0061\u006cs\u0065"){_afbc ._fdgb .Discard (5);
return MakeBool (false ),nil ;};return MakeBool (false ),_ge .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_efc *PSOperand )bitshift (_da *PSStack )error {_abb ,_fff :=_da .PopInteger ();if _fff !=nil {return _fff ;};_dda ,_fff :=_da .PopInteger ();if _fff !=nil {return _fff ;};var _dac int ;if _abb >=0{_dac =_dda <<uint (_abb );
}else {_dac =_dda >>uint (-_abb );};_fff =_da .Push (MakeInteger (_dac ));return _fff ;};func (_fd *PSBoolean )DebugString ()string {return _e .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_fd .Val );};func (_cbd *PSOperand )add (_bf *PSStack )error {_gde ,_aca :=_bf .Pop ();
if _aca !=nil {return _aca ;};_abc ,_aca :=_bf .Pop ();if _aca !=nil {return _aca ;};_bg ,_gb :=_gde .(*PSReal );_efed ,_ce :=_gde .(*PSInteger );if !_gb &&!_ce {return ErrTypeCheck ;};_cad ,_ddf :=_abc .(*PSReal );_fba ,_fed :=_abc .(*PSInteger );if !_ddf &&!_fed {return ErrTypeCheck ;
};if _ce &&_fed {_bge :=_efed .Val +_fba .Val ;_agd :=_bf .Push (MakeInteger (_bge ));return _agd ;};var _fda float64 ;if _gb {_fda =_bg .Val ;}else {_fda =float64 (_efed .Val );};if _ddf {_fda +=_cad .Val ;}else {_fda +=float64 (_fba .Val );};_aca =_bf .Push (MakeReal (_fda ));
return _aca ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_bbc *PSOperand )round (_ffb *PSStack )error {_dgg ,_abcb :=_ffb .Pop ();if _abcb !=nil {return _abcb ;};if _caf ,_ebcg :=_dgg .(*PSReal );_ebcg {_abcb =_ffb .Push (MakeReal (_gg .Floor (_caf .Val +0.5)));}else if _aaa ,_eabd :=_dgg .(*PSInteger );
_eabd {_abcb =_ffb .Push (MakeInteger (_aaa .Val ));}else {return ErrTypeCheck ;};return _abcb ;};func (_gab *PSProgram )Duplicate ()PSObject {_dc :=&PSProgram {};for _ ,_bc :=range *_gab {_dc .Append (_bc .Duplicate ());};return _dc ;};func (_dfd *PSOperand )exp (_fab *PSStack )error {_abdc ,_egf :=_fab .PopNumberAsFloat64 ();
if _egf !=nil {return _egf ;};_bec ,_egf :=_fab .PopNumberAsFloat64 ();if _egf !=nil {return _egf ;};if _gg .Abs (_abdc )< 1&&_bec < 0{return ErrUndefinedResult ;};_fbfc :=_gg .Pow (_bec ,_abdc );_egf =_fab .Push (MakeReal (_fbfc ));return _egf ;};

// Pop pops an object from the top of the stack.
func (_gbbdc *PSStack )Pop ()(PSObject ,error ){if len (*_gbbdc )< 1{return nil ,ErrStackUnderflow ;};_gabg :=(*_gbbdc )[len (*_gbbdc )-1];*_gbbdc =(*_gbbdc )[0:len (*_gbbdc )-1];return _gabg ,nil ;};func (_bfg *PSOperand )and (_dg *PSStack )error {_de ,_aeg :=_dg .Pop ();
if _aeg !=nil {return _aeg ;};_af ,_aeg :=_dg .Pop ();if _aeg !=nil {return _aeg ;};if _acgf ,_cbdb :=_de .(*PSBoolean );_cbdb {_fg ,_eac :=_af .(*PSBoolean );if !_eac {return ErrTypeCheck ;};_aeg =_dg .Push (MakeBool (_acgf .Val &&_fg .Val ));return _aeg ;
};if _afa ,_baf :=_de .(*PSInteger );_baf {_ace ,_efb :=_af .(*PSInteger );if !_efb {return ErrTypeCheck ;};_aeg =_dg .Push (MakeInteger (_afa .Val &_ace .Val ));return _aeg ;};return ErrTypeCheck ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_cgfg *PSOperand )floor (_dcbf *PSStack )error {_gbe ,_ega :=_dcbf .Pop ();if _ega !=nil {return _ega ;};if _ebc ,_bcfa :=_gbe .(*PSReal );_bcfa {_ega =_dcbf .Push (MakeReal (_gg .Floor (_ebc .Val )));}else if _eaag ,_gfg :=_gbe .(*PSInteger );
_gfg {_ega =_dcbf .Push (MakeInteger (_eaag .Val ));}else {return ErrTypeCheck ;};return _ega ;};func (_dee *PSOperand )ceiling (_gbb *PSStack )error {_gbg ,_ffg :=_gbb .Pop ();if _ffg !=nil {return _ffg ;};if _gad ,_eb :=_gbg .(*PSReal );_eb {_ffg =_gbb .Push (MakeReal (_gg .Ceil (_gad .Val )));
}else if _acab ,_ffc :=_gbg .(*PSInteger );_ffc {_ffg =_gbb .Push (MakeInteger (_acab .Val ));}else {_ffg =ErrTypeCheck ;};return _ffg ;};func (_bfd *PSOperand )ge (_aaf *PSStack )error {_aea ,_dace :=_aaf .PopNumberAsFloat64 ();if _dace !=nil {return _dace ;
};_dae ,_dace :=_aaf .PopNumberAsFloat64 ();if _dace !=nil {return _dace ;};if _gg .Abs (_dae -_aea )< _cf {_cbc :=_aaf .Push (MakeBool (true ));return _cbc ;}else if _dae > _aea {_dff :=_aaf .Push (MakeBool (true ));return _dff ;}else {_cdc :=_aaf .Push (MakeBool (false ));
return _cdc ;};};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_b *PSProgram ;};func (_adc *PSOperand )sub (_bddb *PSStack )error {_edaa ,_ddaf :=_bddb .Pop ();if _ddaf !=nil {return _ddaf ;};_cbcf ,_ddaf :=_bddb .Pop ();if _ddaf !=nil {return _ddaf ;};_bcfg ,_ecab :=_edaa .(*PSReal );
_bcba ,_daaf :=_edaa .(*PSInteger );if !_ecab &&!_daaf {return ErrTypeCheck ;};_bfge ,_edab :=_cbcf .(*PSReal );_bbee ,_bad :=_cbcf .(*PSInteger );if !_edab &&!_bad {return ErrTypeCheck ;};if _daaf &&_bad {_fea :=_bbee .Val -_bcba .Val ;_fee :=_bddb .Push (MakeInteger (_fea ));
return _fee ;};var _fgb float64 =0;if _edab {_fgb =_bfge .Val ;}else {_fgb =float64 (_bbee .Val );};if _ecab {_fgb -=_bcfg .Val ;}else {_fgb -=float64 (_bcba .Val );};_ddaf =_bddb .Push (MakeReal (_fgb ));return _ddaf ;};func (_eea *PSOperand )mod (_dbg *PSStack )error {_ceg ,_cfe :=_dbg .Pop ();
if _cfe !=nil {return _cfe ;};_egag ,_cfe :=_dbg .Pop ();if _cfe !=nil {return _cfe ;};_gaeb ,_fabb :=_ceg .(*PSInteger );if !_fabb {return ErrTypeCheck ;};if _gaeb .Val ==0{return ErrUndefinedResult ;};_aebf ,_fabb :=_egag .(*PSInteger );if !_fabb {return ErrTypeCheck ;
};_faa :=_aebf .Val %_gaeb .Val ;_cfe =_dbg .Push (MakeInteger (_faa ));return _cfe ;};var ErrUnsupportedOperand =_ge .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_cfa *PSOperand )cvi (_gdc *PSStack )error {_gef ,_bfgg :=_gdc .Pop ();if _bfgg !=nil {return _bfgg ;};if _fae ,_bgb :=_gef .(*PSReal );_bgb {_ceb :=int (_fae .Val );_bfgg =_gdc .Push (MakeInteger (_ceb ));}else if _be ,_gdcg :=_gef .(*PSInteger );
_gdcg {_aab :=_be .Val ;_bfgg =_gdc .Push (MakeInteger (_aab ));}else {return ErrTypeCheck ;};return _bfgg ;};func (_adff *PSOperand )truncate (_gdac *PSStack )error {_cae ,_acc :=_gdac .Pop ();if _acc !=nil {return _acc ;};if _gca ,_gbcg :=_cae .(*PSReal );
_gbcg {_gaee :=int (_gca .Val );_acc =_gdac .Push (MakeReal (float64 (_gaee )));}else if _gff ,_ffcg :=_cae .(*PSInteger );_ffcg {_acc =_gdac .Push (MakeInteger (_gff .Val ));}else {return ErrTypeCheck ;};return _acc ;};func (_ffgb *PSOperand )div (_afb *PSStack )error {_acgc ,_gdd :=_afb .Pop ();
if _gdd !=nil {return _gdd ;};_baff ,_gdd :=_afb .Pop ();if _gdd !=nil {return _gdd ;};_gefa ,_adfg :=_acgc .(*PSReal );_dga ,_bed :=_acgc .(*PSInteger );if !_adfg &&!_bed {return ErrTypeCheck ;};if _adfg &&_gefa .Val ==0{return ErrUndefinedResult ;};if _bed &&_dga .Val ==0{return ErrUndefinedResult ;
};_gaba ,_gdg :=_baff .(*PSReal );_cfc ,_gcd :=_baff .(*PSInteger );if !_gdg &&!_gcd {return ErrTypeCheck ;};var _gbc float64 ;if _gdg {_gbc =_gaba .Val ;}else {_gbc =float64 (_cfc .Val );};if _adfg {_gbc /=_gefa .Val ;}else {_gbc /=float64 (_dga .Val );
};_gdd =_afb .Push (MakeReal (_gbc ));return _gdd ;};func (_ccd *PSOperand )ne (_ddg *PSStack )error {_fbb :=_ccd .eq (_ddg );if _fbb !=nil {return _fbb ;};_fbb =_ccd .not (_ddg );return _fbb ;};func (_cfea *PSOperand )mul (_gda *PSStack )error {_ggbe ,_gaef :=_gda .Pop ();
if _gaef !=nil {return _gaef ;};_dge ,_gaef :=_gda .Pop ();if _gaef !=nil {return _gaef ;};_dadf ,_adb :=_ggbe .(*PSReal );_age ,_ccc :=_ggbe .(*PSInteger );if !_adb &&!_ccc {return ErrTypeCheck ;};_gdcf ,_bgbc :=_dge .(*PSReal );_baga ,_dea :=_dge .(*PSInteger );
if !_bgbc &&!_dea {return ErrTypeCheck ;};if _ccc &&_dea {_aff :=_age .Val *_baga .Val ;_cfaa :=_gda .Push (MakeInteger (_aff ));return _cfaa ;};var _eag float64 ;if _adb {_eag =_dadf .Val ;}else {_eag =float64 (_age .Val );};if _bgbc {_eag *=_gdcf .Val ;
}else {_eag *=float64 (_baga .Val );};_gaef =_gda .Push (MakeReal (_eag ));return _gaef ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};var ErrTypeCheck =_ge .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_bgfd *PSParser )parseOperand ()(*PSOperand ,error ){var _gbbg []byte ;for {_deaa ,_dggg :=_bgfd ._fdgb .Peek (1);
if _dggg !=nil {if _dggg ==_f .EOF {break ;};return nil ,_dggg ;};if _ea .IsDelimiter (_deaa [0]){break ;};if _ea .IsWhiteSpace (_deaa [0]){break ;};_aac ,_ :=_bgfd ._fdgb .ReadByte ();_gbbg =append (_gbbg ,_aac );};if len (_gbbg )==0{return nil ,_ge .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_gbbg )),nil ;};func (_ed *PSInteger )String ()string {return _e .Sprintf ("\u0025\u0064",_ed .Val )};func (_dcb *PSOperand )cos (_cbac *PSStack )error {_ded ,_aebd :=_cbac .PopNumberAsFloat64 ();if _aebd !=nil {return _aebd ;
};_ada :=_gg .Cos (_ded *_gg .Pi /180.0);_aebd =_cbac .Push (MakeReal (_ada ));return _aebd ;};func (_edc *PSOperand )index (_gcdd *PSStack )error {_acdb ,_ebb :=_gcdd .Pop ();if _ebb !=nil {return _ebb ;};_aed ,_bede :=_acdb .(*PSInteger );if !_bede {return ErrTypeCheck ;
};if _aed .Val < 0{return ErrRangeCheck ;};if _aed .Val > len (*_gcdd )-1{return ErrStackUnderflow ;};_eab :=(*_gcdd )[len (*_gcdd )-1-_aed .Val ];_ebb =_gcdd .Push (_eab .Duplicate ());return _ebb ;};func (_ebe *PSOperand )ifCondition (_gdfc *PSStack )error {_gefe ,_dfdf :=_gdfc .Pop ();
if _dfdf !=nil {return _dfdf ;};_fdb ,_dfdf :=_gdfc .Pop ();if _dfdf !=nil {return _dfdf ;};_ebg ,_gcg :=_gefe .(*PSProgram );if !_gcg {return ErrTypeCheck ;};_gfad ,_gcg :=_fdb .(*PSBoolean );if !_gcg {return ErrTypeCheck ;};if _gfad .Val {_fcfd :=_ebg .Exec (_gdfc );
return _fcfd ;};return nil ;};

// Exec executes the program, typically leaving output values on the stack.
func (_feb *PSProgram )Exec (stack *PSStack )error {for _ ,_fa :=range *_feb {var _acg error ;switch _fbg :=_fa .(type ){case *PSInteger :_fef :=_fbg ;_acg =stack .Push (_fef );case *PSReal :_cbg :=_fbg ;_acg =stack .Push (_cbg );case *PSBoolean :_eg :=_fbg ;
_acg =stack .Push (_eg );case *PSProgram :_gd :=_fbg ;_acg =stack .Push (_gd );case *PSOperand :_dbb :=_fbg ;_acg =_dbb .Exec (stack );default:return ErrTypeCheck ;};if _acg !=nil {return _acg ;};};return nil ;};func (_bgc *PSOperand )log (_bfef *PSStack )error {_ege ,_fac :=_bfef .PopNumberAsFloat64 ();
if _fac !=nil {return _fac ;};_egga :=_gg .Log10 (_ege );_fac =_bfef .Push (MakeReal (_egga ));return _fac ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bdfd *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ffge ,_ece :=_bdfd .Pop ();if _ece !=nil {return 0,_ece ;};if _baa ,_ccdd :=_ffge .(*PSReal );_ccdd {return _baa .Val ,nil ;}else if _daed ,_bbgc :=_ffge .(*PSInteger );_bbgc {return float64 (_daed .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};const _cf =0.000001;

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_gf *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ac :=range objects {_ggb :=_gf .Stack .Push (_ac );if _ggb !=nil {return nil ,_ggb ;};};_cac :=_gf ._b .Exec (_gf .Stack );if _cac !=nil {_ef .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cac );
return nil ,_cac ;};_ff :=[]PSObject (*_gf .Stack );_gf .Stack .Empty ();return _ff ,nil ;};func (_egbf *PSOperand )roll (_fde *PSStack )error {_ggef ,_aafe :=_fde .Pop ();if _aafe !=nil {return _aafe ;};_eecd ,_aafe :=_fde .Pop ();if _aafe !=nil {return _aafe ;
};_caca ,_agb :=_ggef .(*PSInteger );if !_agb {return ErrTypeCheck ;};_abee ,_agb :=_eecd .(*PSInteger );if !_agb {return ErrTypeCheck ;};if _abee .Val < 0{return ErrRangeCheck ;};if _abee .Val ==0||_abee .Val ==1{return nil ;};if _abee .Val > len (*_fde ){return ErrStackUnderflow ;
};for _cgbe :=0;_cgbe < _abab (_caca .Val );_cgbe ++{var _fgc []PSObject ;_fgc =(*_fde )[len (*_fde )-(_abee .Val ):len (*_fde )];if _caca .Val > 0{_fded :=_fgc [len (_fgc )-1];_fgc =append ([]PSObject {_fded },_fgc [0:len (_fgc )-1]...);}else {_ggda :=_fgc [len (_fgc )-_abee .Val ];
_fgc =append (_fgc [1:],_ggda );};_bce :=append ((*_fde )[0:len (*_fde )-_abee .Val ],_fgc ...);_fde =&_bce ;};return nil ;};func (_eaa *PSOperand )abs (_bcf *PSStack )error {_geg ,_bcc :=_bcf .Pop ();if _bcc !=nil {return _bcc ;};if _gfc ,_fbfg :=_geg .(*PSReal );
_fbfg {_aad :=_gfc .Val ;if _aad < 0{_bcc =_bcf .Push (MakeReal (-_aad ));}else {_bcc =_bcf .Push (MakeReal (_aad ));};}else if _gdf ,_ba :=_geg .(*PSInteger );_ba {_gag :=_gdf .Val ;if _gag < 0{_bcc =_bcf .Push (MakeInteger (-_gag ));}else {_bcc =_bcf .Push (MakeInteger (_gag ));
};}else {return ErrTypeCheck ;};return _bcc ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fffd *PSOperand )ln (_gfab *PSStack )error {_gbgf ,_eeg :=_gfab .PopNumberAsFloat64 ();if _eeg !=nil {return _eeg ;};_gga :=_gg .Log (_gbgf );_eeg =_gfab .Push (MakeReal (_gga ));return _eeg ;};func (_bef *PSOperand )xor (_cce *PSStack )error {_abgd ,_cega :=_cce .Pop ();
if _cega !=nil {return _cega ;};_acaf ,_cega :=_cce .Pop ();if _cega !=nil {return _cega ;};if _afg ,_gfgg :=_abgd .(*PSBoolean );_gfgg {_cdcef ,_fcdd :=_acaf .(*PSBoolean );if !_fcdd {return ErrTypeCheck ;};_cega =_cce .Push (MakeBool (_afg .Val !=_cdcef .Val ));
return _cega ;};if _bac ,_ecd :=_abgd .(*PSInteger );_ecd {_efbd ,_ecg :=_acaf .(*PSInteger );if !_ecg {return ErrTypeCheck ;};_cega =_cce .Push (MakeInteger (_bac .Val ^_efbd .Val ));return _cega ;};return ErrTypeCheck ;};var ErrStackUnderflow =_ge .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");


// String returns a string representation of the stack.
func (_edg *PSStack )String ()string {_ade :="\u005b\u0020";for _ ,_dfbf :=range *_edg {_ade +=_dfbf .String ();_ade +="\u0020";};_ade +="\u005d";return _ade ;};func (_cbdg *PSOperand )idiv (_bdca *PSStack )error {_dfg ,_faeg :=_bdca .Pop ();if _faeg !=nil {return _faeg ;
};_ddad ,_faeg :=_bdca .Pop ();if _faeg !=nil {return _faeg ;};_cdb ,_dad :=_dfg .(*PSInteger );if !_dad {return ErrTypeCheck ;};if _cdb .Val ==0{return ErrUndefinedResult ;};_edb ,_dad :=_ddad .(*PSInteger );if !_dad {return ErrTypeCheck ;};_cde :=_edb .Val /_cdb .Val ;
_faeg =_bdca .Push (MakeInteger (_cde ));return _faeg ;};func (_fb *PSReal )String ()string {return _e .Sprintf ("\u0025\u002e\u0035\u0066",_fb .Val )};func (_dbd *PSOperand )or (_fgg *PSStack )error {_ecb ,_cacc :=_fgg .Pop ();if _cacc !=nil {return _cacc ;
};_eadb ,_cacc :=_fgg .Pop ();if _cacc !=nil {return _cacc ;};if _ggd ,_ddc :=_ecb .(*PSBoolean );_ddc {_cea ,_faad :=_eadb .(*PSBoolean );if !_faad {return ErrTypeCheck ;};_cacc =_fgg .Push (MakeBool (_ggd .Val ||_cea .Val ));return _cacc ;};if _cegd ,_adaa :=_ecb .(*PSInteger );
_adaa {_dbf ,_eafa :=_eadb .(*PSInteger );if !_eafa {return ErrTypeCheck ;};_cacc =_fgg .Push (MakeInteger (_cegd .Val |_dbf .Val ));return _cacc ;};return ErrTypeCheck ;};

// Empty empties the stack.
func (_feeb *PSStack )Empty (){*_feeb =[]PSObject {}};func (_dd *PSInteger )Duplicate ()PSObject {_eae :=PSInteger {};_eae .Val =_dd .Val ;return &_eae };func (_ee *PSProgram )DebugString ()string {_fdf :="\u007b\u0020";for _ ,_abe :=range *_ee {_fdf +=_abe .DebugString ();
_fdf +="\u0020";};_fdf +="\u007d";return _fdf ;};func (_ad *PSReal )Duplicate ()PSObject {_ga :=PSReal {};_ga .Val =_ad .Val ;return &_ga };func (_ag *PSBoolean )String ()string {return _e .Sprintf ("\u0025\u0076",_ag .Val )};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_bb :=&PSExecutor {};_bb .Stack =NewPSStack ();_bb ._b =program ;return _bb ;};func (_acge *PSParser )skipSpaces ()(int ,error ){_egeb :=0;for {_caeg ,_bdf :=_acge ._fdgb .Peek (1);if _bdf !=nil {return 0,_bdf ;
};if _ea .IsWhiteSpace (_caeg [0]){_acge ._fdgb .ReadByte ();_egeb ++;}else {break ;};};return _egeb ,nil ;};func (_daa *PSOperand )lt (_gdcc *PSStack )error {_dgc ,_gdb :=_gdcc .PopNumberAsFloat64 ();if _gdb !=nil {return _gdb ;};_afc ,_gdb :=_gdcc .PopNumberAsFloat64 ();
if _gdb !=nil {return _gdb ;};if _gg .Abs (_afc -_dgc )< _cf {_fcc :=_gdcc .Push (MakeBool (false ));return _fcc ;}else if _afc < _dgc {_bdd :=_gdcc .Push (MakeBool (true ));return _bdd ;}else {_dca :=_gdcc .Push (MakeBool (false ));return _dca ;};};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _gc []float64 ;for _ ,_fe :=range objects {if _ca ,_efe :=_fe .(*PSInteger );_efe {_gc =append (_gc ,float64 (_ca .Val ));}else if _cb ,_d :=_fe .(*PSReal );_d {_gc =append (_gc ,_cb .Val );
}else {return nil ,ErrTypeCheck ;};};return _gc ,nil ;};func (_fbf *PSBoolean )Duplicate ()PSObject {_cg :=PSBoolean {};_cg .Val =_fbf .Val ;return &_cg };

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_cag *PSStack )PopInteger ()(int ,error ){_cbca ,_bfefc :=_cag .Pop ();if _bfefc !=nil {return 0,_bfefc ;};if _egbd ,_ddfcb :=_cbca .(*PSInteger );_ddfcb {return _egbd .Val ,nil ;};return 0,ErrTypeCheck ;};func (_aeb *PSOperand )copy (_abg *PSStack )error {_bged ,_cfd :=_abg .PopInteger ();
if _cfd !=nil {return _cfd ;};if _bged < 0{return ErrRangeCheck ;};if _bged > len (*_abg ){return ErrRangeCheck ;};*_abg =append (*_abg ,(*_abg )[len (*_abg )-_bged :]...);return nil ;};func (_db *PSReal )DebugString ()string {return _e .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_db .Val );
};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bgcc :=PSReal {};_bgcc .Val =val ;return &_bgcc };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_aagd :=PSInteger {};_aagd .Val =val ;return &_aagd };func (_aba *PSProgram )String ()string {_cfg :="\u007b\u0020";for _ ,_cgg :=range *_aba {_cfg +=_cgg .String ();_cfg +="\u0020";};_cfg +="\u007d";return _cfg ;
};var ErrStackOverflow =_ge .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_daag *PSParser )parseNumber ()(PSObject ,error ){_fec ,_aaba :=_ea .ParseNumber (_daag ._fdgb );if _aaba !=nil {return nil ,_aaba ;
};switch _bfed :=_fec .(type ){case *_ea .PdfObjectFloat :return MakeReal (float64 (*_bfed )),nil ;case *_ea .PdfObjectInteger :return MakeInteger (int (*_bfed )),nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fec );
};var ErrUndefinedResult =_ge .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_gcce *PSOperand )pop (_ffa *PSStack )error {_ ,_fdbdd :=_ffa .Pop ();if _fdbdd !=nil {return _fdbdd ;
};return nil ;};

// Push pushes an object on top of the stack.
func (_aga *PSStack )Push (obj PSObject )error {if len (*_aga )> 100{return ErrStackOverflow ;};*_aga =append (*_aga ,obj );return nil ;};func (_eacf *PSOperand )sin (_aag *PSStack )error {_cca ,_eca :=_aag .PopNumberAsFloat64 ();if _eca !=nil {return _eca ;
};_dffd :=_gg .Sin (_cca *_gg .Pi /180.0);_eca =_aag .Push (MakeReal (_dffd ));return _eca ;};func (_ffdc *PSOperand )DebugString ()string {return _e .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ffdc );};func (_aafb *PSOperand )ifelse (_bdcf *PSStack )error {_gbgd ,_cdce :=_bdcf .Pop ();
if _cdce !=nil {return _cdce ;};_bcb ,_cdce :=_bdcf .Pop ();if _cdce !=nil {return _cdce ;};_beca ,_cdce :=_bdcf .Pop ();if _cdce !=nil {return _cdce ;};_adac ,_egad :=_gbgd .(*PSProgram );if !_egad {return ErrTypeCheck ;};_eff ,_egad :=_bcb .(*PSProgram );
if !_egad {return ErrTypeCheck ;};_cc ,_egad :=_beca .(*PSBoolean );if !_egad {return ErrTypeCheck ;};if _cc .Val {_fgf :=_eff .Exec (_bdcf );return _fgf ;};_cdce =_adac .Exec (_bdcf );return _cdce ;};func (_geaa *PSOperand )le (_cbad *PSStack )error {_acgg ,_efa :=_cbad .PopNumberAsFloat64 ();
if _efa !=nil {return _efa ;};_fbc ,_efa :=_cbad .PopNumberAsFloat64 ();if _efa !=nil {return _efa ;};if _gg .Abs (_fbc -_acgg )< _cf {_ede :=_cbad .Push (MakeBool (true ));return _ede ;}else if _fbc < _acgg {_cbec :=_cbad .Push (MakeBool (true ));return _cbec ;
}else {_bfe :=_cbad .Push (MakeBool (false ));return _bfe ;};};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_bfgc :=PSParser {};_ccb :=_c .NewBuffer (content );_bfgc ._fdgb =_fc .NewReader (_ccb );return &_bfgc ;};func (_eacbe *PSParser )parseFunction ()(*PSProgram ,error ){_bgd ,_ :=_eacbe ._fdgb .ReadByte ();if _bgd !='{'{return nil ,_ge .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_dcc :=NewPSProgram ();for {_eacbe .skipSpaces ();_cbf ,_gdgb :=_eacbe ._fdgb .Peek (2);if _gdgb !=nil {if _gdgb ==_f .EOF {break ;};return nil ,_gdgb ;};_ef .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cbf ));
if _cbf [0]=='}'{_ef .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_eacbe ._fdgb .ReadByte ();break ;}else if _cbf [0]=='{'{_ef .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_ddfc ,_cafb :=_eacbe .parseFunction ();
if _cafb !=nil {return nil ,_cafb ;};_dcc .Append (_ddfc );}else if _ea .IsDecimalDigit (_cbf [0])||(_cbf [0]=='-'&&_ea .IsDecimalDigit (_cbf [1])){_ef .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_dcd ,_eecb :=_eacbe .parseNumber ();if _eecb !=nil {return nil ,_eecb ;
};_dcc .Append (_dcd );}else {_ef .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cbf ,_ =_eacbe ._fdgb .Peek (5);_eeb :=string (_cbf );_ef .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_eeb );
if (len (_eeb )> 4)&&(_eeb [:5]=="\u0066\u0061\u006cs\u0065"){_ggf ,_gbbd :=_eacbe .parseBool ();if _gbbd !=nil {return nil ,_gbbd ;};_dcc .Append (_ggf );}else if (len (_eeb )> 3)&&(_eeb [:4]=="\u0074\u0072\u0075\u0065"){_ddd ,_dgae :=_eacbe .parseBool ();
if _dgae !=nil {return nil ,_dgae ;};_dcc .Append (_ddd );}else {_gfcg ,_dfe :=_eacbe .parseOperand ();if _dfe !=nil {return nil ,_dfe ;};_dcc .Append (_gfcg );};};};return _dcc ,nil ;};func (_fdfc *PSOperand )gt (_fcd *PSStack )error {_ggc ,_aeab :=_fcd .PopNumberAsFloat64 ();
if _aeab !=nil {return _aeab ;};_egfc ,_aeab :=_fcd .PopNumberAsFloat64 ();if _aeab !=nil {return _aeab ;};if _gg .Abs (_egfc -_ggc )< _cf {_gcca :=_fcd .Push (MakeBool (false ));return _gcca ;}else if _egfc > _ggc {_gge :=_fcd .Push (MakeBool (true ));
return _gge ;}else {_ceba :=_fcd .Push (MakeBool (false ));return _ceba ;};};func _abab (_dacf int )int {if _dacf < 0{return -_dacf ;};return _dacf ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_cacg *PSStack )DebugString ()string {_gebg :="\u005b\u0020";for _ ,_baca :=range *_cacg {_gebg +=_baca .DebugString ();_gebg +="\u0020";};_gebg +="\u005d";return _gebg ;};func (_bafff *PSOperand )exch (_dcf *PSStack )error {_cga ,_cdf :=_dcf .Pop ();
if _cdf !=nil {return _cdf ;};_eacb ,_cdf :=_dcf .Pop ();if _cdf !=nil {return _cdf ;};_cdf =_dcf .Push (_cga );if _cdf !=nil {return _cdf ;};_cdf =_dcf .Push (_eacb );return _cdf ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bcff *PSParser )Parse ()(*PSProgram ,error ){_bcff .skipSpaces ();_aade ,_ffdg :=_bcff ._fdgb .Peek (2);if _ffdg !=nil {return nil ,_ffdg ;};if _aade [0]!='{'{return nil ,_ge .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_dbc ,_ffdg :=_bcff .parseFunction ();if _ffdg !=nil &&_ffdg !=_f .EOF {return nil ,_ffdg ;};return _dbc ,_ffdg ;};func (_fad *PSOperand )eq (_dcba *PSStack )error {_afae ,_gea :=_dcba .Pop ();if _gea !=nil {return _gea ;};_ead ,_gea :=_dcba .Pop ();
if _gea !=nil {return _gea ;};_bdc ,_cbe :=_afae .(*PSBoolean );_bgf ,_dfb :=_ead .(*PSBoolean );if _cbe ||_dfb {var _gadg error ;if _cbe &&_dfb {_gadg =_dcba .Push (MakeBool (_bdc .Val ==_bgf .Val ));}else {_gadg =_dcba .Push (MakeBool (false ));};return _gadg ;
};var _feba float64 ;var _cgb float64 ;if _gegg ,_cff :=_afae .(*PSInteger );_cff {_feba =float64 (_gegg .Val );}else if _aec ,_bae :=_afae .(*PSReal );_bae {_feba =_aec .Val ;}else {return ErrTypeCheck ;};if _gfaf ,_bda :=_ead .(*PSInteger );_bda {_cgb =float64 (_gfaf .Val );
}else if _cbab ,_cbgec :=_ead .(*PSReal );_cbgec {_cgb =_cbab .Val ;}else {return ErrTypeCheck ;};if _gg .Abs (_cgb -_feba )< _cf {_gea =_dcba .Push (MakeBool (true ));}else {_gea =_dcba .Push (MakeBool (false ));};return _gea ;};func (_fcf *PSOperand )Duplicate ()PSObject {_aa :=*_fcf ;
return &_aa };func (_cba *PSOperand )atan (_cbge *PSStack )error {_gce ,_adf :=_cbge .PopNumberAsFloat64 ();if _adf !=nil {return _adf ;};_egg ,_adf :=_cbge .PopNumberAsFloat64 ();if _adf !=nil {return _adf ;};if _gce ==0{var _df error ;if _egg < 0{_df =_cbge .Push (MakeReal (270));
}else {_df =_cbge .Push (MakeReal (90));};return _df ;};_bag :=_egg /_gce ;_cgga :=_gg .Atan (_bag )*180/_gg .Pi ;_adf =_cbge .Push (MakeReal (_cgga ));return _adf ;};func (_cebdd *PSOperand )neg (_ec *PSStack )error {_feg ,_fdg :=_ec .Pop ();if _fdg !=nil {return _fdg ;
};if _cdd ,_fbgf :=_feg .(*PSReal );_fbgf {_fdg =_ec .Push (MakeReal (-_cdd .Val ));return _fdg ;}else if _gebe ,_eaf :=_feg .(*PSInteger );_eaf {_fdg =_ec .Push (MakeInteger (-_gebe .Val ));return _fdg ;}else {return ErrTypeCheck ;};};func (_bgfb *PSOperand )sqrt (_bdcg *PSStack )error {_ebd ,_cded :=_bdcg .PopNumberAsFloat64 ();
if _cded !=nil {return _cded ;};if _ebd < 0{return ErrRangeCheck ;};_agg :=_gg .Sqrt (_ebd );_cded =_bdcg .Push (MakeReal (_agg ));return _cded ;};